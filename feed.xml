<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>JMS55&#x27;s Blog</title>
	<subtitle>Bevy, Rust, Graphics, etc</subtitle>
	<link href="https://jms55.github.io/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://jms55.github.io"/>
	<updated>2025-09-20T00:00:00+00:00</updated>
	<id>https://jms55.github.io/feed.xml</id>
	<entry xml:lang="en">
		<title>Realtime Raytracing in Bevy 0.17 (Solari)</title>
		<published>2025-09-20T00:00:00+00:00</published>
		<updated>2025-09-20T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2025-09-20-solari-bevy-0-17/" type="text/html"/>
		<id>https://jms55.github.io/posts/2025-09-20-solari-bevy-0-17/</id>
		<content type="html">&lt;p&gt;Lighting a scene is hard! Anyone who&#x27;s tried to make a 3D scene look good knows the frustration of placing light probes, tweaking shadow cascades, and trying to figure out why their materials don&#x27;t look quite right.&lt;&#x2F;p&gt;
&lt;p&gt;Over the past few years, real-time raytracing has gone from a research curiosity to a shipping feature in major game engines, promising to solve many of these problems by simulating how light actually behaves.&lt;&#x2F;p&gt;
&lt;p&gt;With the release of v0.17, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevy.org&quot;&gt;Bevy&lt;&#x2F;a&gt; now joins the club with experimental support for hardware raytracing!&lt;&#x2F;p&gt;
&lt;video style=&quot;max-width: 100%; margin: var(--gap) var(--gap) 0 var(--gap); border-radius: 6px;&quot; controls&gt;
  &lt;source src=&quot;solari_recording.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;center&gt;
&lt;p&gt;&lt;em&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SEED-EA&#x2F;pica-pica-assets&quot;&gt;PICA PICA scene by SEED&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Try it out yourself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp; cd&lt;&#x2F;span&gt;&lt;span&gt; bevy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout release-0.17.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --release --examples&lt;&#x2F;span&gt;&lt;span&gt; solari&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; bevy_solari,https
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Optionally setup DLSS support for NVIDIA GPUs following https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;dlss_wgpu?tab=readme-ov-file#downloading-the-dlss-sdk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --release --examples&lt;&#x2F;span&gt;&lt;span&gt; solari&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; bevy_solari,https,dlss
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Back in 2023, I &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;10000&quot;&gt;started&lt;&#x2F;a&gt; a project I called Solari to integrate hardware raytracing into Bevy&#x27;s rendering pipeline. I was experimenting with &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;2GYXuM10riw&quot;&gt;Lumen&lt;&#x2F;a&gt;-style screen space probes for global illumination, and later extended it to use &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;radiance-cascades.com&quot;&gt;radiance cascades&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;These techniques, while theoretically sound, proved challenging to use in practice. Screen space probes were tricky to get good quality out of (reusing and reprojecting the same probe across multiple pixels is hard!), and radiance cascades brought its own set of artifacts and performance costs.&lt;&#x2F;p&gt;
&lt;p&gt;On top of the algorithmic challenges, the ecosystem simply wasn&#x27;t ready. Wgpu&#x27;s raytracing support existed only as a work-in-progress PR that never got merged upstream. Maintaining a fork of wgpu (and by extension, Bevy) was time-consuming and unsustainable. After months of dealing with these challenges, I shelved the project.&lt;&#x2F;p&gt;
&lt;p&gt;In the 2 years since, I&#x27;ve learned a bunch more, raytracing has been upstreamed into wgpu, and raytracing algorithms have gotten much more developed. I&#x27;ve restarted the project with a new approach (ReSTIR, DLSS-RR), and soon it will be released as an official Bevy plugin!&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I&#x27;ll be doing a frame breakdown of how Solari works in Bevy 0.17, why I made certain choices, some of the challenges I faced, and some of the issues I&#x27;ve yet to solve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-raytracing-for-bevy&quot;&gt;Why Raytracing for Bevy?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-raytracing-for-bevy&quot; aria-label=&quot;Anchor link for: why-raytracing-for-bevy&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Before we start, I think it&#x27;s fair to ask why an &quot;indie&quot; game engine needs high-end raytracing features that requires an expensive graphics card. The answer comes from my own experience learning 3D graphics.&lt;&#x2F;p&gt;
&lt;p&gt;Back when I was a teenager experimenting with small 3D games in Godot, I had a really hard time figuring out why my lighting looked so bad. Metallic objects didn&#x27;t look reflective, scenes felt flat, and everything just looked wrong compared to the games I was playing.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t understand that I was missing indirect light, proper reflections, and accurate shadows - I had no idea I was supposed to bake lighting.&lt;&#x2F;p&gt;
&lt;p&gt;This is the core problem that raytracing solves for indie developers. Even if not all players have hardware capable of running ray-traced effects, having a reference implementation of what lighting is &lt;em&gt;supposed&lt;&#x2F;em&gt; to look like is incredibly valuable.&lt;&#x2F;p&gt;
&lt;p&gt;With fully dynamic global illumination, reflections, shadows, and direct lighting, developers can see how their scenes should be lit. Then they can work backwards to replicate those results with baked lighting, screen-space techniques, and other less performance-intensive approximations.&lt;&#x2F;p&gt;
&lt;p&gt;Without that reference, it&#x27;s really hard to know what you&#x27;re missing or how to improve your lighting setup. Raytracing provides the ground truth that other techniques are trying to approximate.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, hardware is advancing all the time. Five years ago, raytracing was much less widespread than today. If you start developing a new game today with a 3-4 year lead time, raytracing is probably going to be even more common by the time you&#x27;re ready to release it. Solari was in large part designed as a foward-looking rendering system.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also the practical consideration that if Bevy ever wants to attract AAA game developers, we need these kinds of systems. Recent AAA games like &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2025&#x2F;content&#x2F;SOUSA_SIGGRAPH_2025_Final.pdf&quot;&gt;DOOM: The Dark Ages&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;intro-to-restir.cwyman.org&#x2F;presentations&#x2F;2023ReSTIR_Course_Cyberpunk_2077_Integration.pdf&quot;&gt;Cyberpunk 2077&lt;&#x2F;a&gt; rely heavily on raytracing, and artists working on these types of projects expect their tools to support similar techniques.&lt;&#x2F;p&gt;
&lt;p&gt;And honestly? It&#x27;s just cool, and something I love working on :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;frame-breakdown&quot;&gt;Frame Breakdown&lt;a class=&quot;zola-anchor&quot; href=&quot;#frame-breakdown&quot; aria-label=&quot;Anchor link for: frame-breakdown&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;In its initial release, Solari supports raytraced diffuse direct (DI) and indirect lighting (GI). Light can come from either &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bevy&#x2F;0.16.1&#x2F;bevy&#x2F;prelude&#x2F;struct.StandardMaterial.html#structfield.emissive&quot;&gt;emissive&lt;&#x2F;a&gt; triangle meshes, or analytic &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bevy&#x2F;0.16.1&#x2F;bevy&#x2F;pbr&#x2F;struct.DirectionalLight.html&quot;&gt;directional lights&lt;&#x2F;a&gt;. Everything is fully realtime and dynamic, with no baking required.&lt;&#x2F;p&gt;
&lt;p&gt;Direct lighting is handled via ReSTIR DI, while indirect lighting is handled by a combination of ReSTIR GI and a world-space irradiance cache. Denoising is handled by DLSS Ray Reconstruction.&lt;&#x2F;p&gt;
&lt;p&gt;As opposed to coarse screen-space probes, per-pixel ReSTIR brings much better detail, along with being &lt;em&gt;considerably&lt;&#x2F;em&gt; easier to get started with. I had my first prototype working in a weekend.&lt;&#x2F;p&gt;
&lt;p&gt;While I won&#x27;t be covering ReSTIR from first principles (that could be its own entire blog post), &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;intro-to-restir.cwyman.org&quot;&gt;A Gentle Introduction to ReSTIR:
Path Reuse in Real-time&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;interplayoflight.wordpress.com&#x2F;2023&#x2F;12&#x2F;17&#x2F;a-gentler-introduction-to-restir&quot;&gt;A gentler introduction to ReSTIR&lt;&#x2F;a&gt; are both really great resources. If you haven&#x27;t played with ReSTIR before, I suggest giving them a skim before continuing with this post. Or continue anyways, and just admire the pretty pixels :)&lt;&#x2F;p&gt;
&lt;p&gt;Onto the frame breakdown!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gbuffer-raster&quot;&gt;GBuffer Raster&lt;a class=&quot;zola-anchor&quot; href=&quot;#gbuffer-raster&quot; aria-label=&quot;Anchor link for: gbuffer-raster&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The first step of Solari is also the most boring: rasterize a standard GBuffer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;gbuffer_base_color.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Base color&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;gbuffer_normals.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Normals&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;gbuffer_position.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Position reconstructed from depth buffer&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-raster&quot;&gt;Why Raster?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-raster&quot; aria-label=&quot;Anchor link for: why-raster&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The GBuffer pass remains completely unchanged from standard Bevy (it&#x27;s the same plugin). This might seem like a missed opportunity - after all, I could have used raytracing for primary visibility instead of rasterization - but I decided to stick with rasterization here.&lt;&#x2F;p&gt;
&lt;p&gt;By using raster for primary visibility, I maintain the option for people to use low-resolution proxy meshes in the raytracing scene, while still getting high quality meshes and textures in the primary view. The raster meshes can be full resolution with all their geometric detail, while the raytracing acceleration structure contains simplified versions that are cheaper to trace against.&lt;&#x2F;p&gt;
&lt;p&gt;Rasterization also works better with other Bevy features like &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;tags&#x2F;virtual-geometry&quot;&gt;Virtual Geometry&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;attachments&quot;&gt;Attachments&lt;a class=&quot;zola-anchor&quot; href=&quot;#attachments&quot; aria-label=&quot;Anchor link for: attachments&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Bevy&#x27;s GBuffer uses quite a bit of packing. The main attachment is a &lt;code&gt;Rgba32Uint&lt;&#x2F;code&gt; texture with each channel storing multiple values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;First channel&lt;&#x2F;strong&gt;: sRGB base color and perceptual roughness packed as 4x8unorm&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Second channel&lt;&#x2F;strong&gt;: Emissive color stored as pre-exposed Rgb9e5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Third channel&lt;&#x2F;strong&gt;: Reflectance, metallic, baked diffuse occlusion (unused by Solari), and an unused slot, again packed as 4x8unorm&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Fourth channel&lt;&#x2F;strong&gt;: World-space normal encoded into 24 bits via &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.jcgt.org&#x2F;published&#x2F;0003&#x2F;02&#x2F;01&quot;&gt;octahedral encoding&lt;&#x2F;a&gt;, plus 8 bits of flags meant for Bevy&#x27;s default deferred shading (unused by Solari)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s also a second &lt;code&gt;Rg16Float&lt;&#x2F;code&gt; attachment for motion vectors, and of course the depth attachment.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;drawing&quot;&gt;Drawing&lt;a class=&quot;zola-anchor&quot; href=&quot;#drawing&quot; aria-label=&quot;Anchor link for: drawing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The GBuffer rendering itself uses &lt;code&gt;multi_draw_indirect&lt;&#x2F;code&gt; to draw several meshes at once, using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;offset-allocator&quot;&gt;sub-allocated&lt;&#x2F;a&gt; buffers. Culling is done on the GPU using &lt;a href=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;#culling-first-pass&quot;&gt;two-pass occlusion culling&lt;&#x2F;a&gt; against a hierarchal depth buffer. Textures are handled bindlessly, and we try to minimize overall pipeline permutations.&lt;&#x2F;p&gt;
&lt;p&gt;These combined techniques keep draw call overhead and per-pixel overdraw fairly low, even for complex scenes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;restir-di&quot;&gt;ReSTIR DI&lt;a class=&quot;zola-anchor&quot; href=&quot;#restir-di&quot; aria-label=&quot;Anchor link for: restir-di&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;In order to calculate direct lighting (light emitted by a light source, bouncing off a surface, and then hitting the camera), for each pixel, we need to loop over every light and point on those lights, and then calculate the light&#x27;s contribution, as well as whether or not the light is visible.&lt;&#x2F;p&gt;
&lt;p&gt;This is very expensive, so realtime applications tend to approximate it by averaging many individual light samples. If you choose those samples well, you can get an approximate result that&#x27;s very close to the real thing, without tons of expensive calculations.&lt;&#x2F;p&gt;
&lt;p&gt;To quickly estimate direct lighting, Solari uses a pretty standard ReSTIR DI setup.&lt;&#x2F;p&gt;
&lt;p&gt;ReSTIR DI randomly selects points on lights, and then shares the random samples between pixels based in order to choose the best light (most contribution to the image) for a given pixel.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;di-structure&quot;&gt;DI Structure&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-structure&quot; aria-label=&quot;Anchor link for: di-structure&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Reservoirs store the light sample, confidence weight, and unbiased contribution weight (acting as the sample&#x27;s PDF).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Reservoir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;: LightSample,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;confidence_weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unbiased_contribution_weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Direct lighting is handled in two compute dispatches. The first pass does initial and temporal resampling, while the second pass does spatial resampling and shading.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;di-initial-resampling&quot;&gt;DI Initial Resampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-initial-resampling&quot; aria-label=&quot;Anchor link for: di-initial-resampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Initial sampling uses 32 samples from a light tile (more on this later), and chooses the brightest one via resampling importance sampling (RIS), using constant MIS weights.&lt;&#x2F;p&gt;
&lt;p&gt;32 samples per pixel is often overkill for scenes with a small number of lights. As this is one of the most expensive parts of Solari, I&#x27;m planning on letting users control this number in a future release.&lt;&#x2F;p&gt;
&lt;p&gt;After choosing the best sample, we trace a ray to test visibility, setting the unbiased contribution weight to 0 in the case of occlusion.&lt;&#x2F;p&gt;

&lt;blockquote class=&quot;callout note no-title&quot;&gt;
  
  
  &lt;div class=&quot;icon&quot;&gt;
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;18&quot; height=&quot;18&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;

  &lt;&#x2F;div&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;p&gt;All raytracing in Solari is handled via inline ray queries. Wgpu does not yet support raytracing pipelines, so I haven&#x27;t gotten a chance to see play around with them.&lt;&#x2F;p&gt;

  &lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_di_one_sample.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;One candidate sample DI&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_di_32_samples.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;32 candidate sample DI, one sample chosen via RIS&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;h4 id=&quot;di-temporal-resampling&quot;&gt;DI Temporal Resampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-temporal-resampling&quot; aria-label=&quot;Anchor link for: di-temporal-resampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;A temporal reservoir is then obtained via motion vectors and last frame&#x27;s pixel data. We validate the reprojection using the &lt;code&gt;pixel_dissimilar&lt;&#x2F;code&gt; heuristic. We also need to check that the temporal light sample still exists in the current frame (i.e. the light has not been despawned).&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the chosen light from last frame might no longer be visible this frame, e.g. if an object moved behind a wall. We could trace an additional ray here to validate visibility, but it&#x27;s cheaper to just assume that the temporal light sample is still visible from the current pixel this frame.&lt;&#x2F;p&gt;
&lt;p&gt;Reusing temporal visibility saves one raytrace, at the cost of shadows for moving objects being delayed by 1 frame, and some slighty darker&#x2F;wider shadows. Overall the artifacts are not very noticable, so I find that it&#x27;s well worth reusing visibility for the temporal reservoir resampling.&lt;&#x2F;p&gt;
&lt;p&gt;The initial and temporal reservoir are then merged together using constant MIS weights. I tried using the balance heuristic, but didn&#x27;t notice much difference for DI, and constant MIS weights are much cheaper.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Reject if tangent plane difference difference more than 0.3% or angle between normals more than 25 degrees
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pixel_dissimilar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;depth&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;other_world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;other_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;video&#x2F;gputechconf&#x2F;gtc&#x2F;2020&#x2F;presentations&#x2F;s22699-fast-denoising-with-self-stabilizing-recurrent-blurs.pdf#page=45
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tangent_plane_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;normal, other_world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; view_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;depth_ndc_to_view_z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; tangent_plane_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; view_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.003 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;normal, other_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.906&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;di-spatial-resampling&quot;&gt;DI Spatial Resampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-spatial-resampling&quot; aria-label=&quot;Anchor link for: di-spatial-resampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The second pass handles spatial resampling. We choose one random pixel within a 30 pixel-radius disk, and borrow its reservoir. We use the same &lt;code&gt;pixel_dissimilar&lt;&#x2F;code&gt; heuristic as the temporal pass to validate the spatial reservoir.&lt;&#x2F;p&gt;
&lt;p&gt;We must also trace a ray to test visibility, as the reservoir comes from a neighboring pixel, and we cannot assume that the same light sample visible at the neighbor pixel is also visible for the current pixel.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike a lot of other ReSTIR implementations, we only ever use 1 spatial sample. Using more than 1 sample does not tend to improve quality, and increases performance costs. We cannot, however, skip spatial resampling entirely. Having a source of new samples from other pixels is crucial to prevent artifacts from temporal resampling.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;spatial_baseline.jpg&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;1 random spatial sample, 6.4 ms&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;Spatial sampling is probably the least well-researched part of ReSTIR. I tried a couple of other schemes, including trying to reuse reservoirs across a workgroup&#x2F;subgroup similar to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;iribis.github.io&#x2F;publication&#x2F;2025_Stratified_Histogram_Resampling&quot;&gt;Histogram Stratification for Spatio-Temporal Reservoir Sampling&lt;&#x2F;a&gt;, but none of them worked out well.&lt;&#x2F;p&gt;
&lt;p&gt;Subgroups-level resampling was very cheap, but had tiling artifacts, and was not easily portable to different machines with different amounts of threads per workgroup.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;spatial_subgroup.jpg&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Subgroup-level spatial resampling, 7.3 ms&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;Workgroup-level resampling had much better quality, but was twice as expensive compared to 1 spatial sample, and introduced correlations that broke the denoiser.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;spatial_workgroup.jpg&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Workgroup-level spatial resampling, 12 ms&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;In the end, I stuck with the 1 random spatial sample I described above.&lt;&#x2F;p&gt;
&lt;p&gt;The reservoir produced by the first pass and the spatial reservoir are combined with the same routine that we used for merging initial and temporal reservoirs.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;di-shading&quot;&gt;DI Shading&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-shading&quot; aria-label=&quot;Anchor link for: di-shading&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Once the final reservoir is produced, we can use its chosen light sample to shade the pixel, producing the final direct lighting.&lt;&#x2F;p&gt;
&lt;p&gt;I did try out shading the pixel using all 3 samples (initial, temporal, and spatial), weighed by their resampling probabilities as &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;cwyman.org&#x2F;papers&#x2F;hpg21_rearchitectingReSTIR.pdf&quot;&gt;Rearchitecting Spatiotemporal Resampling for Production&lt;&#x2F;a&gt; suggests, but had noisier results compared to shading using the final reservoir only. I&#x27;m not sure if I messed up the implementation or what.&lt;&#x2F;p&gt;
&lt;p&gt;Overall the DI pass uses two raytraces per pixel (1 initial, 1 spatial).&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_di.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;DI with 32 initial candidates, 1 temporal resample, and 1 spatial resample&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;restir-gi&quot;&gt;ReSTIR GI&lt;a class=&quot;zola-anchor&quot; href=&quot;#restir-gi&quot; aria-label=&quot;Anchor link for: restir-gi&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Indirect lighting (light emitted by a light source, bouncing off more than 1 surface, and then hitting the camera) is even more expensive to calculate than direct lighting, as you need to trace multiple bounces of each ray to calculate the lighting for a given path.&lt;&#x2F;p&gt;
&lt;p&gt;To quickly estimate indirect lighting, Solari uses ReSTIR GI, with a very similar setup to the previous ReSTIR DI.&lt;&#x2F;p&gt;
&lt;p&gt;Where as ReStir DI picks the best light, ReSTIR GI randomly selects directions in a hemisphere, and then shares the random samples between pixels in order to choose the best 1-bounce &lt;em&gt;path&lt;&#x2F;em&gt; for a given pixel.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gi-structure&quot;&gt;GI Structure&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-structure&quot; aria-label=&quot;Anchor link for: gi-structure&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Reservoirs store the cached radiance bouncing off of the sample point, sample point geometry info, confidence weight, and unbiased contribution weight.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Reservoir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;radiance&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sample_point_world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sample_point_world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;confidence_weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unbiased_contribution_weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I tried some basic packing schemes for the GI reservoir (Rgb9e5 radiance, octahedral-encoded normals), but didn&#x27;t find that it meaningfully reduced GI costs. Reservoir memory bandwidth is not a big bottleneck compared to raytracing and reading mesh&#x2F;texture data for ray intersections.&lt;&#x2F;p&gt;
&lt;p&gt;I have heard that people had good results storing reservoirs as struct-of-arrays instead of array-of-structs, so I&#x27;ll likely revist this topic at some point.&lt;&#x2F;p&gt;
&lt;p&gt;ReSTIR GI again uses two compute dispatches, with the first pass doing initial and temporal resampling, and the second pass doing spatial resampling and shading.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gi-initial-sampling&quot;&gt;GI Initial Sampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-initial-sampling&quot; aria-label=&quot;Anchor link for: gi-initial-sampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;GI samples are much more expensive to generate than DI samples (tracing paths is more expensive than looping over a list of light sources), so for initial sampling, we only generate 1 sample.&lt;&#x2F;p&gt;
&lt;p&gt;We start by tracing a ray along a random direction chosen from a uniform hemisphere distribution. At some point I also want to try using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;electronicarts&#x2F;fastnoise&quot;&gt;spatiotemporal blue noise&lt;&#x2F;a&gt;. Although DLSS-RR recommends white noise, the docs do say that blue noise with a sufficiently long period can also work.&lt;&#x2F;p&gt;
&lt;p&gt;At the ray&#x27;s hit point, we need to obtain an estimate of the incoming irradiance, which becomes the outgoing radiance towards the current pixel, i.e. the path&#x27;s contribution.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_gi_one_sample.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;One sample GI&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;To obtain irradiance, we query the world cache at the hit point (more on this later).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;generate_initial_reservoir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;rng&lt;&#x2F;span&gt;&lt;span&gt;: ptr&amp;lt;function, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; Reservoir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    var reservoir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;empty_reservoir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray_direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sample_uniform_hemisphere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_normal, rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray_hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;trace_ray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position, ray_direction, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_T_MIN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_T_MAX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_FLAG_NONE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ray_hit.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_QUERY_INTERSECTION_NONE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reservoir;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sample_point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;resolve_ray_hit_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ray_hit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Direct lighting is handled by ReSTIR DI
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample_point.material.emissive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reservoir;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.unbiased_contribution_weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uniform_hemisphere_inverse_pdf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.sample_point_world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sample_point.world_position;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.sample_point_world_normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sample_point.world_normal;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.confidence_weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;query_world_cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample_point.world_position, sample_point.geometric_world_normal, view.world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sample_point_diffuse_brdf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sample_point.material.base_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir.radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; sample_point_diffuse_brdf;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; reservoir;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;gi-temporal-and-spatial-resampling&quot;&gt;GI Temporal and Spatial Resampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-temporal-and-spatial-resampling&quot; aria-label=&quot;Anchor link for: gi-temporal-and-spatial-resampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Temporal reservoir selection for GI is a little different from DI.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to reprojecting based on motion vectors, we jitter the reprojected location by a few pixels in either direction using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;GPU-Zen-Advanced-Rendering-Techniques&#x2F;dp&#x2F;B0DNXNM14K&quot;&gt;permutation sampling&lt;&#x2F;a&gt;. This essentially adds a small spatial component to the temporal resampling, which helps break up temporal correlations.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;no_permutation_sampling.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;No permutation sampling: The denoiser (DLSS-RR) produces blotchy noise&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;I also tried permutation sampling for ReSTIR DI, and while it did reduce correlation artifacts, it also added even worse artifacts because we reuse visibility, which becomes very obvious under permutation sampling. Tracing an extra ray to validate visibility would fix this, but I&#x27;m not quite ready to pay that performance cost.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;di_permutation_sampling.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;DI: Permutation sampling and visibility reuse do not work well together&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;Spatial reservoir selection for GI is identical to DI.&lt;&#x2F;p&gt;
&lt;p&gt;Reservoir merging for GI uses the balance heuristic for MIS weights, and includes the BRDF contribution, as I found that unlike for DI, these make a significant quality difference. The balance heuristic is not much more expensive here, as we are only ever merging two reservoirs at a time.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gi-jacobian&quot;&gt;GI Jacobian&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-jacobian&quot; aria-label=&quot;Anchor link for: gi-jacobian&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Additionally, since both temporal and spatial resampling use neighboring pixels, we need to add a Jacobian determinant to the MIS weights to account for the change in sampling domain.&lt;&#x2F;p&gt;
&lt;p&gt;The Jacobian proved to be the absolute hardest part of ReSTIR GI for me. While it makes the GI more correct, it also adds a lot of noise in corners. Worse, the Jacobian tends to make the GI calculations &quot;explode&quot; into super high numbers that result in overflow to &lt;code&gt;inf&lt;&#x2F;code&gt;, which then spreads over the entire screen due to resampling and denoising.&lt;&#x2F;p&gt;
&lt;p&gt;The best solution I have found to reduce artifacts from the Jacobian is to reject neighbor samples when the Jacobian is greater than 2 (i.e., a neighboring sample reused at the current pixel would have more than 2x the contribution it originally did). While this somewhat works, there are still issues with stability. If I leave Solari running for a couple of minutes in the same spot, it will eventually lead to overflow. I haven&#x27;t yet figured out how to prevent this.&lt;&#x2F;p&gt;
&lt;p&gt;Using the balance heuristic (and factoring in the two Jacobians) for MIS weights when resampling also helped a lot with fighting the noise introduced by the Jacobian.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gi-shading&quot;&gt;GI Shading&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-shading&quot; aria-label=&quot;Anchor link for: gi-shading&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Once the final reservoir is produced, we can use it to shade the pixel, producing the final indirect lighting.&lt;&#x2F;p&gt;
&lt;p&gt;Since we&#x27;re using DLSS-RR for denoising, we can simply add the GI on top of the existing framebuffer (holding the DI). There&#x27;s no need to write to a separate buffer for use with a separate denoising process, unlike a lot of other GI implementations.&lt;&#x2F;p&gt;
&lt;p&gt;Overall the GI pass uses two raytraces per pixel (1 initial, 1 spatial), same as DI.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_gi.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;GI with 1 initial candidate, 1 temporal resample, and 1 spatial resample&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;interlude-what-is-restir-doing&quot;&gt;Interlude: What is ReSTIR Doing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#interlude-what-is-restir-doing&quot; aria-label=&quot;Anchor link for: interlude-what-is-restir-doing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;I have heard ReSTIR described as a signal &lt;em&gt;amplifier&lt;&#x2F;em&gt;. If you feed it decent samples, it&#x27;s likely to produce a good sample. If you feed it good samples, it&#x27;s likely to produce a great sample.&lt;&#x2F;p&gt;
&lt;p&gt;The better your initial sampling, the better ReSTIR does. The quality of your final result heavily depends on the quality of the initial samples you feed into it.&lt;&#x2F;p&gt;
&lt;p&gt;For this reason, it&#x27;s important that you spend time improving the initial sampling process. This could take the form of generating more initial samples, or improving your sampling strategy.&lt;&#x2F;p&gt;
&lt;p&gt;For ReSTIR DI, taking more initial samples is viable, as samples are just random lights, and are fairly cheap to generate.&lt;&#x2F;p&gt;
&lt;p&gt;For ReSTIR GI, even 1 initial sample is already expensive, as each sample involves tracing a ray. Instead of increasing initial sample count, we&#x27;ll have to be smart about &lt;em&gt;how&lt;&#x2F;em&gt; we obtain that 1 sample.&lt;&#x2F;p&gt;
&lt;p&gt;In the next two sections of the frame breakdown, we will discuss how I improved initial sampling for ReSTIR DI and GI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;light-tile-presampling&quot;&gt;Light Tile Presampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#light-tile-presampling&quot; aria-label=&quot;Anchor link for: light-tile-presampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;While generating initial samples for ReSTIR DI is fairly cheap, when we start taking 32 or more samples per pixel, the memory bandwidth costs quickly add up. In order to make 32 samples per pixel viable, we&#x27;ll need a way to improve our cache coherency.&lt;&#x2F;p&gt;
&lt;p&gt;In this section, we will generate some light tile buffers, following section 5 of &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;cwyman.org&#x2F;papers&#x2F;hpg21_rearchitectingReSTIR.pdf&quot;&gt;Rearchitecting Spatiotemporal Resampling for Production&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;light-sampling-apis&quot;&gt;Light Sampling APIs&lt;a class=&quot;zola-anchor&quot; href=&quot;#light-sampling-apis&quot; aria-label=&quot;Anchor link for: light-sampling-apis&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Before I can explain light tiles, we first need to talk about Solari&#x27;s shader API for working with light sources.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy stores light sources as a big list of objects on the GPU. All emissive meshes and directional lights get collected by the CPU, and put in this list.&lt;&#x2F;p&gt;
&lt;p&gt;When calculating radiance emitted by a light source, Bevy works with specific light &lt;em&gt;samples&lt;&#x2F;em&gt; - not the whole light at once. A &lt;code&gt;LightSample&lt;&#x2F;code&gt; uniquely identifies a specific subset of the light source, e.g. a specific point on an emissive mesh.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LightSample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;light_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;triangle_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Unused for directional lights
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;generate_random_light_sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;rng&lt;&#x2F;span&gt;&lt;span&gt;: ptr&amp;lt;function, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; LightSample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; light_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; arrayLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;light_sources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; light_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;rand_range_u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;light_count, rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; light_source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; light_sources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;light_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    var triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; light_source.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;LIGHT_SOURCE_KIND_DIRECTIONAL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; light_source.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;        triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;rand_range_u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;triangle_count, rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; seed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;rand_u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; LightSample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;light_id, triangle_id, seed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The light ID points to the overall light source object in the big list of lights.&lt;&#x2F;p&gt;
&lt;p&gt;The seed is used to initialize a random number generator (RNG). For directional lights, the RNG is used to choose a direction within a cone. For emissive meshes, the RNG is used to choose a specific point on the triangle identified by the triangle ID.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;LightSample&lt;&#x2F;code&gt; can be resolved, giving some info on its properties:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ResolvedLightSample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; w component is 0.0 for directional lights, and 1.0 for emissive meshes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;emitted_radiance&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;inverse_pdf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_light_sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;light_sample&lt;&#x2F;span&gt;&lt;span&gt;: LightSample, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;light_source&lt;&#x2F;span&gt;&lt;span&gt;: LightSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; ResolvedLightSample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; light_source.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;LIGHT_SOURCE_KIND_DIRECTIONAL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; directional_light &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; directional_lights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;light_source.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; direction_to_light &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sample_cone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;directional_light&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ResolvedLightSample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;direction_to_light, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;direction_to_light,
&lt;&#x2F;span&gt;&lt;span&gt;            directional_light.luminance,
&lt;&#x2F;span&gt;&lt;span&gt;            directional_light.inverse_pdf,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; light_source.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; light_sample.light_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; 0xFFFFu;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; barycentrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;triangle_barycentrics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;light_sample.seed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Interpolates and transforms vertex positions, UVs, etc, and samples material textures
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;resolve_triangle_data_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;light_source.id, triangle_id, barycentrics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ResolvedLightSample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;triangle_data.world_position, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            triangle_data.world_normal,
&lt;&#x2F;span&gt;&lt;span&gt;            triangle_data.material.emissive.rgb,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;triangle_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; triangle_data.triangle_area,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally a &lt;code&gt;ResolvedLightSample&lt;&#x2F;code&gt; can be used to calculate the received radiance at a point from the light sample, also known as the unshadowed light contribution:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LightContribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;received_radiance&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;inverse_pdf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;wi&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;calculate_resolved_light_contribution&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolved_light_sample&lt;&#x2F;span&gt;&lt;span&gt;: ResolvedLightSample, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ray_origin&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;origin_world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; LightContribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; resolved_light_sample.world_position.xyz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- (&lt;&#x2F;span&gt;&lt;span&gt;resolved_light_sample.world_position.w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ray_origin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; light_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; wi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; light_distance;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cos_theta_origin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;saturate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;wi, origin_world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cos_theta_light &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;saturate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span&gt;wi, resolved_light_sample.world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; light_distance_squared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; light_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; light_distance;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; received_radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; resolved_light_sample.emitted_radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; cos_theta_origin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* (&lt;&#x2F;span&gt;&lt;span&gt;cos_theta_light &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; light_distance_squared&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; LightContribution&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;received_radiance, resolved_light_sample.inverse_pdf, wi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notably, only the first and second steps (generating a &lt;code&gt;LightSample&lt;&#x2F;code&gt;, resolving it into a &lt;code&gt;ResolvedLightSample&lt;&#x2F;code&gt;) involve branching based on the type of light (directional or emissive). Calculating the light contribution involves no branching.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;presampling-lights&quot;&gt;Presampling Lights&lt;a class=&quot;zola-anchor&quot; href=&quot;#presampling-lights&quot; aria-label=&quot;Anchor link for: presampling-lights&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The straightforward way to implement ReSTIR DI initial sampling is to perform the whole light sampling process (generate -&amp;gt; resolve -&amp;gt; calculate contribution) all in one shader.&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, for my first ReSTIR DI prototype, this is what I did - but performance was terrible.&lt;&#x2F;p&gt;
&lt;p&gt;By generating the light sample, resolving it, and then calculating its contribution all in the same shader, we&#x27;re introducing a lot of divergent branches and incoherent memory accesses. If there&#x27;s one thing GPUs hate, it&#x27;s divergence. GPUs perform better when all threads in a group are executing the same branch and don&#x27;t need masking, and when the threads are all accessing similar memory locations that are likely in a nearby cache.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we can separate out the steps. Generating a bunch of random light samples and resolving them can be performed ahead of time, by a separate shader. We can then pack the resolved samples and store them in a buffer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pack_resolved_light_sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;: ResolvedLightSample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; ResolvedLightSamplePacked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ResolvedLightSamplePacked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        sample.world_position.x,
&lt;&#x2F;span&gt;&lt;span&gt;        sample.world_position.y,
&lt;&#x2F;span&gt;&lt;span&gt;        sample.world_position.z,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pack2x16unorm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;octahedral_encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample.world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3_to_rgb9e5_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample.radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; view.exposure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        sample.inverse_pdf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, sample.world_position.w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;unpack_resolved_light_sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;packed&lt;&#x2F;span&gt;&lt;span&gt;: ResolvedLightSamplePacked, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;exposure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; ResolvedLightSample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ResolvedLightSample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed.world_position_x, packed.world_position_y, packed.world_position_z, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, packed.inverse_pdf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;octahedral_decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unpack2x16unorm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed.world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;rgb9e5_to_vec3_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed.radiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; exposure,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed.inverse_pdf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We call these presampled sets of lights &quot;light tiles&quot;. Following the paper, we perform a compute dispatch to generate a fixed 128 tiles (these are not screen-space tiles), each with 1024 samples (&lt;code&gt;ResolvedLightSamplePacked&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Samples are generated completely randomly, without any info about the scene - there is no spatial heuristic or any way of identifying &quot;good&quot; samples.&lt;&#x2F;p&gt;
&lt;p&gt;ReSTIR DI initial sampling can now pick a random tile, and then random samples within the tile, and use &lt;code&gt;calculate_resolved_light_contribution()&lt;&#x2F;code&gt; to calculate their radiance.&lt;&#x2F;p&gt;
&lt;p&gt;With light tiles, we have much higher cache hit rates when sampling lights, which greatly improves our performance. In fact, even more than the actual raytracing - light sampling is by far the biggest performance bottleneck in Solari.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;world-cache&quot;&gt;World Cache&lt;a class=&quot;zola-anchor&quot; href=&quot;#world-cache&quot; aria-label=&quot;Anchor link for: world-cache&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;With light tiles accelerating initial sampling for ReSTIR DI, it&#x27;s time to talk about how we accelerate initial sampling for ReSTIR GI.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike DI, where generating more samples is relatively cheap, for GI we can only afford 1 sample. However, unlike DI, GI is a lot more forgiving of inaccuracies. GI just has to be &quot;mostly correct&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;We can take advantage of that fact by sharing the same work amongst multiple pixels, via the use of a world-space irradiance cache.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-20-solari-bevy-0-17&#x2F;world_cache_close.png&quot; alt=&quot;world_cache_close&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The world cache voxelizes the world, storing accumulated irradiance (light hitting the surface) at each voxel.&lt;&#x2F;p&gt;
&lt;p&gt;When sampling indirect lighting in ReSTIR GI, rather than having to trace additional rays towards light sources to estimate the irradiance, we can simply lookup the irradiance at the given voxel.&lt;&#x2F;p&gt;
&lt;p&gt;The world cache both amortizes the cost of the GI pass, and reduces variance, especially for newly-disoccluded pixels for which the screen-space ReSTIR GI has no temporal history.&lt;&#x2F;p&gt;
&lt;p&gt;Adding the world cache both significantly improved quality, and halved the time spent on the initial GI sampling.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cache-querying&quot;&gt;Cache Querying&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-querying&quot; aria-label=&quot;Anchor link for: cache-querying&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The world cache uses &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1902.05942v1&quot;&gt;spatial hashing&lt;&#x2F;a&gt; to discretize the world. Unlike other options such as &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EmbarkStudios&#x2F;kajiya&#x2F;blob&#x2F;main&#x2F;docs&#x2F;gi-overview.md#irradiance-cache-055ms&quot;&gt;clipmaps&lt;&#x2F;a&gt;, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2022&#x2F;SIGGRAPH2022-Advances-Lumen-Wright%20et%20al.pdf#page=59&quot;&gt;cards&lt;&#x2F;a&gt;, or &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gpuopen.com&#x2F;download&#x2F;GDC2024_GI_with_AMD_FidelityFX_Brixelizer.pdf&quot;&gt;bricks&lt;&#x2F;a&gt;, spatial hashing requires no explicit build step, and automatically adapts to scene geometry while having minimal light leaks.&lt;&#x2F;p&gt;
&lt;p&gt;With spatial hashing, a given descriptor (e.g. &lt;code&gt;{position, normal}&lt;&#x2F;code&gt;) hashes to a &lt;code&gt;u32&lt;&#x2F;code&gt; key. This key corresponds to an index within a fixed-size buffer, which holds whatever values you want to store in the hashmap - in our case, irradiance.&lt;&#x2F;p&gt;
&lt;p&gt;Either the entry that you&#x27;re querying corresponds to some existing entry (same checksum), and you can return the value, or the entry does not exist (empty checksum), and you can initialize the entry by writing the checksum to it.&lt;&#x2F;p&gt;
&lt;p&gt;The checksum is the same descriptor, hashed to a different key via a different hash function, and is used to detect hash collisions.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;query_world_cache()&lt;&#x2F;code&gt; function below is what ReSTIR GI uses to lookup irradiance at the hit point for raytraces.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;query_world_cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;view_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_cell_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position, view_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; world_position_quantized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;bitcast&amp;lt;vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;quantize_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position, cell_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; world_normal_quantized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;bitcast&amp;lt;vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;quantize_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    var key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position_quantized, world_normal_quantized&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; checksum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_checksum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position_quantized, world_normal_quantized&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;var i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_MAX_SEARCH_STEPS&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; existing_checksum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; atomicCompareExchangeWeak&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;world_cache_checksums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_EMPTY_CELL&lt;&#x2F;span&gt;&lt;span&gt;, checksum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.old_value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; existing_checksum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; checksum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Cache entry already exists - get irradiance and reset cell lifetime
&lt;&#x2F;span&gt;&lt;span&gt;            atomicStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;world_cache_life&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_CELL_LIFETIME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; world_cache_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.rgb;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; existing_checksum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_EMPTY_CELL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Cell is empty - reset cell lifetime so that it starts getting updated next frame
&lt;&#x2F;span&gt;&lt;span&gt;            atomicStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;world_cache_life&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_CELL_LIFETIME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            world_cache_geometry_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_position;
&lt;&#x2F;span&gt;&lt;span&gt;            world_cache_geometry_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.world_normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_normal;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Collision - jump to another entry
&lt;&#x2F;span&gt;&lt;span&gt;            key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;wrap_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In Solari, the descriptor is a combination of the &lt;code&gt;world_position&lt;&#x2F;code&gt; of the query point, the &lt;code&gt;geometric_world_normal&lt;&#x2F;code&gt; (shading normal is too detailed) of the query point, and a LOD factor that&#x27;s used to reduce cell count for far-away query points.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;quantize_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;quantization_factor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; quantization_factor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;quantize_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;compute_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    var key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_position.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_position.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pcg_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return wrap_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;compute_checksum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    var key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_position.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_position.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iqint_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; world_normal.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; key;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;world_cache_far.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;World cache from further away, showing LOD&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;h4 id=&quot;cache-decay&quot;&gt;Cache Decay&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-decay&quot; aria-label=&quot;Anchor link for: cache-decay&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;In order to maintain the world cache, we need a series of passes to decay and update active entries.&lt;&#x2F;p&gt;
&lt;p&gt;The first compute dispatch checks every entry in the hashmap, decaying their &quot;life&quot; count by 1. Each entry&#x27;s life is initialized when the entry is created, and is reset when queried.&lt;&#x2F;p&gt;
&lt;p&gt;When an entry reaches 0 life, we clear out the entry, freeing up a space for future voxels to use.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;decay_world_cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    var life &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_life&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;global_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; life &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 0u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Decay and write new life
&lt;&#x2F;span&gt;&lt;span&gt;        life &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;        world_cache_life&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;global_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; life;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Clear cells that become dead
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; life &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; 0u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            world_cache_checksums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;global_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_EMPTY_CELL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            world_cache_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;global_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;cache-compact&quot;&gt;Cache Compact&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-compact&quot; aria-label=&quot;Anchor link for: cache-compact&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The next three dispatches compact and count the total number of active entries in the world cache. This produces a dense array of indices of active entries, as well as indirect dispatch parameters for the next two passes.&lt;&#x2F;p&gt;
&lt;p&gt;The code is just a standard parallel prefix-sum, so I&#x27;m going to skip showing it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cache-update&quot;&gt;Cache Update&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-update&quot; aria-label=&quot;Anchor link for: cache-update&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we know the list of active entries in the world cache (and can perform indirect dispatches to process each active entry), it&#x27;s time to update the irradiance estimate for each voxel.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of the update process is taking new samples of the scene&#x27;s lighting.&lt;&#x2F;p&gt;
&lt;p&gt;Two rays are traced per voxel: a direct light sample, and an indirect light sample.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sample_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;active_cell_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; active_cell_id.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; world_cache_active_cells_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Get voxel data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_active_cell_indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;active_cell_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; geometry_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_geometry_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cell_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        var rng &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cell_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; constants.frame_index;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Sample direct lighting via RIS (1st ray)
&lt;&#x2F;span&gt;&lt;span&gt;        var new_irradiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sample_random_light_ris&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;geometry_data.world_position, geometry_data.world_normal, workgroup_id.xy, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Sample indirect lighting via BRDF sampling + world cache querying (2nd ray)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray_direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sample_cosine_hemisphere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;geometry_data.world_normal, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray_hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;trace_ray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;geometry_data.world_position, ray_direction, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_T_MIN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_T_MAX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_FLAG_NONE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ray_hit.kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RAY_QUERY_INTERSECTION_NONE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ray_hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;resolve_ray_hit_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ray_hit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            new_irradiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; ray_hit.material.base_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;query_world_cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ray_hit.world_position, ray_hit.geometric_world_normal, view.world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        world_cache_active_cells_new_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;active_cell_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; new_irradiance;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The direct light sample is chosen via RIS, and uses the same presampled light tiles that we&#x27;re going to use for ReSTIR DI. It&#x27;s basically the same process as ReSTIR DI initial candidate sampling.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve thought about using ReSTIR (well, ReTIR, without the spatial resampling part) for the world cache, but it&#x27;s not something I&#x27;ve tried yet.&lt;&#x2F;p&gt;
&lt;p&gt;The indirect light sample is a little more interesting.&lt;&#x2F;p&gt;
&lt;p&gt;In order to estimate indirect lighting, we trace a ray using a cosine-hemisphere distribution. At the ray hit point, we query the world cache.&lt;&#x2F;p&gt;
&lt;p&gt;You might be thinking &quot;Wait, aren&#x27;t we &lt;em&gt;updating&lt;&#x2F;em&gt; the cache? But we&#x27;re also sampling from the same cache in order to... update it?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;By having the cache sample from itself, we form a full path tracer, where tracing the path is spread out across multiple frames (for performance).&lt;&#x2F;p&gt;
&lt;p&gt;As an example: In frame 5, world cache cell A samples a light source. In frame 6, a different world cache cell B samples cell A. In frame 7, yet another world cache cell C samples cell B. We&#x27;ve now formed a multi-bounce path &lt;code&gt;light source-&amp;gt;A-&amp;gt;B-&amp;gt;C&lt;&#x2F;code&gt;, and once ReSTIR GI gets involved, &lt;code&gt;light source-&amp;gt;A-&amp;gt;B-&amp;gt;C-&amp;gt;primary surface-&amp;gt;camera&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By having the cache sample itself, we get full-length multi-bounce paths, instead of just single-bounce paths. In indoor scenes that make heavy use of indirect lighting, the difference is pretty dramatic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;cornell_box_no_multi_bounce.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Single-bounce lighting&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;cornell_box_multi_bounce.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Multi-bounce lighting&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cache-blend&quot;&gt;Cache Blend&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache-blend&quot; aria-label=&quot;Anchor link for: cache-blend&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;The second and final step of the world cache update process is to blend the new light samples with the existing irradiance samples, giving us an estimate of the overall irradiance via temporal accumulation. If you&#x27;ve ever seen code for temporal antialiasing, this should look pretty familiar.&lt;&#x2F;p&gt;
&lt;p&gt;The blending factor is based on the total sample count of voxel, capped at a max value. New voxels without any existing irradiance estimate use more of the new sample&#x27;s contribution, while existing voxels with existing irradiance estimates use less of the new sample.&lt;&#x2F;p&gt;
&lt;p&gt;Choosing the max sample count is a tradeoff between having the cache be stable and low-variance, and having the cache be responsive to changes in the scene&#x27;s lighting.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also important to note that this is a separate compute dispatch from the previous dispatch we used for sampling lighting. If the passes were combined, we would have data races from voxels writing new irradiance estimates at the same time other voxels were querying them.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;blend_new_samples&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;active_cell_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; active_cell_id.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; world_cache_active_cells_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_active_cell_indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;active_cell_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; old_irradiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cell_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_irradiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_cache_active_cells_new_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;active_cell_id.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sample_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;old_irradiance.a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WORLD_CACHE_MAX_TEMPORAL_SAMPLES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; blended_irradiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;old_irradiance.rgb, new_irradiance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; sample_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        world_cache_irradiance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cell_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;blended_irradiance, sample_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dlss-ray-reconstruction&quot;&gt;DLSS Ray Reconstruction&lt;a class=&quot;zola-anchor&quot; href=&quot;#dlss-ray-reconstruction&quot; aria-label=&quot;Anchor link for: dlss-ray-reconstruction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Once we have our noisy estimate of the scene, we run it through DLSS-RR to upscale, antialias, and denoise it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;noisy_full.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Noisy and aliased image&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;denoised_full.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Denoised and antialaised image&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;pathtraced.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Pathtraced reference&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;While ideally we would be able to configure DLSS-RR to read directly from our GBuffer, we unfortunately need a small pass to first copy from the GBuffer to some standalone textures. DLSS-RR will read these textures as inputs to help guide the denoising pass.&lt;&#x2F;p&gt;
&lt;p&gt;DLSS-RR is called via the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dlss_wgpu&quot;&gt;dlss_wgpu&lt;&#x2F;a&gt; wrapper I wrote, which is integrated into bevy_anti_alias as a Bevy plugin.&lt;&#x2F;p&gt;

&lt;blockquote class=&quot;callout note no-title&quot;&gt;
  
  
  &lt;div class=&quot;icon&quot;&gt;
    &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;18&quot; height=&quot;18&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;

  &lt;&#x2F;div&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;p&gt;The dlss_wgpu crate is standalone, and can also be used by non-Bevy projects that are using wgpu!&lt;&#x2F;p&gt;

  &lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;denoised_di.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Denoised and antialaised image - DI only&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;denoised_gi.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Denoised and antialaised image - GI only&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance&quot; aria-label=&quot;Anchor link for: performance&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;numbers&quot;&gt;Numbers&lt;a class=&quot;zola-anchor&quot; href=&quot;#numbers&quot; aria-label=&quot;Anchor link for: numbers&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Timings for all scenes were measured on an RTX 3080, rendered at 1600x900, and upscaled to 3200x1800 using DLSS-RR performance mode.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img 
        src=&quot;pica_pica_perf.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;PICA PICA&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;bistro_perf.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Bistro&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;

&lt;figure&gt;
    &lt;img 
        src=&quot;cornell_box_perf.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Cornell Box&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;!-- |                Pass               | PICA PICA Duration (ms) | Bistro Duration (ms) | Cornell Box Duration (ms) | Dependent On |
|:---------------------------------:|:-----------------------:|:--------------------:|:-------------------------:|:------------:|
| Presample Light Tiles             | 0.02761                 | 0.08403              | 0.02436                   | Negligible   |
| World Cache: Decay Cells          | 0.01508                 | 0.02007              | 0.01484                   | Negligible   |
| World Cache: Compaction P1        | 0.03823                 | 0.04357              | 0.03776                   | Negligible   |
| World Cache: Compaction P2        | 0.00862                 | 0.00903              | 0.00858                   | Negligible   |
| World Cache: Write Active Cells   | 0.01451                 | 0.01942              | 0.00138                   | Negligible   |
| World Cache: Sample Lighting      | 0.06009                 | 2.09000              | 0.05367                   | World size   |
| World Cache: Blend New Samples    | 0.01286                 | 0.06737              | 0.01272                   | Negligible   |
| ReSTIR DI: Initial + Temporal     | 1.25000                 | 1.85000              | 1.28000                   | Pixel count  |
| ReSTIR DI: Spatial + Shade        | 0.18628                 | 0.65952              | 0.18127                   | Pixel count  |
| ReSTIR GI: Initial + Temporal     | 0.36913                 | 2.75000              | 0.32722                   | Pixel count  |
| ReSTIR GI: Spatial + Shade        | 0.44301                 | 0.59905              | 0.45791                   | Pixel count  |
| DLSS-RR: Copy Inputs From GBuffer | 0.04185                 | 0.06789              | 0.03517                   | Pixel count  |
| DLSS-RR                           | 5.75000                 | 6.29000              | 5.82000                   | Pixel count  |
| Total                             | 8.21727                 | 14.54995             | 8.25488                   | N&#x2F;A          | --&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Pass&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;PICA PICA Duration (ms)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Bistro Duration (ms)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Cornell Box Duration (ms)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Dependent On&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Presample Light Tiles&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.08&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Decay Cells&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Compaction P1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Compaction P2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Write Active Cells&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.02&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Sample Lighting&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.06&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;2.09&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.05&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;World size&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;World Cache: Blend New Samples&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.07&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Negligible&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;ReSTIR DI: Initial + Temporal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1.25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1.85&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1.28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;ReSTIR DI: Spatial + Shade&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.66&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.18&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;ReSTIR GI: Initial + Temporal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;2.75&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;ReSTIR GI: Spatial + Shade&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.44&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.60&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;DLSS-RR: Copy Inputs From GBuffer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.07&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;DLSS-RR&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;5.75&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;6.29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;5.82&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Pixel count&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Total&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;8.22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;14.55&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;8.25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;N&#x2F;A&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;upscaling-benefits&quot;&gt;Upscaling Benefits&lt;a class=&quot;zola-anchor&quot; href=&quot;#upscaling-benefits&quot; aria-label=&quot;Anchor link for: upscaling-benefits&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;While DLSS-RR is quite expensive, it still ends up saving performance overall.&lt;&#x2F;p&gt;
&lt;p&gt;Without upscaling, we would have 4x as many pixels total, meaning ReSTIR DI and GI would be ~4x as expensive. After that, we would need a separate denoising process (usually two separate processes, one for direct and one for indirect), a separate shading pass to apply the denoised lighting, and then an antialiasing method.&lt;&#x2F;p&gt;
&lt;p&gt;Total performance costs would be higher than using the unified upscaling + denoising + antialiasing pipeline that DLSS-RR provides.&lt;&#x2F;p&gt;
&lt;p&gt;DLSS-RR also performs much better on the newer Ada and Blackwell GPUs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-20-solari-bevy-0-17&#x2F;dlss_rr_perf.png&quot; alt=&quot;dlss_rr_perf&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsight-trace&quot;&gt;NSight Trace&lt;a class=&quot;zola-anchor&quot; href=&quot;#nsight-trace&quot; aria-label=&quot;Anchor link for: nsight-trace&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Looking at a GPU trace, our main ReSTIR DI&#x2F;GI passes are primarily memory bound.&lt;&#x2F;p&gt;
&lt;p&gt;The ReSTIR DI initial and temporal pass is mainly limited by loads from global memory (blue bar), which source-code level profiling reveals to come from loading &lt;code&gt;ResolvedLightSamplePacked&lt;&#x2F;code&gt; samples from light tiles during initial sampling.&lt;&#x2F;p&gt;
&lt;p&gt;The ReSTIR DI spatial and shade pass, and both ReSTIR GI passes, are limited by raytracing throughput (yellow bar).&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;nsight_trace.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;NSight Graphics GPU Trace&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;There are typically three ways to improve memory-bound shaders:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Loading less data&lt;&#x2F;li&gt;
&lt;li&gt;Improving cache hit rate&lt;&#x2F;li&gt;
&lt;li&gt;Hiding the latency&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For ReSTIR DI initial sampling, this would correspond to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Taking less than 32 initial samples (viable, depending on the scene)&lt;&#x2F;li&gt;
&lt;li&gt;Can&#x27;t do this - we&#x27;re already hitting 95% L2 cache throughput&lt;&#x2F;li&gt;
&lt;li&gt;Would need to increase &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gpuopen.com&#x2F;learn&#x2F;occupancy-explained&quot;&gt;occupancy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Unfortunately, the only real optimization I think we could do is hiding the latency by improving the occupancy. More threads for the GPU to swap between when while waiting for memory loads to finish = finishing the overall workload faster.&lt;&#x2F;p&gt;
&lt;p&gt;NSight shows that we have a mediocre 32 out of a hardware maximum of 48 warps occupied, limited by the &quot;registers per thread limiter&quot;. I.e. our shader code uses too many registers per thread, and NSight does not have enough register space to allocate additional warps.&lt;&#x2F;p&gt;
&lt;p&gt;Source-code level profiling shows that the majority of live registers are consumed by the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;8b36cca28c4ea00425e1414fd88c8b82297e2b96&#x2F;crates&#x2F;bevy_solari&#x2F;src&#x2F;scene&#x2F;raytracing_scene_bindings.wgsl#L177-L215&quot;&gt;triangle resolve function&lt;&#x2F;a&gt;, which maps a point on a mesh to surface data like position, normal, material properties, etc. I&#x27;m not really sure how to reduce register usage here.&lt;&#x2F;p&gt;
&lt;p&gt;For the other 3 passes limited by raytracing throughput, we have the same issue. Not a ton we can do besides hiding the latency, which runs into the same issue with register count and occupancy.&lt;&#x2F;p&gt;
&lt;p&gt;For GI specifically though, there &lt;em&gt;is&lt;&#x2F;em&gt; a way I have thought of to do less work, again at the cost of worse quality depending on the scene.&lt;&#x2F;p&gt;
&lt;p&gt;For the world cache, rather than trace rays for every active cell, we could do it for a random subset of cells each frame (up to some maximum), to help limit the cost of updating many cache entries.&lt;&#x2F;p&gt;
&lt;p&gt;For the ReSTIR GI passes, we could perform them at quarter resolution (half the pixels along each axis). GI is not particuarly important to have exactly per-pixel data, so we can calculate it at a lower resolution, and then &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.nvidia.com&#x2F;en-us&#x2F;on-demand&#x2F;session&#x2F;gdc25-gdc1002&quot;&gt;upscale&lt;&#x2F;a&gt; (timestamp 17:22). This upscaling would be in addition to the the DLSS-RR upscaling.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-work&quot; aria-label=&quot;Anchor link for: future-work&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;As always, the first release of a new plugin is just the start. I still have a ton of ideas for future improvements to Solari!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feature-parity&quot;&gt;Feature Parity&lt;a class=&quot;zola-anchor&quot; href=&quot;#feature-parity&quot; aria-label=&quot;Anchor link for: feature-parity&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;In terms of feature parity with Bevy&#x27;s standard renderer, the most important missing feature is support for specular, transparent, and alpha-masked materials.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been actively prototyping specular material support, and with any luck will be writing about it in a future blog post on Solari changes in Bevy v0.18.&lt;&#x2F;p&gt;
&lt;p&gt;Custom material support is another big one, although it&#x27;s blocked on raytracing pipeline support in wgpu (which would also unlock shader execution reordering!).&lt;&#x2F;p&gt;
&lt;p&gt;Support for skinned meshes first needs some work done in Bevy to add GPU-driven skinning, but would be a great feature to add.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, Solari is eventually going to want to support more types of lights such as point lights, spot lights, and image-based lighting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;light-sampling&quot;&gt;Light Sampling&lt;a class=&quot;zola-anchor&quot; href=&quot;#light-sampling&quot; aria-label=&quot;Anchor link for: light-sampling&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Light sampling in Solari is currently purely random (not even uniformly random!), and there&#x27;s big opportunities to improve it.&lt;&#x2F;p&gt;
&lt;p&gt;Having a large number of lights in the scenes is &lt;em&gt;theoretically&lt;&#x2F;em&gt; viable with ReSTIR, but in practice Solari is not yet there. We need some sort of spatial&#x2F;visibility-aware sampling to improve the quality of our initial candidate samples.&lt;&#x2F;p&gt;
&lt;p&gt;One approach another Bevy developer is exploring is using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gpuopen.com&#x2F;download&#x2F;Hierarchical_Light_Sampling_with_Accurate_Spherical_Gaussian_Lighting.pdf&quot;&gt;spherical gaussian light trees&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another promising direction is copying from the recently released &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2025&#x2F;content&#x2F;MegaLights_Stochastic_Direct_Lighting_2025.pdf&quot;&gt;MegaLights&lt;&#x2F;a&gt; presentation, and adding visible light lists. I want to experiment with implementing light lists in world space, so that it can also be used to improve our GI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chromatic-restir&quot;&gt;Chromatic ReSTIR&lt;a class=&quot;zola-anchor&quot; href=&quot;#chromatic-restir&quot; aria-label=&quot;Anchor link for: chromatic-restir&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Another problem is that overlapping lights of similar brightness, but different chromas (R,G,B) tend to pose a problem for ReSTIR. ReSTIR can only select a single sample, but in this case, there are multiple overlapping lights.&lt;&#x2F;p&gt;
&lt;p&gt;One approach I&#x27;ve been prototyping to solve this is using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;suikasibyl.github.io&#x2F;files&#x2F;vvmc&#x2F;paper.pdf&quot;&gt;ratio control variates&lt;&#x2F;a&gt; (RCV). The basic idea (if I understand the paper correctly) is that you apply a vector-valued (R,G,B) weight to your lighting integral, based on the fraction of light a given sample contributes, divided by the overall light in the scene.&lt;&#x2F;p&gt;
&lt;p&gt;E.g. if you sample a pure red light, but the scene has a large amount of blue and green light, then you downweight the sample&#x27;s red contribution, and upweight its blue and green contributions.&lt;&#x2F;p&gt;
&lt;p&gt;The paper gives a scheme involving precomputing (offline) the total amount of light in the scene ahead of time, using light trees. We could easily add RCV support if we go ahead with adding light trees to Solari.&lt;&#x2F;p&gt;
&lt;p&gt;But another option I&#x27;ve been testing (without much luck yet) is to learn an &lt;em&gt;online&lt;&#x2F;em&gt; estimate of the total light in the scene. The idea is that each reservoir keeps track of the total amount of light it sees per channel as you do initial sampling and resampling between reservoirs. When it comes time to shade the final selected sample, you can use this estimate with RCV to weight the sample appropriately.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll see if I can get it working!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gi-quality&quot;&gt;GI Quality&lt;a class=&quot;zola-anchor&quot; href=&quot;#gi-quality&quot; aria-label=&quot;Anchor link for: gi-quality&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;While the world cache greatly improves GI quality and performance, it also brings its own set of downsides.&lt;&#x2F;p&gt;
&lt;p&gt;The main one is that when we create a cache entry, we set its world-space position and normal. Every frame when the cache entry samples lighting, it uses that position and normal for sampling. The position and normal are fixed, and can never be updated.&lt;&#x2F;p&gt;
&lt;p&gt;This means that if a bad position or normal that poorly represents the cache voxel is chosen when initializing the voxel, then it&#x27;s stuck with that. This leads to weird artifacts that I haven&#x27;t figured out how to solve, like some screenshots having orange lighting around the robot, and others not.&lt;&#x2F;p&gt;
&lt;p&gt;Another unsolved problem is overall loss of energy. Compare the below screenshots of the current Solari scheme to a different scheme where instead of terminating in the world cache, the GI system traces an additional ray towards a random light.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Baseline scheme using the world cache
&lt;&#x2F;span&gt;&lt;span&gt;reservoir.radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;query_world_cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample_point.world_position, sample_point.geometric_world_normal, view.world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;reservoir.unbiased_contribution_weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uniform_hemisphere_inverse_pdf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Alternate scheme sampling and tracing a ray towards 1 random light
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; direct_lighting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sample_random_light&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sample_point.world_position, sample_point.world_normal, rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;reservoir.radiance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; direct_lighting.radiance;
&lt;&#x2F;span&gt;&lt;span&gt;reservoir.unbiased_contribution_weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; direct_lighting.inverse_pdf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uniform_hemisphere_inverse_pdf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
    &lt;img 
        src=&quot;no_world_cache.png&quot; 
        
        
        
    &gt;
    
    &lt;figcaption&gt;Alternate GI scheme, without the world cache*&lt;&#x2F;figcaption&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;Despite the alternate scheme having higher variance and no multibounce pathtracing, it&#x27;s actually &lt;em&gt;brighter&lt;&#x2F;em&gt; than using the world cache. For some reason, the voxelized nature of the world cache leads to a loss of energy.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been thinking about trying out reprojecting the last frame to get multi bounce for rays that hit within the camera&#x27;s view, instead of always relying on the world cache. That might mitigate some of the energy loss.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the biggest problem with GI in general is both the overall lack of stability, and the slow reaction time to scene changes. The voxelized nature of the world cache, combined with how ReSTIR amplifies samples, means that bright outliers (e.g. world cache voxels much bighter than their neighbors) lead to temporal instability as shown below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-20-solari-bevy-0-17&#x2F;gi_outlier.png&quot; alt=&quot;gi_outlier&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While we could slow down the temporal accumulation speed to improve stability, that would slow down how fast Solari can react to changes in the scene&#x27;s lighting. Our goal is realtime, &lt;em&gt;fully&lt;&#x2F;em&gt; dynamic lighting. Not sorta realtime, but actual realtime.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately the lack of validation rays in the ReSTIR GI temporal pass, combined with the recursive nature of the world cache, means that Solari already takes a decent amount of time to react to changes. Animated and moving light sources in particular leave trails behind in the GI. Slowing down the temporal accumulation speed would make it even worse.&lt;&#x2F;p&gt;
&lt;p&gt;Going forwards with the project, I&#x27;m looking to mitigate all of these problems.&lt;&#x2F;p&gt;
&lt;p&gt;While it would be more expensive, one option I&#x27;ve considered is combining the alternate sampling scheme with some kind of world-space feedback mechanism like the MegaLights visible light list I described above. The GI pass could trace an additional ray towards a light instead of sampling the world cache. If the light is visible, we could add it to a list stored in a world-space voxel, to be fed back into the (GI or DI) light sampling for future frames.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;denoising-options&quot;&gt;Denoising Options&lt;a class=&quot;zola-anchor&quot; href=&quot;#denoising-options&quot; aria-label=&quot;Anchor link for: denoising-options&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;While Solari currently requires a NVIDIA GPU, the DLSS-RR integration is a separate plugin from Solari. Users can optionally choose to bring their own denoiser.&lt;&#x2F;p&gt;
&lt;p&gt;In the future, whenever they release them, I&#x27;m hoping to add support for &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20250822144949&#x2F;https:&#x2F;&#x2F;www.amd.com&#x2F;en&#x2F;products&#x2F;graphics&#x2F;technologies&#x2F;fidelityfx&#x2F;super-resolution.html#upcoming&quot;&gt;AMD&#x27;s FSR Ray Regeneration&lt;&#x2F;a&gt;, whatever XeSS extension &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;community.intel.com&#x2F;t5&#x2F;Blogs&#x2F;Tech-Innovation&#x2F;Client&#x2F;Neural-Image-Reconstruction-for-Real-Time-Path-Tracing&#x2F;post&#x2F;1688192&quot;&gt;Intel&lt;&#x2F;a&gt; eventually releases, and potentially even &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;metalfx&#x2F;mtl4fxtemporaldenoisedscaler&quot;&gt;Apple&#x27;s MTL4FXTemporalDenoisedScaler&lt;&#x2F;a&gt;. Even &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;newsroom.arm.com&#x2F;news&#x2F;arm-announces-arm-neural-technology&quot;&gt;ARM&lt;&#x2F;a&gt; is working on a neural-network based denoiser!&lt;&#x2F;p&gt;
&lt;p&gt;Writing a denoiser from scratch is a lot of work, but it would also be nice to add &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;video&#x2F;gputechconf&#x2F;gtc&#x2F;2020&#x2F;presentations&#x2F;s22699-fast-denoising-with-self-stabilizing-recurrent-blurs.pdf&quot;&gt;ReBLUR&lt;&#x2F;a&gt; as a fallback for users of other GPUs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thank-you&quot;&gt;Thank You&lt;a class=&quot;zola-anchor&quot; href=&quot;#thank-you&quot; aria-label=&quot;Anchor link for: thank-you&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;ve read this far, thank you, I hope you&#x27;ve enjoyed it! (to be fair, I can&#x27;t imagine you got this far if you didn&#x27;t enjoy reading it...)&lt;&#x2F;p&gt;
&lt;p&gt;Solari represents the culmination of a significant amount of research, development, testing, refining, and more than a few tears over the last three years of my spare time. Not just from me, but also from the shoulders of all the research and work it stands on. I couldn&#x27;t be more proud of what I&#x27;ve made.&lt;&#x2F;p&gt;
&lt;p&gt;Like the rest of Bevy, Solari is also free and open source, forever.&lt;&#x2F;p&gt;
&lt;p&gt;If you find Solari useful, consider &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;JMS55&quot;&gt;donating&lt;&#x2F;a&gt; to help fund future development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;intro-to-restir.cwyman.org&quot;&gt;A Gentle Introduction to ReSTIR: Path Reuse in Real-time&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;interplayoflight.wordpress.com&#x2F;2023&#x2F;12&#x2F;17&#x2F;a-gentler-introduction-to-restir&quot;&gt;A gentler introduction to ReSTIR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;research.nvidia.com&#x2F;labs&#x2F;rtr&#x2F;publication&#x2F;bitterli2020spatiotemporal&quot;&gt;Spatiotemporal Reservoir Resampling for Real-time Ray Tracing with Dynamic Direct Lighting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;research.nvidia.com&#x2F;publication&#x2F;2021-06_restir-gi-path-resampling-real-time-path-tracing&quot;&gt;ReSTIR GI: Path Resampling for Real-Time Path Tracing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;cwyman.org&#x2F;papers&#x2F;hpg21_rearchitectingReSTIR.pdf&quot;&gt;Rearchitecting Spatiotemporal Resampling for Production&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;blog.traverseresearch.nl&#x2F;dynamic-diffuse-global-illumination-b56dc0525a0a&quot;&gt;Dynamic diffuse global illumination&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EmbarkStudios&#x2F;kajiya&#x2F;blob&#x2F;main&#x2F;docs&#x2F;gi-overview.md&quot;&gt;Kajiya global illumination overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2025&#x2F;content&#x2F;SOUSA_SIGGRAPH_2025_Final.pdf&quot;&gt;Fast as Hell: idTech8 Global Illumination&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2022&#x2F;SIGGRAPH2022-Advances-Lumen-Wright%20et%20al.pdf&quot;&gt;Lumen: Real-time Global Illumination in Unreal Engine 5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2025&#x2F;content&#x2F;MegaLights_Stochastic_Direct_Lighting_2025.pdf&quot;&gt;MegaLights: Stochastic Direct Lighting in Unreal Engine 5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gpuopen.com&#x2F;download&#x2F;GPUOpen2022_GI1_0.pdf&quot;&gt;GI-1.0: A Fast Scalable Two-Level Radiance Caching Scheme for Real-Time Global Illumination&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bevy&#x27;s Fifth Birthday - Progress and Production Readiness</title>
		<published>2025-09-03T00:00:00+00:00</published>
		<updated>2025-09-03T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2025-09-03-bevy-fifth-birthday/" type="text/html"/>
		<id>https://jms55.github.io/posts/2025-09-03-bevy-fifth-birthday/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Written in response to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevy.org&#x2F;news&#x2F;bevys-fifth-birthday&quot;&gt;Bevy&#x27;s Fifth Birthday&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Welcome to the review of my third year of Bevy development!&lt;&#x2F;p&gt;
&lt;p&gt;After three years, I&#x27;m still enjoying Bevy as much as ever. Not only that, but development is the smoothest it&#x27;s ever been!&lt;&#x2F;p&gt;
&lt;p&gt;As is my usual writing style, this post is going to be a bit dry and disjointed, and maybe not the most hype-oriented. It&#x27;s not exactly what I aimed for when I started writing, but it seems to be how I end up writing things :). I &lt;em&gt;did&lt;&#x2F;em&gt; try using an LLM to help with writing, but it was way too fawning, so in the end I&#x27;ve written this by hand. Perfect is the enemy of good and all that.&lt;&#x2F;p&gt;
&lt;p&gt;While I &lt;em&gt;am&lt;&#x2F;em&gt; really excited about Bevy, this year and every year, I&#x27;ll leave hyping Bevy up to others, so go read their blog posts once they&#x27;re posted to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevy.org&quot;&gt;https:&#x2F;&#x2F;bevy.org&lt;&#x2F;a&gt;! Consider this post more a brain dump of my own experiences, rather than on Bevy as a project.&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, let&#x27;s talk about how this year went.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-stuff&quot;&gt;My Stuff&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-stuff&quot; aria-label=&quot;Anchor link for: my-stuff&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The Bevy community has collectively landed a metric truckload of features and improvements this year. Like, just a mind-blowingly large amount.&lt;&#x2F;p&gt;
&lt;p&gt;The Bevy 0.15, 0.16, and 0.17 release notes do a good job of highlighting what&#x27;s new in each release, so I&#x27;m going to give a brief overview of just the (rendering) work I did this year that I&#x27;m particularly proud of.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest project for me this year has been the massive amounts of improvements I (@JMS55), @atlv24, and @SparkyPotato have landed for virtual geometry. When I wrote about Bevy&#x27;s fourth birthday, we had landed the initial virtual geometry feature in Bevy 0.14. Since then, we&#x27;ve made numerous improvements to asset deserialization, compression, rasterization performance, LOD selection, LOD building, and culling in Bevy 0.15-0.17.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m optimistic that this year will be the year that we add streaming, improve CPU performance, and fix the remaining culling bugs. With any luck with asset processing (more on this later), we&#x27;ll finally take virtual geometry out of experimental status later this year!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-03-bevy-fifth-birthday&#x2F;meshlet.png&quot; alt=&quot;Virtual geometry scene with thousands of dragon meshes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Side note: Unlike the last few releases, I won&#x27;t be writing a blog post about virtual geometry for Bevy 0.17. I didn&#x27;t work on the BVH-culling PR for Bevy 0.17 (that was all @atlv24 and @SparkyPotato) due to a combination of burnout and life getting in the way. While I&#x27;ve taken a break from virtual geometry, I&#x27;ve started &lt;em&gt;another&lt;&#x2F;em&gt; huge project: Solari.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Bevy Solari is a brand new crate for raytraced lighting coming in Bevy 0.17. While most of the work was technically done in Bevy 0.17, its origins trace back to a ~2 year old project. I&#x27;ve mentioned in past blog posts how I started it, and then later abandoned it (which lead to me starting virtual geometry) after poor results, and issues with keeping forks of bevy&#x2F;wgpu&#x2F;naga_oil up to date.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I&#x27;m taking a break from virtual geometry, and due to the introduction of some new algorithms and research papers, along with 2 additional years of learning under my belt and upstreamed raytracing in wgpu, I&#x27;ve restarted the project with a completely new approach. I&#x27;m really &lt;em&gt;super&lt;&#x2F;em&gt; excited to share what we have so far, so expect a more detailed blog post about this soon!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-03-bevy-fifth-birthday&#x2F;solari.png&quot; alt=&quot;Solari demo scene&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like with Solari, DLSS integration is another abandoned project that I&#x27;ve revived thanks to work done in wgpu to enable interopt with underlying graphics APIs like Vulkan. Bevy 0.17 will be shipping support for DLSS (and DLSS-RR), alongside it&#x27;s existing anti-aliasing options in MSAA, FXAA, SMAA, and TAA. NVIDIA users now have a great option for anti-aliasing, and much cheaper rendering via upscaling.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to add FSR4 support, but sadly FSR4 was released as a DirectX-only SDK, without any Vulkan support. This would have meant redoing a lot of work, and wasn&#x27;t going to be done in time for Bevy 0.17 (and I don&#x27;t own an RX 9070 XT). Still, eventually we could add support for FSR and XeSS (and potentially MetalFX), now that the infrastructure for temporal upscaling is in place.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-03-bevy-fifth-birthday&#x2F;dlss.jpg&quot; alt=&quot;DLSS demo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The last major feature I landed this year was hooking up our existing GPU timestamps to Tracy, the profiling tool we use. Now Bevy users can see combined CPU and GPU bottlenecks in one place, which is super useful!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-09-03-bevy-fifth-birthday&#x2F;tracy.png&quot; alt=&quot;Tracy screenshot showing GPU timings&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This year I would also like to shout-out several contributors (besides @altv24 and @SparkyPotato) I&#x27;ve been working with: @cart and @alice-i-cecile of course, as well as (in no particular order) @mockersf, @tychedelia, @Elabajaba, @DGriffin91, @IceSentry, @mate-h, @ecoskey, @NthTensor, @viridia, @pcwalton, and @ickshonpe, as well as @cwfitzgerald and @Vecvec for their work on wgpu. Without their help, none of this would have been possible!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unexpected-improvements&quot;&gt;Unexpected Improvements&lt;a class=&quot;zola-anchor&quot; href=&quot;#unexpected-improvements&quot; aria-label=&quot;Anchor link for: unexpected-improvements&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Along with the usual headline features, there&#x27;s also been a lot of work done by the Bevy community this year that has ended up suprising me.&lt;&#x2F;p&gt;
&lt;p&gt;The major one would be required components. I was fairly skeptical of them when they were first introduced, and thought it wasn&#x27;t really an &quot;ECS&quot; way of doing this. In retrospect, I was totally wrong. As a user, using required components is &lt;em&gt;way&lt;&#x2F;em&gt; more pleasant than the older bundle-based API, and is easier to get started with. It ends up being &lt;em&gt;easier&lt;&#x2F;em&gt; to explain to users to spawn and query an entity with a &lt;code&gt;Camera&lt;&#x2F;code&gt; component, rather than spawning with a &lt;code&gt;CameraBundle&lt;&#x2F;code&gt; and then querying for a &lt;code&gt;Camera&lt;&#x2F;code&gt;. As a plugin author, required components give me some peace of mind knowing that users can&#x27;t easily add a component without adding its dependencies (and make the API a little nicer compared to bundles). There &lt;em&gt;is&lt;&#x2F;em&gt; still some rough edges to sort out, mainly making some sort of priority system for required components to override each other (e.g. &lt;code&gt;Camera&lt;&#x2F;code&gt; requiring &lt;code&gt;Msaa::Sample4&lt;&#x2F;code&gt;, and then &lt;code&gt;TemporalAntiAliasing&lt;&#x2F;code&gt; being able to override that with &lt;code&gt;Msaa::Off&lt;&#x2F;code&gt;), but overall it was an unexpectedly nice improvement. Cart absolutely cooked with this change.&lt;&#x2F;p&gt;
&lt;p&gt;Retained rendering, and the other GPU-driven rendering parts have also worked out really well. Again some sharp edges with the APIs (mainly cleaning up render world entities being hard to write and easy to mess up), but these were hugely foundational changes, that overall landed really smoothly! I don&#x27;t think the Bevy of 1-2 years ago would have landed these so easily, and they&#x27;ve &lt;em&gt;drastically&lt;&#x2F;em&gt; improved performance.&lt;&#x2F;p&gt;
&lt;p&gt;The introduction of working groups was, to some extent, a big contributor of this. In the past I&#x27;ve complained about review speed for PRs, but this year it&#x27;s been &lt;em&gt;way&lt;&#x2F;em&gt; better. Working groups give a set of built-in reviewers for larger projects, and Alice&#x27;s Monday merge train often ends up being the final maintainer-review-once-over before merging, which keeps PRs merging smoothly. It&#x27;s been working quite well!&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, having release notes in the main Bevy repo, and required as part of submitting PRs (something I&#x27;ve been advocating for!) has made the release process for Bevy 0.17 &lt;em&gt;so much easier&lt;&#x2F;em&gt;. Rather than having to crunch out release notes, changelogs, and showcases out at the end of the cycle (when we&#x27;re all burnt out from writing PRs), writing them incrementally as a part of the PR process has been a huge time stress relief. As an unexpected benefit, it also makes reviewing PRs much easier, as it forces the author to write a good user-facing description of the changes for reviewers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-year&quot;&gt;Next Year?&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-year&quot; aria-label=&quot;Anchor link for: next-year&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The end of the birthday post is usually where I take some time to talk about what I&#x27;m planning to work on for the next year, but honestly I don&#x27;t have a ton of plans at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;Continuing virtual geometry and Solari is a given, but otherwise I don&#x27;t have any other concrete goals in terms of features.&lt;&#x2F;p&gt;
&lt;p&gt;Neural-compressed textures would be cool, but is maybe a little too-researchy, and requires better asset processing APIs.&lt;&#x2F;p&gt;
&lt;p&gt;Writing more blog posts would be great, but I probably don&#x27;t have it in me to write these more frequently. I &lt;em&gt;have&lt;&#x2F;em&gt; been using a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;jms5517.bsky.social&quot;&gt;Bluesky page&lt;&#x2F;a&gt; to document short progress snippets as I work on PRs, so maybe follow that if you&#x27;re interested in my content.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;em&gt;would&lt;&#x2F;em&gt; like to write more documentation this year though - both API docs, and module docs &#x2F; Bevy book content. As Bevy is getting increasingly mature, docs have become one of the bigger sticking points. Rendering in particular needs a lot more docs, both because it&#x27;s under-documented, and because it&#x27;s a fairly arcane subject.&lt;&#x2F;p&gt;
&lt;p&gt;When I first started making 3d games, and later when I started working on rendering, I had absolutely no clue what to do. How to light a scene, how to write a custom material, what&#x27;s important for rendering performance, how do I write my own rendering feature &amp;lt;FOO&amp;gt;, and more are all questions that would greatly benefit from some longer-form written documents.&lt;&#x2F;p&gt;
&lt;p&gt;As we start to run out of major rendering features, putting my energy towards writing more docs seems like a good way to move Bevy closer to being production-ready. I&#x27;ve already &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy-website&#x2F;pull&#x2F;2195&quot;&gt;started writing some stuff&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;production-ready-what-s-missing&quot;&gt;Production Ready - What&#x27;s Missing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#production-ready-what-s-missing&quot; aria-label=&quot;Anchor link for: production-ready-what-s-missing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;So instead of writing my plans for next year, let&#x27;s talk about what I think Bevy is missing (besides docs). I don&#x27;t necessarily plan or not plan on working on any of this myself, but here are the things that I feel make it hard to say &quot;Just use Bevy, duh!&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;UI&lt;&#x2F;strong&gt; continues to be a weak point. While &lt;code&gt;bevy_ui&lt;&#x2F;code&gt; is a great foundation for rendering UI (in large part to @ickshonpe&#x27;s and the taffy team&#x27;s heroic efforts), no third-party crate (including my own bevy_dioxus) has proven out a good high-level API for declaring and updating UI trees. BSN is coming soon, but it only solves the declarative part of UI, and not the reactivity part. Until we resolve this, it&#x27;s hard to reccomend Bevy for UI-heavy games and apps, and more importantly, we can&#x27;t build the-&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Editor&lt;&#x2F;strong&gt; absence continues to be a big, big hole for Bevy. Not just in terms of being production ready, but I think the first release with an official editor is going to get an exponential influx of new users, and eventually new contributors. Working on the Solari demo scene has made me feel the lack of an editor badly. It was quite frustrating trying to get the materials correct for everything without an editor. I &lt;em&gt;did&lt;&#x2F;em&gt; work on a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy_editor_prototypes&#x2F;pull&#x2F;167&quot;&gt;prototype&lt;&#x2F;a&gt; scene tree + inspector using a third-party BSN crate, but it was exceedingly difficult to write and understand, and I gave up on it. I&#x27;m really excited to work on the editor, but I&#x27;m going to hold off until reactive UI lands.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Asset processing&lt;&#x2F;strong&gt; is another big bottleneck. Hard to say Bevy is production ready when the only texture compressor it has is an outdated version of BasisU. While cart added some asset processing APIs with Assets V2, it&#x27;s clunky and dosen&#x27;t support enough features. Trying to write a glTF -&amp;gt; virtual geometry processor &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;13431&quot;&gt;proved to be unfeasible&lt;&#x2F;a&gt;. Once cart is done with BSN and reactivity, I would like to see him go back to this area. I would also like to move away from recommending that users ship their games with glTF&#x2F;glb scenes, and instead provide some kind of glTF -&amp;gt; BSN + seperate image&#x2F;mesh assets importer, that we can then run further asset processing on. This is another area that would greatly benefit from having an Editor.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Animation&lt;&#x2F;strong&gt; isn&#x27;t something I know a ton about, but after recently trying it out in Bevy, I can definitely say it&#x27;s lacking. The API is quite clunky, with too many confusingly-named components and amount of entities needed, and not enough features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Custom Materials&lt;&#x2F;strong&gt; in Bevy are currently servicable, but not enjoyable. Users have a lot of power, but that&#x27;s because we don&#x27;t really provide much in the way of customizable abstractions. Mostly on the shader side, but also partly on the Rust side, with users having to resort to &lt;code&gt;MeshTag&lt;&#x2F;code&gt; and &lt;code&gt;ShaderStorageBuffer&lt;&#x2F;code&gt; to get good performance. The Material API should be completely redesigned, unified across 3d&#x2F;2d&#x2F;UI, and made much easier to use for common use-cases. We&#x27;ve been throwing around ideas in the #rendering-dev channel on Discord, but nothing concrete yet. This is a good area to get involved in!&lt;&#x2F;p&gt;
&lt;p&gt;Overall, I do see paths to improving all of these areas over the next year (or likely two for animations and editor). I am a little disappointed with how long it has taken to land BSN, mostly with the opaqueness of the process (which cart has talked about, so I&#x27;m not going to repeat here), but I&#x27;m hopeful about the next steps!&lt;&#x2F;p&gt;
&lt;p&gt;See you next year!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Virtual Geometry in Bevy 0.16</title>
		<published>2025-03-27T00:00:00+00:00</published>
		<updated>2025-03-27T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2025-03-27-virtual-geometry-bevy-0-16/" type="text/html"/>
		<id>https://jms55.github.io/posts/2025-03-27-virtual-geometry-bevy-0-16/</id>
		<content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Bevy 0.16 is releasing soon, and as usual it&#x27;s time for me to write about the progress I&#x27;ve made on virtual geometry over the last couple of months.&lt;&#x2F;p&gt;
&lt;p&gt;Due to a combination of life being busy, and taking an ongoing break from the project to work on other stuff (due to burnout), I haven&#x27;t gotten as much done as the last two releases. This will be a much shorter blog post than usual.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metis-based-triangle-clustering&quot;&gt;METIS-based Triangle Clustering&lt;a class=&quot;zola-anchor&quot; href=&quot;#metis-based-triangle-clustering&quot; aria-label=&quot;Anchor link for: metis-based-triangle-clustering&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;16947&quot;&gt;#16947&lt;&#x2F;a&gt; improves the DAG quality.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve said it before, and I&#x27;ll say it again - DAG quality is the most important part of virtual geometry (and the hardest to get right).&lt;&#x2F;p&gt;
&lt;p&gt;Before, in order to group triangles into meshlets, I was simply relying on meshoptimizer&#x27;s &lt;code&gt;meshopt_buildMeshlets()&lt;&#x2F;code&gt; function. It works pretty good for the general use case of splitting meshes into meshlets, but for virtual geometry, it&#x27;s not ideal.&lt;&#x2F;p&gt;
&lt;p&gt;Meshoptimizer prioritizes generating nice clusters for culling and vertex reuse, but for virtual geometry, we want to ensure that meshlets share as few vertices as possible. Less shared vertices between meshlets means less locked vertices when simplifying, which leads to better DAG quality.&lt;&#x2F;p&gt;
&lt;p&gt;Minimizing shared vertices between meshlets when clustering triangles is the same problem as minimizing shared vertices between meshlet groups when grouping meshlets. We will once again use METIS to partition a graph, where nodes are triangles, edges connect adjacent triangles, and edge weights are the count of shared vertices between the triangles.&lt;&#x2F;p&gt;
&lt;p&gt;From there it was just a lot of experimentation and tweaking parameters in order to get METIS to generate good meshlets. The secret ingredients I discovered for good clustering are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Set UFactor to 1 in METIS&#x27;s options (did you know METIS has an options struct?), to ensure as little imbalance between partitions as possible.&lt;&#x2F;li&gt;
&lt;li&gt;Undershoot the partition count a little. Otherwise METIS will tend to overshoot and give you too many triangles per meshlet. For 128 max triangles per cluster, I set &lt;code&gt;partition_count = number_of_triangles.div_ceil(126)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;With this, we get a nicer quality DAG. Up until now, I&#x27;ve been plagued by tiny &amp;lt;10 triangles meshlets that tend to get &quot;stuck&quot; and not simplify into higher LOD levels. Now we get nice and even meshlets that simplify well as we build the higher LOD levels.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-03-27-virtual-geometry-bevy-0-16&#x2F;old_dag.png&quot; alt=&quot;Old DAG&quot; &#x2F;&gt;
&lt;em&gt;Old DAG&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-03-27-virtual-geometry-bevy-0-16&#x2F;new_dag.png&quot; alt=&quot;New DAG&quot; &#x2F;&gt;
&lt;em&gt;New DAG&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I&#x27;m still not done working on DAG quality - I haven&#x27;t considered spatial positions of triangles&#x2F;meshlets for grouping things yet - but this was a great step forwards.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;texture-atomics&quot;&gt;Texture Atomics&lt;a class=&quot;zola-anchor&quot; href=&quot;#texture-atomics&quot; aria-label=&quot;Anchor link for: texture-atomics&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;17765&quot;&gt;#17765&lt;&#x2F;a&gt; improves the runtime performance.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks once again to @atlv24&#x27;s work on wgpu&#x2F;naga, we now have access to atomic operations on u64&#x2F;u32 storage textures!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of using a plain GPU buffer to store our visbuffer, and buffer atomics to rasterize, we&#x27;ll now use a R64Uint&#x2F;R32Uint storage texture, and use texture atomics for rasterization.&lt;&#x2F;p&gt;
&lt;p&gt;Things get a little bit faster, mostly due to cache behaviors for texture-like access patterns being better with actual textures instead of buffers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;faster-depth-resolve&quot;&gt;Faster Depth Resolve&lt;a class=&quot;zola-anchor&quot; href=&quot;#faster-depth-resolve&quot; aria-label=&quot;Anchor link for: faster-depth-resolve&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The real win however, was actually an entirely unrelated change I made in the same PR.&lt;&#x2F;p&gt;
&lt;p&gt;After rasterizing to the visbuffer texture (packed depth + cluster ID + triangle ID), there are two fullscreen triangle render passes to read from the visbuffer and write depth to both an actual depth texture, and the &quot;material depth&quot; texture discussed in previous posts.&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at the material depth resolve shader:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_material_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: FullscreenVertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_visibility_buffer, vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;.r;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 32u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; 0lu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; discard; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; This line is new
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;visibility&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 7u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; material_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_material_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;65535.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For pixels where depth is 0 (i.e. the background, i.e. no meshes covering that pixel), we don&#x27;t need to write depth out. The textures are already cleared to zero by the render pass setup.&lt;&#x2F;p&gt;
&lt;p&gt;Adding this single line to discard the background fragments doubled the performance of the resolve depth&#x2F;material depth passes in the demo scene.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;issues-with-clearing&quot;&gt;Issues With Clearing&lt;a class=&quot;zola-anchor&quot; href=&quot;#issues-with-clearing&quot; aria-label=&quot;Anchor link for: issues-with-clearing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;In Bevy we cache resource between frames, and so at the start of the frame, we need to clear the visbuffer texture back to zero to prepare it for use during the frame.&lt;&#x2F;p&gt;
&lt;p&gt;Wgpu has some simple &lt;code&gt;CommandEncoder::clear_buffer()&lt;&#x2F;code&gt; and &lt;code&gt;CommandEncoder::clear_texture()&lt;&#x2F;code&gt; commands. But their behavior under the hood might be a little unintuitive if you&#x27;ve never used Vulkan before.&lt;&#x2F;p&gt;
&lt;p&gt;When I initially switched the visbuffer from a buffer to a storage texture, and switched the clear from &lt;code&gt;CommandEncoder::clear_buffer()&lt;&#x2F;code&gt; to &lt;code&gt;CommandEncoder::clear_texture()&lt;&#x2F;code&gt;, I profiled and was shocked to see this:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-03-27-virtual-geometry-bevy-0-16&#x2F;slow_clear.png&quot; alt=&quot;Slow frame trace&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;0.68ms spent on a single vkCmdCopyBufferToImage, just to clear the texture. Before, using buffers, it was a simple vkCmdFillBuffer that took 0.01ms. What&#x27;s going on?&lt;&#x2F;p&gt;
&lt;p&gt;Well, under the hood, &lt;code&gt;CommandEncoder::clear_texture()&lt;&#x2F;code&gt; maps to one of the following operations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If the texture was created with the &lt;code&gt;TextureUsages::RENDER_ATTACHMENT&lt;&#x2F;code&gt; bit set, create a render pass with no draws and fragment load op = clear in order to clear the texture.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise allocate a big buffer filled with zeros, and then use vkCmdCopyBufferToImage to copy zeros to fill the texture.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Option #1 is out since R64Uint&#x2F;R32Uint textures don&#x27;t support the &lt;code&gt;TextureUsages::RENDER_ATTACHMENT&lt;&#x2F;code&gt; bit, and of course as we&#x27;ve found out, option #2 is horribly slow.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;best&lt;&#x2F;em&gt; option would be to use vkClearColorImage to clear the texture, which should be a similar fast path in the driver to using vkCmdFillBuffer with zeros, but wgpu neither uses vkClearColorImage internally, nor exposes it to users.&lt;&#x2F;p&gt;
&lt;p&gt;So instead I wrote a custom compute pass (and all the CPU-side boilerplate that that entails) to manually zero the texture, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;ifdef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MESHLET_VISIBILITY_BUFFER_RASTER_PASS_OUTPUT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@binding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; var meshlet_visibility_buffer: texture_storage_2d&amp;lt;r64uint, write&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@binding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; var meshlet_visibility_buffer: texture_storage_2d&amp;lt;r32uint, write&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;endif
&lt;&#x2F;span&gt;&lt;span&gt;var&amp;lt;push_constant&amp;gt; view_size: vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clear_visibility_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;global_id.xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; view_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;ifdef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MESHLET_VISIBILITY_BUFFER_RASTER_PASS_OUTPUT
&lt;&#x2F;span&gt;&lt;span&gt;    textureStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_visibility_buffer, global_id.xy, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;0lu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span&gt;    textureStore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_visibility_buffer, global_id.xy, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;0u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;endif
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Still not as fast as vkClearColorImage likely is, but much faster than 0.68ms.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;texture-atomic-results&quot;&gt;Texture Atomic Results&lt;a class=&quot;zola-anchor&quot; href=&quot;#texture-atomic-results&quot; aria-label=&quot;Anchor link for: texture-atomic-results&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Overall perf improvement is about 0.42ms faster in a very simple demo scene.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-03-27-virtual-geometry-bevy-0-16&#x2F;buffer_trace.png&quot; alt=&quot;Old frame trace&quot; &#x2F;&gt;
&lt;em&gt;Old frame trace&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2025-03-27-virtual-geometry-bevy-0-16&#x2F;texture_trace.png&quot; alt=&quot;New frame trace&quot; &#x2F;&gt;
&lt;em&gt;New frame trace&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;upcoming&quot;&gt;Upcoming&lt;a class=&quot;zola-anchor&quot; href=&quot;#upcoming&quot; aria-label=&quot;Anchor link for: upcoming&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;And that&#x27;s it for virtual geometry stuff I worked on during Bevy 0.16.&lt;&#x2F;p&gt;
&lt;p&gt;In related but non-Bevy news, Nvidia revealed their blackwell RTX 50 series GPUs, with some exciting &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvpro-samples&#x2F;build_all?tab=readme-ov-file#mega-geometry&quot;&gt;new meshlet&#x2F;virtual geometry stuff&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;New raytracing APIs (not rasterization!) for meshlet-based acceleration structures (CLAS) that are cheaper to build
&lt;ul&gt;
&lt;li&gt;And on blackwell, CLAS&#x27;s use a compressed (but sadly opaque) memory format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;New demos using CLAS&#x27;s for animated geometry, dynamic tesselation, and even full Nanite-style virtual geometry!&lt;&#x2F;li&gt;
&lt;li&gt;New libraries for generating raytracing-friendly meshlets (i.e. optimized for bounding-box size), and virtual geometry oriented DAGs of meshlets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One of the biggest issues with Nanite (besides aggregate geometry like foilage) is that it came about right when realtime raytracing was starting to pick up. Until now, it hasn&#x27;t been clear how to integrate virtual geometry with raytracing (beyond rasterizing the geometry to a gbuffer, so at least you get more primary visibility detail). These new APIs resolve that issue.&lt;&#x2F;p&gt;
&lt;p&gt;Meshoptimizer v0.23 also released recently, with some new APIs (&lt;code&gt;meshopt_buildMeshletsFlex&lt;&#x2F;code&gt;, &lt;code&gt;meshopt_partitionClusters&lt;&#x2F;code&gt;, &lt;code&gt;meshopt_computeSphereBounds&lt;&#x2F;code&gt;) that I need to try out for DAG building at some point.&lt;&#x2F;p&gt;
&lt;p&gt;Finally of course, I need to work on BVH-based culling for Bevy&#x27;s virtual geometry. As I went over in my last post, culling is the biggest bottleneck at the moment. I did start working on it during the 0.16 dev cycle, but burned out before the end. We&#x27;ll see what happens this cycle.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy Bevy 0.16!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Virtual Geometry in Bevy 0.15</title>
		<published>2024-11-14T00:00:00+00:00</published>
		<updated>2024-11-14T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2024-11-14-virtual-geometry-bevy-0-15/" type="text/html"/>
		<id>https://jms55.github.io/posts/2024-11-14-virtual-geometry-bevy-0-15/</id>
		<content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;cover.png&quot; alt=&quot;Screenshot of some megascans in Bevy 0.15&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;em&gt;Original scene by &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;channels&#x2F;691052431525675048&#x2F;1302853333387575340&#x2F;1302853473997422623&quot;&gt;Griffin&lt;&#x2F;a&gt;. Slightly broken due to lack of double-sided material support.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;It&#x27;s been a little over 5 months &lt;a href=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;&quot;&gt;since my last post&lt;&#x2F;a&gt; where I talked about the very early prototype of virtual geometry I wrote for Bevy 0.14.&lt;&#x2F;p&gt;
&lt;p&gt;While it&#x27;s still not production ready, the improved version of virtual geometry that will ship in Bevy 0.15 (which is releasing soon) is a very large step in the right direction!&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post I&#x27;ll be going over all the virtual geometry PRs merged since my last post, in chronological order. At the end, I&#x27;ll do a performance comparison of Bevy 0.15 vs 0.14, and finally discuss my roadmap for what I&#x27;m planning to work on in Bevy 0.16 and beyond.&lt;&#x2F;p&gt;
&lt;p&gt;Like last time, a lot of the larger architectural changes are copied from Nanite based on the SIGGRAPH presentation, which you should watch if you want to learn more.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s going to be another super long read, so grab some snacks and strap in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;arseny-kapoulkine-s-contributions&quot;&gt;Arseny Kapoulkine&#x27;s Contributions&lt;a class=&quot;zola-anchor&quot; href=&quot;#arseny-kapoulkine-s-contributions&quot; aria-label=&quot;Anchor link for: arseny-kapoulkine-s-contributions&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PRs &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;13904&quot;&gt;#13904&lt;&#x2F;a&gt;, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;13913&quot;&gt;#13913&lt;&#x2F;a&gt;, and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;14038&quot;&gt;#14038&lt;&#x2F;a&gt; improve the performance of the Mesh to MeshletMesh converter, and makes it more deterministic. These were written by Arseny Kapoulkine (author of meshoptimizer, the library I use for mesh simplification and meshlet building). Thanks for the contributions!&lt;&#x2F;p&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;14042&quot;&gt;#14042&lt;&#x2F;a&gt;, also by Kapoulkine, fixed a bug with how we calculate the depth pyramid mip level to sample at for occlusion culling.&lt;&#x2F;p&gt;
&lt;p&gt;These PRs were actually shipped in Bevy 0.14, but were opened after I published my last post, hence why I&#x27;m covering them now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;faster-meshletmesh-loading&quot;&gt;Faster MeshletMesh Loading&lt;a class=&quot;zola-anchor&quot; href=&quot;#faster-meshletmesh-loading&quot; aria-label=&quot;Anchor link for: faster-meshletmesh-loading&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;14193&quot;&gt;#14193&lt;&#x2F;a&gt; improves performance when loading MeshletMesh assets from disk.&lt;&#x2F;p&gt;
&lt;p&gt;Previously I was using the &lt;code&gt;bincode&lt;&#x2F;code&gt; and &lt;code&gt;serde&lt;&#x2F;code&gt; crates to serialize and deserialize MeshletMeshes. All I had to do was slap &lt;code&gt;#[derive(Serialize, Deserialize)]&lt;&#x2F;code&gt; on the type, and then I could use &lt;code&gt;bincode::serialize_into()&lt;&#x2F;code&gt; to turn my asset into a slice of bytes for writing to disk, and &lt;code&gt;bincode::deserialize_from()&lt;&#x2F;code&gt; in order to turn a slice of bytes loaded from disk back into my asset type. Easy.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, that ease of use came with a good bit of performance overhead. Specifically in the deserializing step, where bytes get turned into the asset type. Deserializing the 5mb Stanford Bunny asset I was using for testing took a depressingly long 77ms on my Ryzen 5 2600 CPU.&lt;&#x2F;p&gt;
&lt;p&gt;Thinking about the code flow more, we &lt;em&gt;already&lt;&#x2F;em&gt; have an asset -&amp;gt; bytes step. After the asset is loaded into CPU memory, we serialize it &lt;em&gt;back&lt;&#x2F;em&gt; into bytes so that we can upload it to GPU memory. For this, we use the &lt;code&gt;bytemuck&lt;&#x2F;code&gt; crate which provides functions for casting slices of data that are &lt;code&gt;Pod&lt;&#x2F;code&gt; (plain-old-data, i.e. just numbers, which all of our asset data is) to slices of bytes, without any real overhead.&lt;&#x2F;p&gt;
&lt;p&gt;Why not simply use bytemuck to cast our asset data to slices of bytes, and write that? Similarly for reading from disk, we can simply cast the slice of bytes back to our asset type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Pod&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[T],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Write,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, MeshletMeshSaveOrLoadError&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;field.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_le_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bytemuck::cast_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Pod&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Arc&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, std::io::Error&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data: Arc&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::iter::repeat_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T::zeroed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::get_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_exact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bytemuck::cast_slice_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These two functions are all we need to read and write asset data. &lt;code&gt;write_slice()&lt;&#x2F;code&gt; takes a slice of asset data, writes the length of the slice, and then casts the slice to bytes and writes it to disk. &lt;code&gt;read_slice()&lt;&#x2F;code&gt; reads the length of the slice from disk, allocates an atomically reference counted buffer of that size, and then reads from disk to fill the buffer, casting it back into the asset data type.&lt;&#x2F;p&gt;
&lt;p&gt;Writing the entire asset to disk now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;asset.vertex_data, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;asset.vertex_ids, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;asset.indices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;asset.meshlets, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;asset.bounding_spheres, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And reading it back from disk looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; indices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MeshletMesh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_data,
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_ids,
&lt;&#x2F;span&gt;&lt;span&gt;    indices,
&lt;&#x2F;span&gt;&lt;span&gt;    meshlets,
&lt;&#x2F;span&gt;&lt;span&gt;    bounding_spheres,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Total load time from disk to CPU memory for our 5mb MeshletMesh went from 102ms down to 12ms, an 8.5x speedup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-rasterization&quot;&gt;Software Rasterization&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-rasterization&quot; aria-label=&quot;Anchor link for: software-rasterization&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;14623&quot;&gt;#14623&lt;&#x2F;a&gt; improves our visbuffer rasterization performance for clusters that appear small on screen (i.e. almost all of them). I rewrote pretty much the entire virtual geometry codebase in this PR, so this is going to be a really long section.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation&quot; aria-label=&quot;Anchor link for: motivation&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;If you remember the frame breakdown from the last post, visbuffer rasterization took the largest chunk of our frame time. Writing out a buffer of cluster + triangle IDs to render in the culling pass, and then doing a single indirect draw over the total count of triangles does not scale very well.&lt;&#x2F;p&gt;
&lt;p&gt;The buffer used a lot of memory (4 bytes per non-culled triangle). The GPU&#x27;s primitive assembler can&#x27;t keep up with the sheer number of vertices we&#x27;re sending it as we&#x27;re not using indexed triangles (to save extra memory and time spent writing out an index buffer), and therefore lack a vertex cache. And finally the GPU&#x27;s rasterizer just performs poorly with small triangles, and we have a &lt;em&gt;lot&lt;&#x2F;em&gt; of small triangles.&lt;&#x2F;p&gt;
&lt;p&gt;Current GPU rasterizers expect comparatively few triangles that each cover many pixels. They have performance optimizations aimed at that kind of workload like shading 2x2 quads of pixels at a time and tile binning of triangles. Meanwhile, our virtual geometry renderer is aimed at millions of tiny triangles that only cover a pixel each. We need a rasterizer aimed at being efficient over the number of triangles; not the number of covered pixels per triangle.&lt;&#x2F;p&gt;
&lt;p&gt;We need a custom rasterizer algorithm, written in a compute shader, that does everything the GPU&#x27;s hardware rasterizer does, but with the extra optimizations stripped out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;a class=&quot;zola-anchor&quot; href=&quot;#preparation&quot; aria-label=&quot;Anchor link for: preparation&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Before we get to the actual software rasterizer, there&#x27;s a bunch of prep work we need to do first. Namely, redoing our entire hardware rasterizer setup.&lt;&#x2F;p&gt;
&lt;p&gt;In Bevy 0.14, we were writing out a buffer of triangles from the culling pass, and issuing a single indirect draw to rasterize every triangle in the buffer. We&#x27;re going to throw all that out, and go with a completely new scheme.&lt;&#x2F;p&gt;
&lt;p&gt;First, we need a buffer for to store a bunch of cluster IDs (the ones we want to rasterize). We&#x27;ll have users give a fixed size for this buffer on startup, based on the maximum number of clusters they expect to have visible in a frame in any given scene (not the amount pre-culling and LOD selection).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;MeshletPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; cluster_buffer_slots: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8192 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;render_device.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;create_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;BufferDescriptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    label: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;meshlet_raster_clusters&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    size: cluster_buffer_slots &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;size_of::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    usage: BufferUsages::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;STORAGE&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    mapped_at_creation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we&#x27;ll setup two indirect commands in some buffers. One for hardware raster, one for software raster. For hardware raster, we&#x27;re going to hardcode the vertex count to 64 (the maximum number of triangles per meshlet) times 3 (vertices per triangle) total vertices. We&#x27;ll also initialize the instance count to zero.&lt;&#x2F;p&gt;
&lt;p&gt;This was a sceme I described in my last post, but purposefully avoided due to the lackluster performance. However, now that we&#x27;re adding a software rasterizer, I expect that almost all clusters will be software rasterized. Therefore some performance loss for the hardware raster is acceptable, as it should be rarely used. In return, we&#x27;ll get to use a nice trick in the next step.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;render_device.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;create_buffer_with_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;BufferInitDescriptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    label: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;meshlet_hardware_raster_indirect_args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    contents: DrawIndirectArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        vertex_count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        instance_count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        first_vertex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        first_instance: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    usage: BufferUsages::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;STORAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;BufferUsages::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;INDIRECT&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;render_device.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;create_buffer_with_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;BufferInitDescriptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    label: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;meshlet_software_raster_indirect_args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    contents: DispatchIndirectArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, z: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    usage: BufferUsages::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;STORAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;BufferUsages::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;INDIRECT&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the culling pass, after LOD selection and culling, we&#x27;re going to replace the the triangle buffer writeout code with something new.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to decide if the cluster is going to be software rasterized, or hardware rasterized. For this, my current heuristic is to take the cluster&#x27;s screen-space AABB size we already calculated for occlusion culling, and check how big it is. If it&#x27;s small (currently &amp;lt; 64 pixels on both axis), then it should be software rasterized. If it&#x27;s large, then it gets hardware rasterized.&lt;&#x2F;p&gt;
&lt;p&gt;At some point, when I have some better test scenes setup, I&#x27;ll need to experiment with this parameter and see if I get better results with a different number.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_is_small &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;aabb_width_pixels, aabb_height_pixels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;64.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, the culling pass needs to output a list of clusters for both software and hardware rasterization. For this, I&#x27;m going to borrow a trick from Unreal&#x27;s Nanite I learned from this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.elopezr.com&#x2F;a-macro-view-of-nanite&quot;&gt;frame breakdown&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of allocating two buffers (one for SW raster, one for HW raster), we have the one &lt;code&gt;meshlet_raster_clusters&lt;&#x2F;code&gt; buffer that we&#x27;ll share between them, saving memory. Software rasterized clusters will be added starting from the left side of the buffer, while hardware rasterized clusters will be added from the right side of the buffer. As long as the buffer is big enough, they&#x27;ll never overlap.&lt;&#x2F;p&gt;
&lt;p&gt;Software rasterized clusters will increment the previously created indirect dispatch (1 workgroup per cluster), while hardware rasterized clusters will increment the previously created indirect draw (one draw instance per cluster).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;var buffer_slot: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_is_small &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; not_intersects_near_plane &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Append this cluster to the list for software rasterization
&lt;&#x2F;span&gt;&lt;span&gt;    buffer_slot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; atomicAdd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_software_raster_indirect_args.x, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Append this cluster to the list for hardware rasterization
&lt;&#x2F;span&gt;&lt;span&gt;    buffer_slot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; atomicAdd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_hardware_raster_indirect_args.instance_count, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    buffer_slot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; constants.meshlet_raster_cluster_rightmost_slot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; buffer_slot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;meshlet_raster_clusters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;buffer_slot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; cluster_id;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hardware-rasterization-and-atomicmax&quot;&gt;Hardware Rasterization and atomicMax&lt;a class=&quot;zola-anchor&quot; href=&quot;#hardware-rasterization-and-atomicmax&quot; aria-label=&quot;Anchor link for: hardware-rasterization-and-atomicmax&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;We can now perform the indirect draw for hardware rasterization, and an indirect dispatch for software rasterization.&lt;&#x2F;p&gt;
&lt;p&gt;In the hardware rasterization pass, since we&#x27;re now spawning &lt;code&gt;MESHLET_MAX_TRIANGLES * 3&lt;&#x2F;code&gt; vertices per cluster, we now need extra vertex shader invocations to write NaN triangle positions to ensure the extra triangles gets discarded.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;vertex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;instance_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;instance_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; VertexOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_raster_clusters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_raster_cluster_rightmost_slot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; instance_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    var meshlet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 3u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_meshlet_triangle_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return dummy_vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the fragment shader, instead of writing to a bound render target, we&#x27;re now going to do an &lt;code&gt;atomicMax()&lt;&#x2F;code&gt; on a storage buffer to store the rasterized visbuffer result. The reason is that we&#x27;ll need to do the same for the software rasterization pass (because compute shaders don&#x27;t have access to render targets), so to keep things simple and reuse the same bind group and underlying texture state between the rasterization passes, we&#x27;re going to stick to using the atomicMax trick for the hardware rasterization pass as well. The Nanite slides describe this in more detail if you want to learn more.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_output&lt;&#x2F;span&gt;&lt;span&gt;: VertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; frag_coord_1d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_output.position.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;view.viewport.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_output.position.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;bitcast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_output.position.z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; 32u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_output.packed_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    atomicMax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_visibility_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;frag_coord_1d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, visibility&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Special thanks to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atlv24&quot;&gt;@atlv24&lt;&#x2F;a&gt; for adding 64-bit integers and atomic u64 support in wgpu 22, specifically so that I could use it here.&lt;&#x2F;p&gt;
&lt;p&gt;Note that there&#x27;s a couple of improvements we could make here still, pending on support in wgpu and naga for some missing features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;R64Uint texture atomics would both be faster than using buffers, and a bit more ergonomic to sample from and debug. This is hopefully coming in wgpu 24, again thanks to @atlv24.&lt;&#x2F;li&gt;
&lt;li&gt;Async compute would let us overlap the hardware and software rasterization passes, which would be safe since they&#x27;re both writing to the same texture&#x2F;buffer using atomics, which is another reason to stick with atomics for hardware raster.&lt;&#x2F;li&gt;
&lt;li&gt;Wgpu currently requires us to bind an empty render target for the hardware raster, even though we don&#x27;t ever write to it, which is a waste of VRAM. Ideally we wouldn&#x27;t need any bound render target.&lt;&#x2F;li&gt;
&lt;li&gt;And of course if we had mesh shaders, I wouldn&#x27;t use a regular draw at all.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rewriting-the-indirect-dispatch&quot;&gt;Rewriting the Indirect Dispatch&lt;a class=&quot;zola-anchor&quot; href=&quot;#rewriting-the-indirect-dispatch&quot; aria-label=&quot;Anchor link for: rewriting-the-indirect-dispatch&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Before we get to software rasterization (soon, I promise!), we first have to deal with one final problem.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re expecting to deal with a &lt;em&gt;lot&lt;&#x2F;em&gt; of visible clusters. For each software rasterized cluster, we&#x27;re going to increment the X dimension of an indirect dispatch, with 1 workgroup per cluster. On some GPUs (mainly AMD), you&#x27;re limited to 65536 workgroups per dispatch dimension, which is too low. We need to do the same trick we&#x27;ve done in the past of turning a 1d dispatch into a higher dimension dispatch (in this case 2d), and then reinterpreting it back as a 1d dispatch ID in the shader.&lt;&#x2F;p&gt;
&lt;p&gt;Since this is an indirect dispatch, we&#x27;ll need to run a single-thread shader after the culling pass and before software rasterization, to do the 1d -&amp;gt; 2d remap of the indirect dispatch arguments on the GPU.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;remap_dispatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_software_raster_cluster_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_software_raster_indirect_args.x;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; meshlet_software_raster_cluster_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; max_compute_workgroups_per_dimension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_software_raster_cluster_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        meshlet_software_raster_indirect_args.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;        meshlet_software_raster_indirect_args.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-software-rasterizer&quot;&gt;The Software Rasterizer&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-software-rasterizer&quot; aria-label=&quot;Anchor link for: the-software-rasterizer&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, we can do software rasterization.&lt;&#x2F;p&gt;
&lt;p&gt;The basic idea is to have a compute shader workgroup with size equal to the max triangles per meshlet.&lt;&#x2F;p&gt;
&lt;p&gt;Each thread within the workgroup will load 1 vertex of the meshlet, transform it to screen-space, and then write it to workgroup shared memory and issue a barrier.&lt;&#x2F;p&gt;
&lt;p&gt;After the barrier, the workgroup will switch to handling triangles, with one thread per triangle. First each thread will load the 3 indices for its triangle, and then load the 3 vertices from workgroup shared memory based on the indices.&lt;&#x2F;p&gt;
&lt;p&gt;Once each thread has the 3 vertices for its triangle, it can compute the position&#x2F;depth gradients across the triangle, and screen-space bounding box around the triangle.&lt;&#x2F;p&gt;
&lt;p&gt;Each thread can then iterate the bounding box (Like Nanite does, choosing to either iterate each pixel or iterate scanlines, based on the bounding box sizes across the subgroup), writing pixels to the visbuffer as it goes using the same atomicMax() method that we used for hardware rasterization.&lt;&#x2F;p&gt;
&lt;p&gt;One notable difference to the Nanite slides is that for the scanline variant, I needed to check if the pixel center was within the triangle for each pixel in the scanline, which the slides don&#x27;t show. Not sure if the slides just omitted it for brevity or what, but I got artifacts if I left the check out.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also some slight differences between my shader and the GPU rasterizer - I didn&#x27;t implement absolutely every detail. Notably I skipped fixed-point math and the top-left rule. I should implement these in the future, but for now I haven&#x27;t seen any issues from skipping them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;material-and-depth-resolve&quot;&gt;Material and Depth Resolve&lt;a class=&quot;zola-anchor&quot; href=&quot;#material-and-depth-resolve&quot; aria-label=&quot;Anchor link for: material-and-depth-resolve&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;In Bevy 0.15, after the visbuffer rasterization, we have two final steps.&lt;&#x2F;p&gt;
&lt;p&gt;The resolve depth pass reads the visbuffer (which contains packed depth), and writes the depth to the actual depth texture of the camera.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; This pass writes out the depth texture.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: FullscreenVertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; frag_coord_1d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; view_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_visibility_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;frag_coord_1d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;bitcast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 32u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The resolve material depth pass has the same role in Bevy 0.15 that it did in Bevy 0.14, where it writes the material ID of each pixel to a depth texture, so that we can later abuse depth testing to ensure we shade the correct pixels during each material draw in the material shading pass.&lt;&#x2F;p&gt;
&lt;p&gt;However, you may have noticed that unlike the rasterization pass in Bevy 0.14, the new rasterization passes write only depth and cluster + triangle IDs, and not material IDs. During the rasterization pass, where we want to write only the absolute minimum amount of information per pixel (cluster ID, triangle ID, and depth) that we have to.&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, the resolve material depth pass can no longer read the material ID texture and copy it directly to the material depth texture. There&#x27;s now a new step at the start to first load the material ID based on the visbuffer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; This pass writes out the material depth texture.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_material_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: FullscreenVertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; frag_coord_1d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; view_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_visibility_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;frag_coord_1d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 32u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; 0lu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;visibility&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 7u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; material_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_material_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Everything above this line is new - the shader used to just load the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; material_id from another texture
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;65535.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;retrospect&quot;&gt;Retrospect&lt;a class=&quot;zola-anchor&quot; href=&quot;#retrospect&quot; aria-label=&quot;Anchor link for: retrospect&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Software rasterization is a lot of complexity, learning, and work - I spent a lot of time researching how the GPU rasterizer works, rewrote a &lt;em&gt;lot&lt;&#x2F;em&gt; of code, and just writing the software rasterization shader itself and getting it bug-free took a week or two of effort. As you&#x27;ll see later, I missed a couple of (severe) bugs, which will need correcting.&lt;&#x2F;p&gt;
&lt;p&gt;The upside is that performance is a &lt;em&gt;lot&lt;&#x2F;em&gt; better than my previous method (I&#x27;ll show some numbers at the end of this post), and we can have thousands of tiny triangles on screen without hurting performance.&lt;&#x2F;p&gt;
&lt;p&gt;My advice to others working on virtual geometry is to skip software raster until close to the end. If you have mesh shaders, stick with those. From what I&#x27;ve heard from other projects, software raster is only a 10-20% performance improvement over mesh shaders in most scenes, unless you really crank the tiny triangle count (which is admittedly a goal, but not an immediate priority).&lt;&#x2F;p&gt;
&lt;p&gt;If like me, you don&#x27;t have mesh shaders, then I would still probably stick with only hardware rasterization until you&#x27;ve exhausted other, more fundamental areas to work on, like culling and DAG building. However, I would learn from my mistakes, and not spend so much time trying to get hardware rasterization to be fast. Just stick to writing out a list of visible cluster IDs in the culling shader and have the vertex shader ignore extra triangles, instead of trying to get clever with writing out a buffer of visible triangles and drawing the minimum number of vertices. You&#x27;ll eventually add software rasterization, and then the hardware rasterization performance won&#x27;t be so important.&lt;&#x2F;p&gt;
&lt;p&gt;If you do want to implement a rasterizer in software (for virtual geometry, or otherwise), check out the below resources that were a big help for me in learning rasterization and the related math.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;kristoffer-dyrkorn.github.io&#x2F;triangle-rasterizer&quot;&gt;A fast and precise triangle rasterizer, by Kristoffer Dyrkorn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;fgiesen.wordpress.com&#x2F;2013&#x2F;02&#x2F;06&#x2F;the-barycentric-conspirac&quot;&gt;The barycentric conspiracy, by Fabian Giesen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=k5wtuKWmV48&quot;&gt;Triangle Rasterization, by pikuma&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;larger-meshlet-sizes&quot;&gt;Larger Meshlet Sizes&lt;a class=&quot;zola-anchor&quot; href=&quot;#larger-meshlet-sizes&quot; aria-label=&quot;Anchor link for: larger-meshlet-sizes&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15023&quot;&gt;#15023&lt;&#x2F;a&gt; has a bunch of small improvements to virtual geometry.&lt;&#x2F;p&gt;
&lt;p&gt;The main change is switching from a maximum 64 vertices and 64 triangles (&lt;code&gt;64v:64t&lt;&#x2F;code&gt;) to 255 vertices and 128 triangles per meshlet (&lt;code&gt;255v:128t&lt;&#x2F;code&gt;). I found that having a less than or equal &lt;code&gt;v:t&lt;&#x2F;code&gt; ratio leads to most meshlets having less than &lt;code&gt;t&lt;&#x2F;code&gt; triangles, which we don&#x27;t want. Having a &lt;code&gt;2v:t&lt;&#x2F;code&gt; ratio leads to more fully-filled meshlets, and I went with &lt;code&gt;255v:128t&lt;&#x2F;code&gt; (which is nearly the same as Nanite, minus the fact that meshoptimizer only supports meshlets with up to 255 vertices) over &lt;code&gt;128v:64t&lt;&#x2F;code&gt; after some performance testing.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this change involved some other work, such as adjusting software and hardware raster to work with more triangles, software rasterization looping if needed to load 2 vertices per thread instead of 1, using another bit per triangle ID when packing cluster + triangle IDs to accomodate triangles up to 127, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The other changes I made were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setting the target error when simplifying triangles to &lt;code&gt;f32::MAX&lt;&#x2F;code&gt; (no point in capping it for continuous LOD, gives better simplification results)&lt;&#x2F;li&gt;
&lt;li&gt;Adjusting the threshold to allow less-simplified meshes to still count as having been simplified enough (gets us closer to &lt;code&gt;log2(lod_0_meshlet_count)&lt;&#x2F;code&gt; total LOD levels)&lt;&#x2F;li&gt;
&lt;li&gt;Setting &lt;code&gt;group_error = max(group_error, all_child_errors)&lt;&#x2F;code&gt; instead of &lt;code&gt;group_error += max(all_child_errors)&lt;&#x2F;code&gt; (not really sure if this is more or less correct)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;screenspace-derived-tangents&quot;&gt;Screenspace-derived Tangents&lt;a class=&quot;zola-anchor&quot; href=&quot;#screenspace-derived-tangents&quot; aria-label=&quot;Anchor link for: screenspace-derived-tangents&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15084&quot;&gt;#15084&lt;&#x2F;a&gt; calculates tangents at runtime, instead of precomputing them and storing them as part of the MeshletMesh asset.&lt;&#x2F;p&gt;
&lt;p&gt;Virtual geometry isn&#x27;t just about rasterizing huge amounts of high-poly meshes - asset size is also a &lt;em&gt;big&lt;&#x2F;em&gt; factor. GPUs only have so much memory, disks only have so much space, and transfer speeds from disk to RAM and RAM to VRAM are only so fast (as we discovered in the last post).&lt;&#x2F;p&gt;
&lt;p&gt;Looking at our asset data, right now we&#x27;re storing 48 bytes per vertex, with a single set of vertices shared across all meshlets in a meshlet mesh.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MeshletVertex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt;: vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tangent&lt;&#x2F;span&gt;&lt;span&gt;: vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An easy way to reduce the amount of data per asset is to just remove the explicitly-stored tangents, and instead calculate them at runtime. In the visbuffer resolve shader function, rather then loading 3 vertex tangents and interpolating across the triangle, we can instead calculate the tangent based on UV derivatives across the triangle.&lt;&#x2F;p&gt;
&lt;p&gt;The tangent derivation I used was &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;jcgt.org&#x2F;published&#x2F;0009&#x2F;03&#x2F;04&quot;&gt;&quot;Surface Gradient–Based Bump Mapping Framework&quot;&lt;&#x2F;a&gt; from Morten S. Mikkelsen (author of the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.metalliandy.com&#x2F;mikktspace&#x2F;tangent_space_normal_maps.html&quot;&gt;mikktspace&lt;&#x2F;a&gt; standard). It&#x27;s a really cool paper that provides a framework for using normal maps in many more scenarios than just screen-space based tangents. Definitely give it a further read.&lt;&#x2F;p&gt;
&lt;p&gt;I used the code from this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.jeremyong.com&#x2F;graphics&#x2F;2023&#x2F;12&#x2F;16&#x2F;surface-gradient-bump-mapping&quot;&gt;blog post&lt;&#x2F;a&gt; by Jeremy Ong, which also does a great job motivating and explaining the paper.&lt;&#x2F;p&gt;
&lt;p&gt;The only issue I ran into is that the &lt;code&gt;tangent.w&lt;&#x2F;code&gt; always came out with the wrong sign compared to the existing mikktspace-tangents I had as a reference. I double checked my math and coordinate space handiness a couple of times, but could never figure out what was wrong. I ended up just inverting the sign after calculating the tangent. If anyone knows what I did wrong, please open an &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&quot;&gt;issue&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;www.jeremyong.com&#x2F;graphics&#x2F;2023&#x2F;12&#x2F;16&#x2F;surface-gradient-bump-mapping&#x2F;#surface-gradient-from-a-tangent-space-normal-vector-without-an-explicit-tangent-basis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;calculate_world_tangent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_normal&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ddx_world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ddy_world_position&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ddx_uv&lt;&#x2F;span&gt;&lt;span&gt;: vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ddy_uv&lt;&#x2F;span&gt;&lt;span&gt;: vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Project the position gradients onto the tangent plane
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ddx_world_position_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ddx_world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ddx_world_position, world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; world_normal;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ddy_world_position_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ddy_world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ddy_world_position, world_normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; world_normal;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Compute the jacobian matrix to leverage the chain rule
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; jacobian_sign &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sign&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ddx_uv.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ddy_uv.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ddx_uv.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ddy_uv.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    var world_tangent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; jacobian_sign &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* (&lt;&#x2F;span&gt;&lt;span&gt;ddy_uv.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ddx_world_position_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ddx_uv.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ddy_world_position_s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; The sign intrinsic returns 0 if the argument is 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; jacobian_sign &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        world_tangent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;normalize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_tangent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; The second factor here ensures a consistent handedness between
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; the tangent frame and surface basis w.r.t. screenspace.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; jacobian_sign &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sign&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ddy_world_position, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;cross&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_normal, ddx_world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_tangent, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; TODO: Unclear why we need to negate this to match mikktspace generated tangents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the cost of a few extra calculations in the material shading pass, and some slight inaccuracies compared to explicit tangents (mostly on curved surfaces), we save 16 bytes per vertex, both on disk (although LZ4 compression means we might be saving less in practice), and in memory.&lt;&#x2F;p&gt;
&lt;p&gt;16 bytes might not sound like a lot, but our high-poly meshes have a &lt;em&gt;lot&lt;&#x2F;em&gt; of vertices, so the savings are significant, especially in combination with the next PR.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Explicit Tangents (0.14)&lt;&#x2F;th&gt;&lt;th&gt;Implicit tangents (0.15)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;explicit_tangents.png&quot; alt=&quot;Explicit tangents in Bevy 0.14&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;implicit_tangents.png&quot; alt=&quot;Implicit tangents in bevy 0.15&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Also of note is that while trying to debug the sign issue, I found that The Forge had published an &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ConfettiFX&#x2F;The-Forge&#x2F;blob&#x2F;9d43e69141a9cd0ce2ce2d2db5122234d3a2d5b5&#x2F;Common_3&#x2F;Renderer&#x2F;VisibilityBuffer2&#x2F;Shaders&#x2F;FSL&#x2F;vb_shading_utilities.h.fsl#L90-L150&quot;&gt;updated version&lt;&#x2F;a&gt; of their partial derivatives calculations, fixing a small bug. I updated my WGSL port to match.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compressed-per-meshlet-vertex-data&quot;&gt;Compressed Per-Meshlet Vertex Data&lt;a class=&quot;zola-anchor&quot; href=&quot;#compressed-per-meshlet-vertex-data&quot; aria-label=&quot;Anchor link for: compressed-per-meshlet-vertex-data&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15643&quot;&gt;#15643&lt;&#x2F;a&gt; stores copies of the overall mesh&#x27;s vertex attribute data per-meshlet, and then heavily compresses it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;motivation-1&quot;&gt;Motivation&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation-1&quot; aria-label=&quot;Anchor link for: motivation-1&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The whole idea behind virtual geometry is that you only pay (as much as possible, it&#x27;s of course not perfect) for the geometry currently needed on screen. Zoomed out? You pay the rasterization cost for only a few triangles at a higher LOD, and not for the entire mesh. Part of the mesh occluded? It gets culled. But continuing on with the theme from the last PR, memory usage is also a big cost. We might be able to render a large scene of high poly meshes with clever usage of LODs and culling, but can we afford to &lt;em&gt;store&lt;&#x2F;em&gt; all that mesh data to begin with in our GPU&#x27;s measily 8-12gb of VRAM? (not even accounting for space taken up by material textures which will reduce our budget even further).&lt;&#x2F;p&gt;
&lt;p&gt;The way we fix this is with streaming. Rather than keep everything in memory all the time, you have the GPU write requests of what data it needs to a buffer, read that back onto the CPU, and then load the requested data from disk into a fixed-size GPU buffer. If the GPU no longer needs a piece of data, you mark that section of the buffer as free space, and can write new data to it as new requests come in.&lt;&#x2F;p&gt;
&lt;p&gt;Typical implementations of mesh streaming stream discrete LOD levels, but our goal is to be much more fine-grained. Keeping with the theme of only paying for the cluster data you need actually need to render the current frame, we want to stream individual meshlets, not whole LOD levels (in practice, Nanite streams fixed-size pages of meshlet data, and not individual meshlets). This presents a problem with our current implementation: since all meshlets reference the same set of vertex data, we have no simple way of unloading or loading vertex data for a single meshlet. While I&#x27;m not going to tackle streaming in Bevy 0.15, in this PR I&#x27;ll be changing the way we store vertex data to solve this problem and unblock streaming in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Up until now, each MeshletMesh has had one set of vertex data shared between all meshlets within the mesh. Each meshlet has a local index buffer, mapping triangles to meshlet-local vertex IDs, and then a global index buffer mapping meshlet-local vetex IDs to actual vertex data from the mesh. E.g. triangle corner X within a meshlet points to vertex ID Y within a meshlet which points to vertex Z within the mesh.&lt;&#x2F;p&gt;
&lt;p&gt;In order to support streaming, we&#x27;re going to move to a new scheme. We will store a copy of vertex data for each meshlet, concatenated together into one slice. All the vertex data for meshlet 0 will be stored as one contiguous slice, with all the vertex data for meshlet 1 stored contiguously after it, and all the vertex data for meshlet 2 after &lt;em&gt;that&lt;&#x2F;em&gt;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Each meshlet&#x27;s local index buffer will point directly into vertices within the meshlet&#x27;s vertex data slice, stored as an offset relative to the starting index of the meshlet&#x27;s vertex data slice within the overall buffer. E.g. triangle corner X within a meshlet points to vertex Y within the meshlet directly.&lt;&#x2F;p&gt;
&lt;p&gt;Besides unblocking streaming, this scheme is also much simpler to reason about, uses less dependent memory reads, and works much nicer with our software rasterization pass where each thread in the workgroup is loading a single meshlet vertex into workgroup shared memory.&lt;&#x2F;p&gt;
&lt;p&gt;That was a lot of background and explanation for what&#x27;s really a rather simple change, so let me finally get to the main topic of this PR: the problem with duplicating vertex data per meshlet is that we&#x27;ve just increased the size of our MeshletMesh asset by a thousandfold.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is quantization and compression.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;position-compression&quot;&gt;Position Compression&lt;a class=&quot;zola-anchor&quot; href=&quot;#position-compression&quot; aria-label=&quot;Anchor link for: position-compression&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Meshlets compress pretty well. Starting with vertex positions, there&#x27;s no reason we need to store a full &lt;code&gt;vec3&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt; per vertex. Most meshlets tend to enclose a fairly small amount of space. Instead of storing vertex positions as coordinates relative to the mesh center origin, we can instead store them in some coordinate space relative to the meshlet bounds.&lt;&#x2F;p&gt;
&lt;p&gt;For each meshlet, we&#x27;ll iterate over all of its vertex positions, and calculate the min and max value for each of the X&#x2F;Y&#x2F;Z axis. Then, we can remap each position relative to those bounds by doing &lt;code&gt;p -= min&lt;&#x2F;code&gt;. The positions initially range from &lt;code&gt;[min, max]&lt;&#x2F;code&gt;, and then range from &lt;code&gt;[0, max - min]&lt;&#x2F;code&gt; after remapping. We can store the &lt;code&gt;min&lt;&#x2F;code&gt; values for each of the X&#x2F;Y&#x2F;Z axis (as a full &lt;code&gt;f32&lt;&#x2F;code&gt; each) in the meshlet metadata, and in the shader reverse the remapping by doing &lt;code&gt;p += min&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Our first (albeit small) saving become apparent: at the cost of 12 extra bytes in the meshlet metadata, we save 3 bits per vertex position due to no longer needing a bit for the sign for each of the X&#x2F;Y&#x2F;Z values, as &lt;code&gt;[0, max - min]&lt;&#x2F;code&gt; is never going to contain any negative numbers. We technically now only need a hypothetical &lt;code&gt;f31&lt;&#x2F;code&gt; per axis.&lt;&#x2F;p&gt;
&lt;p&gt;However, there&#x27;s a another trick we can perform. If we take the ceiling of the log2 of a range of floating point values &lt;code&gt;ceil(log2(max - min + 1))&lt;&#x2F;code&gt;, we get the minimum number of bits we need to store any value in that range. Rather than storing meshlet vertex positions as a list of &lt;code&gt;vec3&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt;s, we could instead store them as a packed list of bits (a bitstream).&lt;&#x2F;p&gt;
&lt;p&gt;E.g. if we determine that we need 4&#x2F;7&#x2F;3 bits for the X&#x2F;Y&#x2F;Z ranges of the meshlet, we could store a list of bits where bits 0..4 are for vertex 0 axis X, bits 4..11 are for vertex 0 axis Y, bits 11..14 are for vertex 0 axis Z, bits 14..18 are for vertex 1 axis X, bits 18..25 are for vertex 1 axis Y, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Again we can store the bit size (as a &lt;code&gt;u8&lt;&#x2F;code&gt;) for each of the X&#x2F;Y&#x2F;Z axis within the meshlet&#x27;s metadata, at a cost of 3 extra bytes. We&#x27;ll use this later in our shaders to figure out how many bits to read from the bistream for each of the meshlet&#x27;s vertices.&lt;&#x2F;p&gt;
&lt;p&gt;In practice, if you try this out as-is, you&#x27;re probably going to end up with fairly large bit sizes per axis, and not actually save any space vs using &lt;code&gt;vec3&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt;. This is due to the large amount of precision we have in our vertex positions (a full &lt;code&gt;f32&lt;&#x2F;code&gt;), which leads to a lot of precision needed in the range, and therefore a large bit size.&lt;&#x2F;p&gt;
&lt;p&gt;The final trick up our sleeves is that we don&#x27;t actually &lt;em&gt;need&lt;&#x2F;em&gt; all this precision. If we know that our meshlet&#x27;s vertices range from 10.2041313123 to 84.382543538, do we really need to know that a vertex happens to be stored at &lt;em&gt;exactly&lt;&#x2F;em&gt; 57.594392822? We could pick some arbitrary amount of precision to round each of our vertices to, say four decimal places, resulting in 57.5944. Less precision means a less precise range, which means our bit size will be smaller.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;quantize_error.png&quot; alt=&quot;Too much quantization&quot; &#x2F;&gt;
&lt;em&gt;Don&#x27;t quantize too much, or you&#x27;ll get bugs!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Better yet, lets pick some factor &lt;code&gt;q = 2^p&lt;&#x2F;code&gt;, where &lt;code&gt;p&lt;&#x2F;code&gt; is some arbitrary &lt;code&gt;u8&lt;&#x2F;code&gt; integer. Now, lets snap each vertex to the nearest point on the grid that&#x27;s a multiple of &lt;code&gt;1&#x2F;q&lt;&#x2F;code&gt;, and then store the vertex as the number of &quot;steps&quot; of size &lt;code&gt;1&#x2F;q&lt;&#x2F;code&gt; that we took from the origin to reach the snapped vertex position (a fixed-point representation). E.g. if we say &lt;code&gt;p = 4&lt;&#x2F;code&gt;, then we&#x27;re quantizing to a grid with a resolution of &lt;code&gt;1&#x2F;16&lt;&#x2F;code&gt;, so &lt;code&gt;v = 57.594392822&lt;&#x2F;code&gt; would snap to &lt;code&gt;v = 57.625&lt;&#x2F;code&gt; (throwing away some unnecessary precision) and we would store that as &lt;code&gt;v = round(57.594392822 &#x2F; (1&#x2F;16)) = i32(57.594392822 * 16 + 0.5) = 922&lt;&#x2F;code&gt;. This is once again easily reversible in our shader so long as we have our factor &lt;code&gt;p&lt;&#x2F;code&gt;: &lt;code&gt;922 &#x2F; 2^4 = 57.625&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The factor &lt;code&gt;p&lt;&#x2F;code&gt; we choose is not particularly important. I set it to 4 by default (with an additional factor to convert from Bevy&#x27;s meters to the more appropriate-for-this-use-case unit of centimeters), but users can choose a good value themselves if 4 is too high (unnecessary precision = larger bit sizes and therefore larger asset sizes), or too low (visible mesh deformity from snapping the vertices too-coarsely). Nanite has an automatic heuristic that I assume is based on some kind of triangle surface area to mesh size ratio, but also lets users choose &lt;code&gt;p&lt;&#x2F;code&gt; manually. The important thing to note is that you should &lt;em&gt;not&lt;&#x2F;em&gt; choose &lt;code&gt;p&lt;&#x2F;code&gt; per-meshlet, i.e. &lt;code&gt;p&lt;&#x2F;code&gt; should be the same for every meshlet within the mesh. Otherwise, you&#x27;ll end up with cracks between meshlets.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we can combine all three of these tricks. We can quantize our meshlet&#x27;s vertices, find the per-axis min&#x2F;max values and remap to a better range, and then store as a packed bitstream using the minimum number of bits for the range. The final code to compress a meshlet&#x27;s vertex positions is below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quantization_factor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; vertex_position_quantization_factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;CENTIMETERS_PER_METER&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; min_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;IVec3::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; max_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;IVec3::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Lossy vertex compression
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; quantized_positions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span&gt;IVec3::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ZERO&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i, vertex_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; meshlet_vertex_ids.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Quantize position to a fixed-point IVec3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quantized_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; quantization_factor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_ivec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    quantized_positions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; quantized_position;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Compute per X&#x2F;Y&#x2F;Z-channel quantized position min&#x2F;max for this meshlet
&lt;&#x2F;span&gt;&lt;span&gt;    min_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; min_quantized_position_channels.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;quantized_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    max_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; max_quantized_position_channels.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;quantized_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate bits needed to encode each quantized vertex position channel based on the range of each channel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; max_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; min_quantized_position_channels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits_per_vertex_position_channel_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;range.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits_per_vertex_position_channel_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;range.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits_per_vertex_position_channel_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;range.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Lossless encoding of vertex positions in the minimum number of bits per channel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; quantized_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; quantized_positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_vertex_ids.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Remap [range_min, range_max] IVec3 to [0, range_max - range_min] UVec3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;quantized_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; min_quantized_position_channels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_uvec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Store as a packed bitstream
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extend_from_bitslice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;position.x.view_bits::&amp;lt;Lsb0&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;bits_per_vertex_position_channel_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extend_from_bitslice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;position.y.view_bits::&amp;lt;Lsb0&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;bits_per_vertex_position_channel_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_positions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extend_from_bitslice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;position.z.view_bits::&amp;lt;Lsb0&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;bits_per_vertex_position_channel_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;position-decoding&quot;&gt;Position Decoding&lt;a class=&quot;zola-anchor&quot; href=&quot;#position-decoding&quot; aria-label=&quot;Anchor link for: position-decoding&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Before this PR, our meshlet metadata was this 16-byte type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Meshlet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The offset within the parent mesh&amp;#39;s [`MeshletMesh::vertex_ids`] buffer where the indices for this meshlet begin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start_vertex_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The offset within the parent mesh&amp;#39;s [`MeshletMesh::indices`] buffer where the indices for this meshlet begin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start_index_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The amount of vertices in this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The amount of triangles in this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;triangle_count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all the custom compression, we need to store some more info, giving us this carefully-packed 32-byte type (a little bit bigger, but reducing size for vertices is much more important than reducing the size of the meshlet metadata):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Meshlet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The bit offset within the parent mesh&amp;#39;s [`MeshletMesh::vertex_positions`] buffer where the vertex positions for this meshlet begin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start_vertex_position_bit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The offset within the parent mesh&amp;#39;s [`MeshletMesh::vertex_normals`] and [`MeshletMesh::vertex_uvs`] buffers
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; where non-position vertex attributes for this meshlet begin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start_vertex_attribute_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The offset within the parent mesh&amp;#39;s [`MeshletMesh::indices`] buffer where the indices for this meshlet begin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start_index_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The amount of vertices in this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; The amount of triangles in this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;triangle_count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Unused (needed to satisfy alignment rules).
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Number of bits used to to store the X channel of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bits_per_vertex_position_channel_x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Number of bits used to to store the Y channel of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bits_per_vertex_position_channel_y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Number of bits used to to store the Z channel of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bits_per_vertex_position_channel_z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Power of 2 factor used to quantize vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_position_quantization_factor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Minimum quantized X channel value of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min_vertex_position_channel_x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Minimum quantized Y channel value of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min_vertex_position_channel_y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Minimum quantized Z channel value of vertex positions within this meshlet.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min_vertex_position_channel_z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To fetch a single vertex from the bitstream (we we bind as an array of &lt;code&gt;u32&lt;&#x2F;code&gt;s), we can use this function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_meshlet_vertex_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meshlet&lt;&#x2F;span&gt;&lt;span&gt;: ptr&amp;lt;function, Meshlet&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Get bitstream start for the vertex
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; unpacked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; unpack4xU8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((*&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.packed_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; unpacked.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits_per_vertex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel.z;
&lt;&#x2F;span&gt;&lt;span&gt;    var start_bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (*&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.start_vertex_position_bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ (&lt;&#x2F;span&gt;&lt;span&gt;vertex_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; bits_per_vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Read each vertex channel from the bitstream
&lt;&#x2F;span&gt;&lt;span&gt;    var vertex_position_packed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;0u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;var i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; 3u; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lower_word_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; start_bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 32u;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lower_word_bit_offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; start_bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; 31u;
&lt;&#x2F;span&gt;&lt;span&gt;        var next_32_bits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_vertex_positions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;lower_word_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; lower_word_bit_offset;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; lower_word_bit_offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 32u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            next_32_bits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_vertex_positions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;lower_word_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;32u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; lower_word_bit_offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        vertex_position_packed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; extractBits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;next_32_bits, 0u, bits_per_channel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        start_bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; bits_per_channel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Remap [0, range_max - range_min] vec3&amp;lt;u32&amp;gt; to [range_min, range_max] vec3&amp;lt;f32&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    var vertex_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_position_packed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.min_vertex_position_channel_x,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.min_vertex_position_channel_y,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.min_vertex_position_channel_z,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Reverse vertex quantization
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_position_quantization_factor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; unpacked.w;
&lt;&#x2F;span&gt;&lt;span&gt;    vertex_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;1u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; vertex_position_quantization_factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;CENTIMETERS_PER_METER&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; vertex_position;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This could probably be written better - right now we&#x27;re doing a minimum of 3 &lt;code&gt;u32&lt;&#x2F;code&gt; reads (1 per channel), but there&#x27;s a good chance that a single &lt;code&gt;u32&lt;&#x2F;code&gt; read will contain the data for all 3 channels of the vertex. Something to optimize in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;other-attributes&quot;&gt;Other Attributes&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-attributes&quot; aria-label=&quot;Anchor link for: other-attributes&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we&#x27;ve done positions, lets talk about how to handle other vertex attributes.&lt;&#x2F;p&gt;
&lt;p&gt;Tangents we already removed in the last PR.&lt;&#x2F;p&gt;
&lt;p&gt;For UVs, I currently store them uncompressed. I could have maybe used half-precision floating point values, but I am wary of artifacts resulting from the reduced precision, so for right now it&#x27;s a full &lt;code&gt;vec2&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt;. This is a big opportunity for future improvement.&lt;&#x2F;p&gt;
&lt;p&gt;Normals are a bit more interesting. They start as &lt;code&gt;vec3&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt;. I first perform an octahedral encoding on them, bringing them down to a &lt;code&gt;vec2&amp;lt;f32&amp;gt;&lt;&#x2F;code&gt; near-losessly. I then give up some precision to reduce the size even further by using &lt;code&gt;pack2x16snorm()&lt;&#x2F;code&gt;, bringing it down to a &lt;code&gt;vec2&amp;lt;f16&amp;gt;&lt;&#x2F;code&gt;, or a packed &lt;code&gt;u32&lt;&#x2F;code&gt;. These operations are easily reversed in the shader using the built-in &lt;code&gt;unpack2x16snorm()&lt;&#x2F;code&gt; function, and then the simple octahedral decode step.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;em&gt;did&lt;&#x2F;em&gt; try a bitstream encoding similiar to what I did for positions, but couldn&#x27;t get any smaller sizes than a simple &lt;code&gt;pack2x16snorm()&lt;&#x2F;code&gt;. I think with more time and motivation (I was getting burnt out by the end of this), I could have probably figured out a good variable-size octahedral encoding for normals as well. Something else to investigate in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;results&quot;&gt;Results&lt;a class=&quot;zola-anchor&quot; href=&quot;#results&quot; aria-label=&quot;Anchor link for: results&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;After all this, how much memory savings did we get?&lt;&#x2F;p&gt;
&lt;p&gt;Disk space is practically unchanged (maybe 2% smaller at best), but memory savings on a test mesh went from &lt;code&gt;110 MB&lt;&#x2F;code&gt; before this PR (without duplicating the vertex data per-meshlet at all), to &lt;code&gt;64 MB&lt;&#x2F;code&gt; after this PR (copying and compressing vertex data per-meshlet). This is a huge savings (&lt;code&gt;42%&lt;&#x2F;code&gt; smaller), with room for future improvements! I&#x27;ll definitely be coming back to this at some point in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Additional references:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2021&#x2F;Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf#page=128&quot;&gt;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2021&#x2F;Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf#page=128&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2404.06359&quot;&gt;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2404.06359&lt;&#x2F;a&gt; (also compresses the index buffer, not just vertices!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;daniilvinn.github.io&#x2F;2024&#x2F;05&#x2F;04&#x2F;omniforce-vertex-quantization.html&quot;&gt;https:&#x2F;&#x2F;daniilvinn.github.io&#x2F;2024&#x2F;05&#x2F;04&#x2F;omniforce-vertex-quantization.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gpuopen.com&#x2F;download&#x2F;publications&#x2F;DGF.pdf&quot;&gt;https:&#x2F;&#x2F;gpuopen.com&#x2F;download&#x2F;publications&#x2F;DGF.pdf&lt;&#x2F;a&gt; (more focused on raytracing than rasterization)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;improved-lod-selection-heuristic&quot;&gt;Improved LOD Selection Heuristic&lt;a class=&quot;zola-anchor&quot; href=&quot;#improved-lod-selection-heuristic&quot; aria-label=&quot;Anchor link for: improved-lod-selection-heuristic&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15846&quot;&gt;#15846&lt;&#x2F;a&gt; changes how we select the LOD cut.&lt;&#x2F;p&gt;
&lt;p&gt;Previously, I was building a bounding sphere around each group with radius based on the group error, and then projecting that to screen space to get the visible error in pixels.&lt;&#x2F;p&gt;
&lt;p&gt;That method worked, but isn&#x27;t entirely watertight. Where you place the bounding sphere center in the group is kind of arbitrary, right? And how do you ensure that the error projection is perfectly monotonic, if you have these random bounding spheres in each group?&lt;&#x2F;p&gt;
&lt;p&gt;Arseny Kapoulkine once again helped me out here. As part of meshoptimizer, they started experimenting with their &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeux&#x2F;meshoptimizer&#x2F;blob&#x2F;d93419ced5956307f41333c500c8037c8b861d59&#x2F;demo&#x2F;nanite.cpp&quot;&gt;nanite.cpp&lt;&#x2F;a&gt; demo. In this PR, I copied his code for LOD cut selection.&lt;&#x2F;p&gt;
&lt;p&gt;To determine the group bounding sphere, you simply build a new bounding sphere enclosing all of the group&#x27;s childrens&#x27; bounding spheres. The first group you build out of LOD 0 uses the LOD 0 culling bounding spheres around each meshlet. This way, you ensure that both the error (using the existing method of taking the max error among the group and group children), &lt;em&gt;and&lt;&#x2F;em&gt; the bounding sphere are monotonic. Error is no longer stored in the radius of the bounding sphere, and is instead stored as a seperate f16 (lets us pack both group and parent group error into a single u32, and the lost precision is irrelevant). This also gave me the opportunity to clean up the code now that I understand the theory better, and clarify the difference between meshlets and meshlet groups better.&lt;&#x2F;p&gt;
&lt;p&gt;For projecting the error at runtime, we now use the below function. I can&#x27;t claim to understand how it works that well (and it&#x27;s been a few weeks since I last looked at it), but it does work. The end result is that we get more seamless LOD changes, and our mesh to meshlet mesh converter is more robust (it used to crash on larger meshes, due to a limitation in the code for how I calculated group bounding spheres).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;zeux&#x2F;meshoptimizer&#x2F;blob&#x2F;1e48e96c7e8059321de492865165e9ef071bffba&#x2F;demo&#x2F;nanite.cpp#L115
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lod_error_is_imperceptible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;lod_sphere&lt;&#x2F;span&gt;&lt;span&gt;: MeshletBoundingSphere, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;simplification_error&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_from_local&lt;&#x2F;span&gt;&lt;span&gt;: mat4x4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;world_scale&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sphere_world_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;lod_sphere.center, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; radius_world_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; lod_sphere.radius;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error_world_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; simplification_error;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    var projected_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; error_world_space;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Perspective
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; distance_to_closest_point_on_sphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sphere_world_space, view.world_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&lt;&#x2F;span&gt;&lt;span&gt; radius_world_space;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; distance_to_closest_point_on_sphere_clamped_to_znear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;distance_to_closest_point_on_sphere, view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        projected_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;=&lt;&#x2F;span&gt;&lt;span&gt; distance_to_closest_point_on_sphere_clamped_to_znear;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    projected_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    projected_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; view.viewport.w;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; projected_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An interesting side note, finding the minimal bounding sphere around a set of other bounding sphere turns out to be a very difficult problem. Kaspar Fischer&#x27;s thesis &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;document?repid=rep1&amp;amp;type=pdf&amp;amp;doi=f7688a9174e880437e2f467add73905245f4c88c&quot;&gt;&quot;The smallest enclosing balls of balls&quot;&lt;&#x2F;a&gt; covers the math, and it&#x27;s very complex. I copied Kapoulkine&#x27;s approximate, much simpler method.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;improved-mesh-to-meshletmesh-conversion&quot;&gt;Improved Mesh to MeshletMesh Conversion&lt;a class=&quot;zola-anchor&quot; href=&quot;#improved-mesh-to-meshletmesh-conversion&quot; aria-label=&quot;Anchor link for: improved-mesh-to-meshletmesh-conversion&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15886&quot;&gt;#15886&lt;&#x2F;a&gt; brings more improvements to the mesh to meshlet mesh converter.&lt;&#x2F;p&gt;
&lt;p&gt;Following on from the last PR, I again took a bunch of improvements from the meshoptimizer nanite.cpp demo:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider only the vertex position (and ignore things like UV seams) when determining meshlet groups&lt;&#x2F;li&gt;
&lt;li&gt;Add back stuck meshlets that either failed to simplify, or failed to group, to the processing queue to try again at a later LOD. Dosen&#x27;t seem to be much of an improvement though.&lt;&#x2F;li&gt;
&lt;li&gt;Provide a seed to METIS to make the meshlet mesh conversion fully deterministic. I didn&#x27;t realize METIS even had options before now.&lt;&#x2F;li&gt;
&lt;li&gt;Target groups of 8 meshlets instead of 4. This improved simplification quality a lot! Nanite does groups of size 8-32, probably based on some kind of heuristic, which is probably worth experimenting with in the future.&lt;&#x2F;li&gt;
&lt;li&gt;Manually lock only vertices belonging to meshlet group borders, instead of the full toplogical group border that meshoptimizer&#x27;s &lt;code&gt;LOCK_BORDER&lt;&#x2F;code&gt; flag does.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With all of these changes combined, we can finally reliably get down to a single meshlet (or at least 1-3 meshlets for larger meshes) at the highest LOD!&lt;&#x2F;p&gt;
&lt;p&gt;The last item on the list in particular is a &lt;em&gt;huge&lt;&#x2F;em&gt; improvement. With meshoptimizer&#x27;s &lt;code&gt;LOCK_BORDER&lt;&#x2F;code&gt; flag, the entire edge of the mesh will be locked. That means that at the most simplified LOD level, the entire border of the original mesh will be preserved. You will pretty much never be able to reduce down to 1 meshlet with this constraint. Using manual vertex locks to only lock vertices belonging to shared edges between meshlets (regardless of whether or not they&#x27;re on the original mesh border) fixes this issue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;faster-fill-cluster-buffers-pass&quot;&gt;Faster Fill Cluster Buffers Pass&lt;a class=&quot;zola-anchor&quot; href=&quot;#faster-fill-cluster-buffers-pass&quot; aria-label=&quot;Anchor link for: faster-fill-cluster-buffers-pass&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;15955&quot;&gt;#15955&lt;&#x2F;a&gt; improves the speed of the fill cluster buffers pass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;speeding-up&quot;&gt;Speeding Up&lt;a class=&quot;zola-anchor&quot; href=&quot;#speeding-up&quot; aria-label=&quot;Anchor link for: speeding-up&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, I improved rasterization performance, meshlet mesh building, and asset storage and loading. The Bevy 0.15 release was coming up, people were winding down features in favor of testing the release candidates, and I wasn&#x27;t going to have the time (or, the motivation) to do another huge PR.&lt;&#x2F;p&gt;
&lt;p&gt;While looking at some small things I could improve, I ended up talking with Kirill Bazhenov about how he manages per-instance (entity) GPU data in his &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8gwPw1fySMU&quot;&gt;Esoterica&lt;&#x2F;a&gt; renderer.&lt;&#x2F;p&gt;
&lt;p&gt;To recap the problem we had in the last post, uploading 8 bytes (instance ID + meshlet ID) per cluster to the GPU was way too expensive. The solution I came up with was to dispatch a compute shader thread per cluster, have it perform a binary search on an array of per-instance data to find the instance and meshlet it belongs to, and then write out the instance and meshlet IDs. This way, we only had to upload 8 bytes per &lt;em&gt;instance&lt;&#x2F;em&gt; to the GPU, and then the cluster -&amp;gt; instance ID + meshlet ID write outs would be VRAM -&amp;gt; VRAM writes, which are much faster than RAM -&amp;gt; VRAM uploads. This was the fill cluster buffers pass in Bevy 0.14.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not &lt;em&gt;super&lt;&#x2F;em&gt; fast, but it&#x27;s also not the bottleneck, and so for a while I was fine leaving it as-is. Kirill, however, showed me a much better way.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of having our compute shader operate on a list of clusters, and write out the two IDs per cluster, we can turn the scheme on its head. We can instead have the shader operate on a list of &lt;em&gt;instances&lt;&#x2F;em&gt;, and write out the two IDs for each cluster within the instance. After all, each instance already has the list of meshlets it has, so writing out the cluster (an instance of a meshlet) is easy!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of dispatching one thread per cluster, now we&#x27;re going to dispatch one workgroup per instance, with each workgroup having 1024 threads (the maximum allowed). Instead of uploading a prefix-sum of meshlet counts per instance, now we&#x27;re going to upload just a straight count of meshlets per instance (we&#x27;re still only uploading 8 bytes per instance total).&lt;&#x2F;p&gt;
&lt;p&gt;In the shader, each workgroup can load the 8 bytes of data we uploaded for the instance it&#x27;s processing.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; workgroup_id.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_meshlet_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_meshlet_counts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_meshlet_slice_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_meshlet_slice_starts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, the first thread in each workgroup can reserve space in the output buffers for its instance&#x27;s clusters via an atomic counter, and broadcast the start index to the rest of the workgroup.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;var&amp;lt;workgroup&amp;gt; cluster_slice_start_workgroup: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Reserve cluster slots for the instance and broadcast to the workgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; local_invocation_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; 0u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cluster_slice_start_workgroup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; atomicAdd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_global_cluster_count, instance_meshlet_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_slice_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; workgroupUniformLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cluster_slice_start_workgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can have the workgroup loop over its instance&#x27;s clusters, and for each one, write out its instance ID (which we already have, since it&#x27;s just the workgroup ID) and meshlet ID (the instance&#x27;s first meshlet ID, plus the loop counter). Each thread will handle 1 cluster, and the workgroup as a whole will loop enough times to write out all of the instance&#x27;s clusters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Loop enough times to write out all the meshlets for the instance given that each thread writes 1 meshlet in each iteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;var clusters_written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u; clusters_written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; instance_meshlet_count; clusters_written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; 1024u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate meshlet ID within this instance&amp;#39;s MeshletMesh to process for this thread
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clusters_written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; local_invocation_index;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; instance_meshlet_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Find the overall cluster ID in the global cluster buffer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cluster_slice_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Find the overall meshlet ID in the global meshlet buffer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; instance_meshlet_slice_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Write results to buffers
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; instance_id;
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The shader is now very efficient - the workgroup as a whole, once it reserves space for its clusters, is just repeatedly performing contiguous reads from and writes to global GPU memory.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, in a test scene with 1041 instances with 32217 meshlets per instance, we went from 0.55ms to 0.40ms, a small 0.15ms savings. NSight now shows that we&#x27;re at 95% VRAM throughput, and that we&#x27;re bound by global memory operations. The speed of this pass is now basically dependent on our GPU&#x27;s bandwidth - there&#x27;s not much I could do better, short of reading and writing less data entirely.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hitting-a-bump&quot;&gt;Hitting a Bump&lt;a class=&quot;zola-anchor&quot; href=&quot;#hitting-a-bump&quot; aria-label=&quot;Anchor link for: hitting-a-bump&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;In the process of testing this PR, I ran into a rather confusing bug. The new fill cluster buffers pass worked on some smaller test scenes, but spawning 1042 instances with 32217 meshlets per instance (cliff mesh) lead to the below glitch. It was really puzzling - only some instances would be affected (concentrated in the same region of space), and the clusters themselves appeared to be glitching and changing each frame.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;cluster_limit.png&quot; alt=&quot;Glitched mesh&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Debugging the issue was complicated by the fact that the rewritten fill cluster buffers code is no longer deterministic. Clusters get written in different orders depending on how the scheduler schedules workgroups, and the order of the atomic writes. That meant that every time I clicked on a pass in RenderDoc to check it&#x27;s output, the output order would completely change as RenderDoc replayed the entire command stream up until that point.&lt;&#x2F;p&gt;
&lt;p&gt;Since using a debugger wasn&#x27;t stable enough to be useful, I tried to think the logic through. My first thought was that my rewritten code was subtly broken, but testing on mainline showed something alarming - the issue persisted. Testing several old PRs showed that it went back for several PRs. It couldn&#x27;t have been due to any recent code changes.&lt;&#x2F;p&gt;
&lt;p&gt;It took me a week or so of trial and error, and debugging on mainline (which did have a stable output order since it used the old fill cluster buffers shader), but I eventually made the following observations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1041 cliffs: rendered correctly&lt;&#x2F;li&gt;
&lt;li&gt;1042 cliffs: did &lt;em&gt;not&lt;&#x2F;em&gt; render correctly, with 1 glitched instance&lt;&#x2F;li&gt;
&lt;li&gt;1041 + N cliffs: the last N being spawned glitched out&lt;&#x2F;li&gt;
&lt;li&gt;1042+ instances of a different mesh with much less meshlets than the cliff: &lt;em&gt;did&lt;&#x2F;em&gt; render correctly&lt;&#x2F;li&gt;
&lt;li&gt;1042+ cliffs on the PR before I increased meshlet size to 255v&#x2F;128t: rendered correctly&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The issue turned out to be overflow of cluster ID. The output of the culling pass, and the data we store in the visbuffer, is cluster ID + triangle ID packed together in a single u32. After increasing the meshlet size, it was 25 bits for the cluster ID, and 7 bits for the triangle ID (2^7 = 128 triangles max).&lt;&#x2F;p&gt;
&lt;p&gt;Doing the math, 1042 instances * 32217 meshlets = 33570114 clusters. 2^25 - 33570114 = -15682. We had overflowed the cluster limit by 15682 clusters. This meant that the cluster IDs we were passing around were garbage values, leading to glitchy rendering on any instances we spawned after the first 1041.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously this is a problem - the whole point of virtual geometry is to make rendering independent of scene complexity, yet now we have a rather low limit of 2^25 clusters in the scene.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is to never store data per cluster in the scene, and only store data per &lt;em&gt;visible&lt;&#x2F;em&gt; cluster in the scene, i.e. clusters post LOD selection and culling. Not necessarily visible on screen, but visible in the sense that we&#x27;re going to rasterize them. Doing so would require a large amount of architectural changes, however, and is not going to be a simple and easy fix. For now, I&#x27;ve documented the limitation, and merged this PR confident that it&#x27;s not a regression.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-rasterization-bugfixes&quot;&gt;Software Rasterization Bugfixes&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-rasterization-bugfixes&quot; aria-label=&quot;Anchor link for: software-rasterization-bugfixes&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;16049&quot;&gt;#16049&lt;&#x2F;a&gt; fixes some glitches in the software rasterizer.&lt;&#x2F;p&gt;
&lt;p&gt;While testing out some scenes to prepare for the release, I discovered some previously-missed bugs with software rasterization. When zooming in to the scene, sometimes triangles would randomly glitch and cover the whole screen, leading to massive slowdowns (remember the software rasterizer is meant to operate on small triangles only). Similarly, when zooming out, sometimes there would be single stray pixels rendered that didn&#x27;t belong. These issues didn&#x27;t occur with only hardware rasterization enabled.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;stray_pixels.png&quot; alt=&quot;Stray pixels glitch&quot; &#x2F;&gt;
&lt;em&gt;Stray pixels on the tops of the pawns and king.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;The stray pixels turned out to be due to two issues. The first bug is in how I calculated the bounding box around each triangle. I wasn&#x27;t properly accounting for triangles that would be partially on-screen, and partially off-screen. I changed my bounding box calculations to stick to floating point, and clamped negative bounds to 0 to fix. The second bug is that I didn&#x27;t perform any backface culling in the software rasterizer, and ignoring it does not lead to valid results. If you want a double-sided mesh, then you need to explicitly check for backfacing triangles and invert them. If you want backface culling (I do), then you need to reject the triangle if it&#x27;s backfacing. Ignoring it turned out to not be an option - skipping backface culling earlier turned out to have bitten me :).&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;fullscreen_triangle.png&quot; alt=&quot;Fullscreen triangle glitch&quot; &#x2F;&gt;
&lt;em&gt;The large green and orange triangles aren&#x27;t supposed to be there.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;The fullscreen triangles was trickier to figure out, but I ended up narrowing it down to near plane clipping. Rasterization math, specifically the homogenous divide, has a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Singularity_(mathematics)&quot;&gt;singularity&lt;&#x2F;a&gt; when z = 0. Normally, the way you solve this is by clipping to the near plane, which is a frustum plane positioned slightly in front of z = 0. As long as you provide the plane, GPU rasterizers handle near plane clipping for you automatically. In my software rasterizer, however, I had of course not accounted for near plane clipping. That meant that we were getting Nan&#x2F;Infinity vertex positions due to the singularity during the homogenous divide, which led to the garbage triangles we were seeing.&lt;&#x2F;p&gt;
&lt;p&gt;Proper near plane clipping is somewhat complicated (slow), and should not be needed for most clusters. Rather than have our software rasterizer handle near plane clipping, we&#x27;re instead going to have the culling pass detect which clusters intersect the near plane, and put them in the hardware rasterization queue regardless of size. The fix for this is just two extra lines.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Before
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_is_small &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Software raster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Hardware raster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; After
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; not_intersects_near_plane &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;view.frustum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;4u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, culling_bounding_sphere_center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; culling_bounding_sphere_radius;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_is_small &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; not_intersects_near_plane &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Software raster
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Hardware raster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these changes, software raster is now visibly bug-free.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;normal-aware-lod-selection&quot;&gt;Normal-aware LOD Selection&lt;a class=&quot;zola-anchor&quot; href=&quot;#normal-aware-lod-selection&quot; aria-label=&quot;Anchor link for: normal-aware-lod-selection&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;PR &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;16111&quot;&gt;#16111&lt;&#x2F;a&gt; improves how we calculate the LOD cut to account for vertex normals.&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the Bevy 0.15&#x27;s development cycle, meshoptimizer 0.22 was released, bringing some simplification improvements. Crucially, it greatly improves &lt;code&gt;meshopt_simplifyWithAttributes()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I now use this function to pass vertex normals into the simplifier, meaning that the deformation error the simplifier outputs (which we feed directly into the LOD cut selection shader) accounts for not only position deformation, but also normal deformation.&lt;&#x2F;p&gt;
&lt;p&gt;Without this change, before this PR, visualizing the pixel positions was near-seamless as the LOD cut changed when you zoomed in or out. Pixel normals, however, had visible differences between LOD cuts. After this PR, normals are now near-seamless too.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s still work to be done in this area - I&#x27;m not currently accounting for UV coordinate deformation, and the weights I chose for position vs normal influence are completely arbitrary. The Nanite presentation talks about this problem a lot - pre-calculating an error amount that perfectly accounts for every aspect of human perception, for meshes with arbitrary materials, is a &lt;em&gt;really&lt;&#x2F;em&gt; hard problem. The best we can do is spend time tweaking heuristics, which I&#x27;ll leave for a future PR.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results-bevy-0-14-vs-0-15&quot;&gt;Results: Bevy 0.14 vs 0.15&lt;a class=&quot;zola-anchor&quot; href=&quot;#results-bevy-0-14-vs-0-15&quot; aria-label=&quot;Anchor link for: results-bevy-0-14-vs-0-15&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, I&#x27;d like to compare Bevy v0.14 to (what will soon release as) v0.15.&lt;&#x2F;p&gt;
&lt;p&gt;The test scene we&#x27;ll be comparing is 3375 instances of the Stanford bunny mesh arranged in a 15x15x15 cube, running at a resolution of 2240x1260 on an RTX 3080 locked to base clocks.&lt;&#x2F;p&gt;
&lt;p&gt;As an additional test scene, we&#x27;ll also be looking at 847 instances of the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.fab.com&#x2F;listings&#x2F;e16b2143-5512-4460-bd0c-9270c4c6df51&quot;&gt;Huge Icelandic Lava Cliff&lt;&#x2F;a&gt; quixel megascan asset arranged in an 11x11x7 rectangular prism. This asset was too big to process in Bevy v0.14, so for this scene we&#x27;ll only be looking at data from Bevy v0.15.&lt;&#x2F;p&gt;
&lt;center style=&quot;display: flex; flex-direction: column;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;0.14.png&quot; alt=&quot;Bunny scene screenshot v0.14&quot; &#x2F;&gt;
&lt;em&gt;Bunny scene in Bevy v0.14.&lt;&#x2F;em&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;0.15.png&quot; alt=&quot;Bunny scene screenshot v0.15&quot; &#x2F;&gt;
&lt;em&gt;Bunny scene in Bevy v0.15.&lt;&#x2F;em&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-11-14-virtual-geometry-bevy-0-15&#x2F;cliffs.png&quot; alt=&quot;Cliff scene screenshot v0.15&quot; &#x2F;&gt;
&lt;em&gt;Cliff scene in Bevy v0.15.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gpu-timings&quot;&gt;GPU Timings&lt;a class=&quot;zola-anchor&quot; href=&quot;#gpu-timings&quot; aria-label=&quot;Anchor link for: gpu-timings&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;GPU timings to render the visbuffer (so excluding shading, and any CPU work)&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse:collapse;border-color:#ccc;border-spacing:0;border:none&quot; class=&quot;tg&quot;&gt;&lt;thead&gt;
&lt;tr&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Pass&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.14&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;
&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Cliff v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Fill Cluster Buffers&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.30&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.12&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.31&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Culling First&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.99&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.19&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1.27&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Software Raster First&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.42&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.34&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Hardware Raster First&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;3.44&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.02&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Downsample Depth&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.03&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.03&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Culling Second&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.14&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.06&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.19&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Software Raster Second&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Hardware Raster Second&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;&amp;lt; 0.01&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Resolve Depth&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Resolve Material Depth&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Downsample Depth&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.03&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.03&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#FFF&quot;&gt;Total&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#FFF&quot;&gt;4.97 ms&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#FFF&quot;&gt;0.93 ms&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#FFF&quot;&gt;2.32 ms&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;dag-layout&quot;&gt;DAG Layout&lt;a class=&quot;zola-anchor&quot; href=&quot;#dag-layout&quot; aria-label=&quot;Anchor link for: dag-layout&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;table style=&quot;border-collapse:collapse;border-color:#ccc;border-spacing:0;border:none&quot; class=&quot;tg&quot;&gt;&lt;thead&gt;
&lt;tr&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;3&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.14&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;3&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;
&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;3&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Cliff v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;LOD Level&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets With 64 Triangles (full)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;LOD Level&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets With 128 Triangles (full)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;LOD Level&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F9F9F9&quot;&gt;Meshlets With 128 Triangles (full)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2251&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2250&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1126&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1125&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;15616&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;15615&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1320&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;931&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;608&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;517&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;7944&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;7610&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;672&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;383&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;310&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;251&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;4306&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;3535&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;373&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;172&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;162&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;129&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;2200&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1728&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;173&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;47&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;80&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;61&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1109&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;844&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;74&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;15&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;38&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;29&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;552&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;425&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;19&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;20&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;15&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;282&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;214&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;7&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;10&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;7&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;7&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;139&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;105&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;8&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;8&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;69&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;51&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;9&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;9&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;35&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;26&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;10&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;10&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;18&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;13&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;11&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;11&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;9&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;12&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;13&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;14&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#fff;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;disk-usage&quot;&gt;Disk Usage&lt;a class=&quot;zola-anchor&quot; href=&quot;#disk-usage&quot; aria-label=&quot;Anchor link for: disk-usage&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;table style=&quot;border-collapse:collapse;border-color:#ccc;border-spacing:0;border:none&quot; class=&quot;tg&quot;&gt;&lt;thead&gt;
&lt;tr&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.14&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Bunny v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;
&lt;th style=&quot;background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#333;background-color:#F0F0F0&quot;&gt;Cliff v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;thead&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;5.05 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3.61 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#f9f9f9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;49.83 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;memory-usage&quot;&gt;Memory Usage&lt;a class=&quot;zola-anchor&quot; href=&quot;#memory-usage&quot; aria-label=&quot;Anchor link for: memory-usage&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;table style=&quot;border-collapse:collapse;border-color:#ccc;border-spacing:0;border:none&quot; class=&quot;tg&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;background-color:#F0F0F0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Bunny v0.14&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#F0F0F0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Bunny v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;background-color:#F0F0F0;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:large;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Cliff v0.15&lt;&#x2F;span&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Data Type&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Size (bytes)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Data Type&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Size (bytes)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Data Type&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Size (bytes)&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Vertex Data&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;3505296&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Vertex Positions&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;590132&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Vertex Positions&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;8537220&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Vertex IDs&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;3651840&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Vertex Normals&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;788476&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Vertex Normals&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;10851996&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Vertex UVs&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;1576952&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Vertex UVs&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;21703992&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Indices&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;2738880&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Indices&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1374336&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Indices&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;19245696&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;16 * 4882 = 78112&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;32 * 2365 = 75680&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Meshlets&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;32 * 32288 = 1033216&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Bounding Spheres&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;234336&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Bounding Spheres&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;113520&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;Bounding Spheres&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#F9F9F9&quot;&gt;1549824&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Simplification Errors&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;9460&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;Simplification Errors&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#FFF;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;color:#333;background-color:#FFF&quot;&gt;129152&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Total&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;10.2 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Total&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;
&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;4.5 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;Total&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;background-color:#F9F9F9;border-color:#ccc;border-style:solid;border-width:0px;color:#333;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;text-align:center;vertical-align:top;word-break:normal&quot;&gt;&lt;span style=&quot;font-weight:bold&quot;&gt;63.0 MB&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;center&gt;
&lt;h3 id=&quot;discussion-asset&quot;&gt;Discussion - Asset&lt;a class=&quot;zola-anchor&quot; href=&quot;#discussion-asset&quot; aria-label=&quot;Anchor link for: discussion-asset&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;First, lets compare the DAG layout between the Stanford bunny in Bevy 0.14 and 0.15. In Bevy 0.14, with 64 triangles max per meshlet, we start with 2250 meshlets at LOD 0. In Bevy 0.15, with 128 triangles max per meshlet, we have exactly half as many at 1125.&lt;&#x2F;p&gt;
&lt;p&gt;In Bevy 0.14, the DAG has 7 levels, ending with 19 meshlets. In Bevy 0.15, the DAG has 12 levels, ending at a single meshlet! For an ideal DAG, we want half as many meshlets at each LOD level, resulting in half as many triangles at each level. That means that with 1125 meshlets at LOD level 0, we want &lt;code&gt;ceil(log2(1125)) = 11&lt;&#x2F;code&gt; additional levels, for 12 total. In Bevy 0.15, we have 12! Meanwhile in Bevy 0.14, we also want 12 levels, but fall short at only 7 levels. We clearly improved the DAG structure compared to the previous version.&lt;&#x2F;p&gt;
&lt;p&gt;Comparing meshlet fill rate (percentage of meshlets with the maximum number of triangles), both versions have an almost 100% fill rate at LOD 0 (the mesh is probably not a perfect multiple of the max triangle count). Meshoptimizer does a great job of equally partitioning triangles for the initial mesh.&lt;&#x2F;p&gt;
&lt;p&gt;However, looking at further LOD levels, Bevy 0.14 performs very badly, going down to an abysmal 20% fill rate at the lowest. Bevy 0.15 is a lot better, with the worst fill rate being 76%, and the variance being a lot lower. It&#x27;s still not perfect - a lot of the time we still have to deal with stuck triangles that never get simplified when processing complex meshes - but it&#x27;s good progress!&lt;&#x2F;p&gt;
&lt;p&gt;Memory and disk size are also much lower in Bevy 0.15 than Bevy 0.14, although a lot of this (but not all) comes down to the ~half as many overall meshlets in the DAG, meaning that there&#x27;s less data to store in the first place. Still, adding up the vertex info for Bevy 0.14 (vertex data + vertex IDs = &lt;code&gt;7.16 MB&lt;&#x2F;code&gt;) and for Bevy 0.15 (vertex positions + normals + UVs = &lt;code&gt;2.956 MB&lt;&#x2F;code&gt;) shows a clear reduction in memory usage for the same amount of triangles in the original mesh.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discussion-performance&quot;&gt;Discussion - Performance&lt;a class=&quot;zola-anchor&quot; href=&quot;#discussion-performance&quot; aria-label=&quot;Anchor link for: discussion-performance&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Of course, asset size dosen&#x27;t matter if performance is worse. After all, we could skip the additional LOD levels entirely to save on the cost of storing them, but we would get much worse runtime performance.&lt;&#x2F;p&gt;
&lt;p&gt;The good news is that comparing the bunny scene in Bevy 0.14 to Bevy 0.15, rendering got almost 5x faster!&lt;&#x2F;p&gt;
&lt;p&gt;Rasterization is the big immediate win. We were spending 3.44 ms on it in Bevy 0.14, and now only 0.42 ms on it in Bevy 0.15! Some of this comes down to software raster being faster than our non-mesh shader hardware raster, but a lot of it comes down to our improved DAG creation and LOD selection code. DAG building is really, really important - a huge chunk of your runtime performance comes down to building a good DAG, before you even start rendering!&lt;&#x2F;p&gt;
&lt;p&gt;Culling (which is also LOD selection) got a little bit faster as well, going from 0.99 ms to 0.19 ms in the first pass, and 0.14 to 0.06 ms in the second pass. The culling pass no longer has to write out a list of triangles for visible clusters - now it&#x27;s just writing a single cluster ID for each visible cluster, which is much faster.&lt;&#x2F;p&gt;
&lt;p&gt;The other big win for culling is that with ~half as many meshlets to process, we only have to do half the work, as evidenced by the second pass performing a little over twice as well (the second pass here is basically just measuring overhead from spawning threads per cluster, since it&#x27;s doing a single read + early-out for every single cluster as occlusion culling is near-perfect in  static scene like this).&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the cliff scene with a much larger amount of meshlets and triangles, concentrated into much fewer instances, we can see some interesting results. Rasterization is actually &lt;em&gt;faster&lt;&#x2F;em&gt; in this scene than the bunny scene by 0.08 ms, but the first culling pass takes a whopping 1.27 ms, up from only 0.19 ms. Ouch. We ideally want similiar timings no matter the type of scene, so that artists don&#x27;t have to care about things like number of triangles per mesh, but we&#x27;re not quite there yet. Culling is the clear bottleneck.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, fill cluster buffers got a little bit faster as well, going down from 0.30 ms to 0.12 ms, with a good chunk of the performance again coming from having half as many total clusters in the scene.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;a class=&quot;zola-anchor&quot; href=&quot;#roadmap&quot; aria-label=&quot;Anchor link for: roadmap&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I got a lot done in Bevy 0.15, but there&#x27;s still a &lt;em&gt;ton&lt;&#x2F;em&gt; left to do for Bevy 0.16 and beyond.&lt;&#x2F;p&gt;
&lt;p&gt;The major, immediate priority (once I&#x27;m rested and ready to work on virtual geometry again) will be improving the culling&#x2F;LOD selection pass. While cluster selection (I should rename the pass to that, that&#x27;s a good name now that I think of it) is an &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Embarrassingly_parallel&quot;&gt;embarrassingly parallel&lt;&#x2F;a&gt; problem in theory, in practice, having to dispatch a thread per cluster in the scene is an enormous waste of time. There can be million of clusters in the scene, and divergence and register usage on top of the sheer number of threads needed means that this pass is currently the biggest bottleneck.&lt;&#x2F;p&gt;
&lt;p&gt;The fix is to (like Nanite does) traverse a BVH (tree) of clusters, where we only need to process clusters up until they would be the wrong LOD, and then can immediately stop processing their children. Doing tree traversal on a GPU is very tricky, and doing it maximally efficient depends on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2109.06132v1&quot;&gt;undefined behavior&lt;&#x2F;a&gt; of GPU schedulers that not all GPUs have, so I expect to spend a lot of time tweaking this once I get something working.&lt;&#x2F;p&gt;
&lt;p&gt;The second major priority is getting rid of the need for the fill cluster buffers pass entirely. Besides letting us reclaim some more performance, the big win is that we could do away with the need to allocate buffers to hold instance ID + cluster ID per cluster in the scene, instead letting us store this data per &lt;em&gt;visible&lt;&#x2F;em&gt; (post LOD selection&#x2F;culling) cluster in the scene. Besides the obvious memory savings, it also saves us from running into the cluster ID limit issue that was limiting our scene size before. We would no longer need a unique ID for each cluster in the scene - just a unique ID for visible clusters only, post culling and LOD selection, which is a much smaller amount.&lt;&#x2F;p&gt;
&lt;p&gt;Besides cluster selection improvements, and improving on existing stuff, other big areas I could work on include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Streaming of meshlet vertex data (memory savings)&lt;&#x2F;li&gt;
&lt;li&gt;Disk-oriented asset compression (disk and load time savings)&lt;&#x2F;li&gt;
&lt;li&gt;Rendering clusters for all views at once (performance savings for shadow views)&lt;&#x2F;li&gt;
&lt;li&gt;Material shader optimizations (I haven&#x27;t spent any time at all on this yet)&lt;&#x2F;li&gt;
&lt;li&gt;Occlusion culling fixes (I plan to port Hans-Kristian Arntzen&#x27;s Granite renderer&#x27;s &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Themaister&#x2F;Granite&#x2F;blob&#x2F;7543863d2a101faf45f897d164b72037ae98ff74&#x2F;assets&#x2F;shaders&#x2F;post&#x2F;hiz.comp&quot;&gt;HiZ shader&lt;&#x2F;a&gt; to WGSL)&lt;&#x2F;li&gt;
&lt;li&gt;Tooling to make working with MeshletMeshes easier&lt;&#x2F;li&gt;
&lt;li&gt;Testing and improving CPU performance for large amounts of instances&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With any luck, in another few months I&#x27;ll be writing about some of these topics in the post for Bevy 0.16. See you then!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Further resources on Nanite-style virtual geometry:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2021&#x2F;Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf&quot;&gt;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2021&#x2F;Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jglrxavpok&#x2F;Carrot&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jglrxavpok&#x2F;Carrot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LVSTRI&#x2F;IrisVk&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;LVSTRI&#x2F;IrisVk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pettett&#x2F;multires&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pettett&#x2F;multires&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Scthe&#x2F;nanite-webgpu&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Scthe&#x2F;nanite-webgpu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ShawnTSH1229&#x2F;SimNanite&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ShawnTSH1229&#x2F;SimNanite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SparkyPotato&#x2F;radiance&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;SparkyPotato&#x2F;radiance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeux&#x2F;meshoptimizer&#x2F;blob&#x2F;master&#x2F;demo&#x2F;nanite.cpp&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;zeux&#x2F;meshoptimizer&#x2F;blob&#x2F;master&#x2F;demo&#x2F;nanite.cpp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bevy&#x27;s Fourth Birthday - A Year of Meshlets</title>
		<published>2024-08-30T00:00:00+00:00</published>
		<updated>2024-08-30T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2024-08-30-bevy-fourth-birthday/" type="text/html"/>
		<id>https://jms55.github.io/posts/2024-08-30-bevy-fourth-birthday/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Written in response to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevys-fourth-birthday&quot;&gt;Bevy&#x27;s Fourth Birthday&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The subtitle of this post is &quot;Bevy&#x27;s Fourth Birthday; Already???&quot;. I feel like I &lt;em&gt;just&lt;&#x2F;em&gt; wrote Bevy&#x27;s &lt;em&gt;third&lt;&#x2F;em&gt; birthday reflections only a couple of months ago... time flies!&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been an awesome year, with a lot accomplished. Lets talk about that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-year-11-months-of-meshlets&quot;&gt;&lt;del&gt;A Year&lt;&#x2F;del&gt; 11 Months of Meshlets&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-year-11-months-of-meshlets&quot; aria-label=&quot;Anchor link for: a-year-11-months-of-meshlets&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;What have I been doing in Bevy in the last year? The answer is learning and reimplementing the techniques behind Nanite (virtual geometry). That&#x27;s mostly it.&lt;&#x2F;p&gt;
&lt;p&gt;No really - the first commit I can find related to Bevy&#x27;s meshlet feature (I need a better name for it...) is dated September 30th 2023. That&#x27;s a little less than 2 months since the time I wrote Bevy&#x27;s third birthday post, and around 11 months before the time of this writing.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;em&gt;did&lt;&#x2F;em&gt; work on some other stuff - PCF being the most notable feature, along with some optimizations like async pipeline compilation to prevent shader stutter, and some experimental work that didn&#x27;t pan out like solari and an improved render graph. But the large majority of my time spent has been on meshlets. In fact, this is going to be the third post on my blog in total - the first being Bevy&#x27;s third birthday post, and the second being a huge writeup on my initial learnings from implementing meshlets.&lt;&#x2F;p&gt;
&lt;p&gt;And I&#x27;m going to say it - I&#x27;m really proud of my work on this. It&#x27;s an absolutely &lt;em&gt;massive&lt;&#x2F;em&gt; project spanning so many different concepts. It&#x27;s been immensely rewarding, but also immensely draining. I&#x27;ve felt like quitting at times, and questioned the value it provides given that it&#x27;s an AAA focused feature for a non-AAA-ready engine. But I&#x27;ve stuck with the project, and right now I can say that it&#x27;s been worth it. Maybe it&#x27;s not production ready yet (it&#x27;s definitely not). Maybe there&#x27;s still a ton of major things left to do, let alone optimize and tweak. Maybe occlusion culling is broken and I&#x27;m really avoiding looking at it because it&#x27;s going to be painful to debug and fix; who can say?&lt;&#x2F;p&gt;
&lt;p&gt;But I&#x27;ve learned a lot (really, a &lt;em&gt;lot&lt;&#x2F;em&gt;). It got referenced during a SIGGRAPH 2024 Advances in Real-Time Rendering in Games presentation. Brian Karis (the author of Nanite) mentioned that they enjoyed my blog post explaining it. Getting recognition and seeing people enjoy it has been awesome! And most of all, I&#x27;m immensely proud of myself and the work I put into it. Meshlets has been a journey, but a worthwhile one.&lt;&#x2F;p&gt;
&lt;p&gt;Needless to say, in the next year, expect even more meshlet work. A lot has already been done since my last blog post - you&#x27;ll see some of that when Bevy 0.15 releases. Hopefully I&#x27;ll continue to be able to avoid burnout.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bevy-in-general&quot;&gt;Bevy in General&lt;a class=&quot;zola-anchor&quot; href=&quot;#bevy-in-general&quot; aria-label=&quot;Anchor link for: bevy-in-general&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy 0.12, 0.13, and 0.14 were all released in the last year, and have brought an absolutely massive amount of improvements. Nice job everyone! Bevy is not just one person, or even 10, and I think that has really shown this year more than ever.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike last year, I don&#x27;t have much I want to discuss in depth here, but there&#x27;s a few things I want to talk about, in no particular order.&lt;&#x2F;p&gt;
&lt;p&gt;Alice was hired (thank you sponsors) as Bevy&#x27;s project manager. She&#x27;s done an amazing job helping push forward PRs, coordinate developers, and generally get things done. I think I speak for all the Bevy devs when I say getting things done is nice. I&#x27;m looking forwards to more of that next year - thanks Alice!&lt;&#x2F;p&gt;
&lt;p&gt;One thing I&#x27;d like to see from project management going forwards is closing 90% of our open PRs. We have hundreds of open PRs, some dating back to 2021. There&#x27;s no way any of that is getting merged, and in my opinion, we should be closing old PRs and converting stuff we still want to open issues. The more open PRs we have, the harder it is for maintainers and new contributors to help review and push forward work. A &lt;em&gt;lot&lt;&#x2F;em&gt; of PRs end up rotting, and we&#x27;re losing contributors sadly. I&#x27;ve started this process for PRs labeled rendering, but there&#x27;s still a lot left to do, and a bunch of PRs that need SME or maintainer decisions. Gamedev is a bit unique given the extremely wide range of subjects (rendering, physics, assets, game logic, artist tooling, etc), but maybe there are things we can learn from other large open source projects. Blender, Godot, others - any advice for us?&lt;&#x2F;p&gt;
&lt;p&gt;One of Bevy&#x27;s most requested features (including from me) is a GUI program (editor) for modifying, inspecting, and profiling scenes. A couple of months ago I volunteered to help coordinate and push forward editor-related work, and then uhh, pretty much stopped working on it a few weeks after. Turns out, I didn&#x27;t have the motivation to do both editor work, and meshlet work. Meshlet work ended up winning out. Sorry to everyone I let down on that. I &lt;em&gt;am&lt;&#x2F;em&gt; still excited to work on the editor, but unfortunately I&#x27;ve realized I&#x27;m not so motivated to work on more foundational work such as scene editing, asset processing, and especially UI frameworks. These subjects tend to circular around with out much real progress, and turns out I am not a leader able to push forward discussions in these areas.&lt;&#x2F;p&gt;
&lt;p&gt;Side note, I &lt;em&gt;also&lt;&#x2F;em&gt; released my own UI framework this year (competing with the tens of other Bevy UI projects). It&#x27;s called &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JMS55&#x2F;bevy_dioxus&#x2F;blob&#x2F;main&#x2F;examples&#x2F;demo.rs&quot;&gt;bevy_dioxus&lt;&#x2F;a&gt;, and it builds on top of the excellent Dioxus library to provide reactivity. Rendering is handled by spawning bevy_ui entities. No documentation, but it&#x27;s a fairly small amount of fairly clean code, and it&#x27;s usable and integrates well with Bevy&#x27;s ECS. No reinventing the wheel here. For a few weeks work, I&#x27;m pretty happy with the process of making it and how it turned out.&lt;&#x2F;p&gt;
&lt;p&gt;Rendering is in pretty good shape now. Still lots more to implement or improve, but it&#x27;s pretty usable! Going forwards, it would be nice to put more focus on documentation, ease of use, and ergonomics. The Material&#x2F;AsBindGroup API is pretty footgun-y and not always performant, and there&#x27;s a general lack of documentation for lower-level APIs besides &quot;ask existing developers how to use things&quot;. A new render graph that automatically handled resources could help a lot with this, along with more asset-driven material APIs, and there&#x27;s been some interest and design work in these space that I&#x27;m looking forward to.&lt;&#x2F;p&gt;
&lt;p&gt;Assets and asset processing needs a &lt;em&gt;lot&lt;&#x2F;em&gt; of work. Ignoring the editor (which will need to build on these APIs), Bevy still needs a lot of work on extending the asset processing API, and implementing asset workflows for baking lighting, compressing textures, etc. A real battle-tested end-to-end asset workflow, from artists to developers to built game, really needs developing. I&#x27;m hoping that this will be a bigger focus next year, in parallel with the editor.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solarn-t&quot;&gt;Solarn&#x27;t&lt;a class=&quot;zola-anchor&quot; href=&quot;#solarn-t&quot; aria-label=&quot;Anchor link for: solarn-t&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Last year I demoed a realtime, fully dynamic raytraced GI solution I called Bevy Solari... and now a year later I&#x27;ve written nothing else on it, and a lot about virtual geometry. What gives? Well, I did work on it for a few months more after that blog post, but the project kind of died for a variety of reasons.&lt;&#x2F;p&gt;
&lt;p&gt;I was using a custom, somewhat buggy fork of wgpu&#x2F;naga&#x2F;naga_oil, and it became very difficult to constantly rebase on top of Bevy&#x27;s and those project&#x27;s upstream branches. The approach I was using (screen space probes based on Lumen and GI-1.0, and later screen space radiance cascades) started souring on me for complexity and quality reasons. My world space radiance cache was completely broken (I&#x27;ve sinced learned what I was doing wrong, thanks Darius Bouma!) and I lost motivation to work on it. And finally I ended up starting meshlets, and later transitioned all of my time to it. So, Solari is dead, at least for now.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays I feel like ReSTIR-based techniques (ReSTIR DI and GI plus screen space denoisers) hold much more promise. DDGI is also a great solution that I initially discarded for quality reasons, but its pretty simple to implement, very easy to scale up or down in cost, and gives fairly decent results all things considered. DDGI is probably worth another consideration, not even necessarily for being the main Bevy Solari project, but as an easier project to start with, and more scalable alternative to ReSTIR. No reason both could not coexist.&lt;&#x2F;p&gt;
&lt;p&gt;If raytracing gets upstreamed into wgpu, I would happily pick this project back up, particularly as I start to feel the need for a break from meshlets.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;writing&quot;&gt;Writing&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing&quot; aria-label=&quot;Anchor link for: writing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Last year I finally started a blog... but didn&#x27;t end up writing much. Or I did, but 80% of it was concentrated into one really long, really time-consuming post. It took something like a month to write.&lt;&#x2F;p&gt;
&lt;p&gt;I also wrote a rather long post on reddit&#x27;s &#x2F;r&#x2F;rust about things I disliked in Rust (after using it for so long, and recently using a lot of Java developing an enterprise application) (I do still love Rust, that hasn&#x27;t changed). Surprisingly to me, a lot of people liked it and it sparked some interesting discussions. Seperate from the post&#x27;s contents, people also asked me if I had a blog where they could read more of my writing. I of course, had to tell them that yes I do, but it only has two posts, one of which is extremely niche and technical, so there&#x27;s not much all that much to read.&lt;&#x2F;p&gt;
&lt;p&gt;Needless to say, this year, I&#x27;d like to try to blog more. I&#x27;m going to try to get more writing out, and focus less on quality and spending so much time editing. Starting of course, with this post.&lt;&#x2F;p&gt;
&lt;p&gt;With my new focus on spending less time writing, I&#x27;m ending this post now without trying to find a conclusion that flows better. See everyone next year!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Virtual Geometry in Bevy 0.14</title>
		<published>2024-06-09T00:00:00+00:00</published>
		<updated>2024-06-09T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2024-06-09-virtual-geometry-bevy-0-14/" type="text/html"/>
		<id>https://jms55.github.io/posts/2024-06-09-virtual-geometry-bevy-0-14/</id>
		<content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;The 0.14 release of the open source &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&quot;&gt;Bevy&lt;&#x2F;a&gt; game engine is coming up, and with it, the release of an experimental virtual geometry feature that I&#x27;ve been working on for several months.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post, I&#x27;m going to give a technical deep dive into Bevy&#x27;s new &quot;meshlet&quot; feature, what improvements it brings, techniques I tried that did or did not work out, and what I&#x27;m looking to improve on in the future. There&#x27;s a lot that I&#x27;ve learned (and a &lt;em&gt;lot&lt;&#x2F;em&gt; of code I&#x27;ve written and rewritten multiple times), and I&#x27;d like to share what I learned in the hope that it will help others.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;showcase.png&quot; alt=&quot;Example scene for the meshlet renderer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post is going to be &lt;em&gt;very&lt;&#x2F;em&gt; long, so I suggest reading over it (and the Nanite slides) a couple of times to get a general overview of the pieces involved, before spending any time analyzing individual steps. At the time of this writing, my blog theme dosen&#x27;t have a table of contents sidebar that follows you as you scroll the page. I apologize for that. If you want to go back and reference previous sections as you read this post, I suggest using multiple browser tabs.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d also like to take a moment to thank &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LVSTRI&quot;&gt;LVSTRI&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;jglrxavpok.github.io&quot;&gt;jglrxavpok&lt;&#x2F;a&gt; for sharing their experiences with virtual geometry, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atlv24&quot;&gt;atlv24&lt;&#x2F;a&gt; for their help in several areas, especially for their work adding some missing features I needed to wgpu&#x2F;naga, other Bevy developers for testing and reviewing my PRs, Unreal Engine (Brian Karis, Rune Stubbe, Graham Wihlidal) for their &lt;em&gt;excellent&lt;&#x2F;em&gt; and highly detailed &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;advances.realtimerendering.com&#x2F;s2021&#x2F;Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf&quot;&gt;SIGGRAPH presentation&lt;&#x2F;a&gt;, and many more people than I can name who provided advice on this project.&lt;&#x2F;p&gt;
&lt;p&gt;Code for this feature can be found &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JMS55&#x2F;bevy&#x2F;tree&#x2F;ca2c8e63b9562f88c8cd7e1d88a17a4eea20aaf4&#x2F;crates&#x2F;bevy_pbr&#x2F;src&#x2F;meshlet&quot;&gt;on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re already familiar with Nanite, feel free to skip the next few sections of background info until you get to the Bevy-specific parts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-virtual-geometry&quot;&gt;Why Virtual Geometry?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-virtual-geometry&quot; aria-label=&quot;Anchor link for: why-virtual-geometry&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Before talking about what virtual geometry &lt;em&gt;is&lt;&#x2F;em&gt;, I think it&#x27;s worth looking at what problems it is trying to &lt;em&gt;solve&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lets go over the high level steps your typical &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.advances.realtimerendering.com&#x2F;s2015&#x2F;aaltonenhaar_siggraph2015_combined_final_footer_220dpi.pdf&quot;&gt;pre-2015 renderer&lt;&#x2F;a&gt; would perform to render some basic geometry. I&#x27;ve omitted some steps that aren&#x27;t relevant to this post such as uploading mesh and texture data, shadow map rendering, lighting, and other shading details.&lt;&#x2F;p&gt;
&lt;p&gt;First, on the CPU:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Frustum culling of instances outside of the camera&#x27;s view&lt;&#x2F;li&gt;
&lt;li&gt;Choosing the appropriate level of detail (LOD) for each instance&lt;&#x2F;li&gt;
&lt;li&gt;Sorting and batching instances into multiple draw lists&lt;&#x2F;li&gt;
&lt;li&gt;Recording draw calls into command buffers for each draw list&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then, on the GPU:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up GPU state according to the command buffers&lt;&#x2F;li&gt;
&lt;li&gt;Transforming vertices and rasterizing triangles&lt;&#x2F;li&gt;
&lt;li&gt;Depth testing triangle fragments&lt;&#x2F;li&gt;
&lt;li&gt;Shading visible fragments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now lets try taking this renderer, and feeding it a dense cityscape made of 500 million triangles, and 150 thousand instances of different meshes.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s going to be slow. Why? Lets look at some of the problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Frustum culling lets us skip preparing or drawing instances that are outside the camera&#x27;s frustum, but what if you have an instance that&#x27;s only partially visible? The GPU still needs to transform, clip, and process all vertices in the mesh. Or, what if the entire scene is in the camera&#x27;s frustum?&lt;&#x2F;li&gt;
&lt;li&gt;If one instance is in front of another, it&#x27;s a complete waste to draw an instance to the screen that will later be completely drawn over by another (overdraw).&lt;&#x2F;li&gt;
&lt;li&gt;Sorting, batching, and encoding the command buffers for all those instances are going to be slow. Each instance likely has a different vertex and index buffer, different set of textures to bind, different shader (pipeline) for vertex and fragment processing, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The GPU will spend time spinning down and spinning back up as it switches state between each draw call.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, it&#x27;s no longer 2015, there are a variety of techniques (some from before 2015, that I purposefully left out) to alleviate a lot of these issues. Deferred shading or a depth-only prepass means overdraw is less costly, bindless techniques and ubershaders reduce state switching, multi-draw can reduce draw count, etc.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are some more subtle issues that come up:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Storing all that mesh data in memory takes too much VRAM. Modern mid-tier desktop GPUs tend to have 8-12 GB of VRAM, which means all your mesh data and 4k textures need to be able to fit in that amount of storage.&lt;&#x2F;li&gt;
&lt;li&gt;LODs were one of the steps that were meant to help reduce the amount of geometry you were feeding a GPU. However, they come with some downsides: 1) The transition between LODs tends to be noticable, even with a crossfade effect, 2) Artists need to spend time producing and tweaking LODs from their initial high-poly meshes, and 3) Like frustum culling, they don&#x27;t help with the worst case of simply being close to a lot of high-poly geometry, unless you&#x27;re willing to cap out at a lower resolution than the artist&#x27;s original mesh.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s also another issue I&#x27;ve saved for last. Despite all the culling and batching and LODs, we still have &lt;em&gt;too much&lt;&#x2F;em&gt; geometry to draw every frame. We need a better way to deal with it than simple LODs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-virtual-geometry&quot;&gt;What is Virtual Geometry?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-virtual-geometry&quot; aria-label=&quot;Anchor link for: what-is-virtual-geometry&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;With the introduction of Unreal Engine 5 in 2021 came the introduction of a new technique called &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;nanite-virtualized-geometry-in-unreal-engine&quot;&gt;Nanite&lt;&#x2F;a&gt;. Nanite is a system where you can preprocess your non-deforming opaque meshes, and at runtime be able to very efficiently render them, largely solving the above problems with draw counts, memory limits, high-poly mesh rasterization, and the deficiencies of traditional LODs.&lt;&#x2F;p&gt;
&lt;p&gt;Nanite works by first splitting your base mesh into a series of meshlets - small, independent clusters of triangles. Nanite then takes those clusters, groups clusters together, and simplifies the groups into a smaller set of &lt;em&gt;new&lt;&#x2F;em&gt; clusters. By repeating this process, you get a tree of clusters where the leaves of the tree form the base mesh, and the root of the tree forms a simplified approximation of the base mesh.&lt;&#x2F;p&gt;
&lt;p&gt;Now at runtime, we don&#x27;t just have to render one level (LOD) of the tree. We can choose specific clusters from different levels of the tree so that if you&#x27;re close to one part of the mesh, it&#x27;ll render many high resolution clusters. If you&#x27;re far from a different part of the mesh, however, then that part will use a couple low resolution clusters that are cheaper to render. Unlike traditional LODs, which are all or nothing, part of the mesh can be low resolution, part of the mesh can be high resolution, and a third part can be somewhere in between - all at the time same time, all on a very granular level.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the transitions between LODs can be virtually imperceptible and extremely smooth, without extra rendering work. Traditional LODs typically have to hide transitions with crossfaded opacity between two levels.&lt;&#x2F;p&gt;
&lt;p&gt;Combine this LOD technique with some per-cluster culling, a visibility buffer, streaming in and out of individual cluster data to prevent high memory usage, a custom rasterizer, and a whole bunch of others parts, and you end up with a renderer that &lt;em&gt;can&lt;&#x2F;em&gt; deal with a scene made of 500 million triangles.&lt;&#x2F;p&gt;
&lt;p&gt;I mentioned before that meshes have to be opaque, and can&#x27;t deform or animate (for the initial release of Nanite in Unreal Engine 5.0 this is true, but it&#x27;s an area Unreal is working to improve). Nanite isn&#x27;t perfect - there are still limitations. But the ceiling of what&#x27;s feasible is a lot higher.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;virtual-geometry-in-bevy&quot;&gt;Virtual Geometry in Bevy&lt;a class=&quot;zola-anchor&quot; href=&quot;#virtual-geometry-in-bevy&quot; aria-label=&quot;Anchor link for: virtual-geometry-in-bevy&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now that the background is out of the way, lets talk about Bevy. For Bevy 0.14, I&#x27;ve written an initial implementation that largely copies the basic ideas of how Nanite works, without implementing every single optimization and technique. Currently, the feature is called meshlets (likely to change to virtual_geometry or something else in the future). In a minute, I&#x27;ll get into the actual frame breakdown and code for meshlets, but first lets start with the user-facing API.&lt;&#x2F;p&gt;
&lt;p&gt;Users wanting to use meshlets should compile with the &lt;code&gt;meshlet&lt;&#x2F;code&gt; cargo feature at runtime, and &lt;code&gt;meshlet_processor&lt;&#x2F;code&gt; cargo feature for preprocessing meshes (again, more on how that works later) into the special meshlet-specific format the meshlet renderer uses.&lt;&#x2F;p&gt;
&lt;p&gt;Enabling the &lt;code&gt;meshlet&lt;&#x2F;code&gt; feature unlocks a new module: &lt;code&gt;bevy::pbr::experimental::meshlet&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First step, add &lt;code&gt;MeshletPlugin&lt;&#x2F;code&gt; to your app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MeshletPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, preprocess your &lt;code&gt;Mesh&lt;&#x2F;code&gt; into a &lt;code&gt;MeshletMesh&lt;&#x2F;code&gt;. Currently, this needs to be done manually via  &lt;code&gt;MeshletMesh::from_mesh()&lt;&#x2F;code&gt; (again, you need the &lt;code&gt;meshlet_processor&lt;&#x2F;code&gt; feature enabled). This step is &lt;em&gt;very&lt;&#x2F;em&gt; slow, and should be done once ahead of time, and then saved to an asset file. Note that there are limitations on the types of meshes and materials supported, make sure to read the docs.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m in the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pull&#x2F;13431&quot;&gt;middle of working on&lt;&#x2F;a&gt; an asset processor system to automatically convert entire glTF scenes, but it&#x27;s not quite ready yet. For now, you&#x27;ll have to come up with your own asset processing and management system.&lt;&#x2F;p&gt;
&lt;p&gt;Now, spawn your entities. In the same vein as &lt;code&gt;MeshMaterialBundle&lt;&#x2F;code&gt;, there&#x27;s a &lt;code&gt;MeshletMeshMaterialBundle&lt;&#x2F;code&gt;, which uses a &lt;code&gt;MeshletMesh&lt;&#x2F;code&gt; instead of the typical &lt;code&gt;Mesh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;commands.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MaterialMeshletMeshBundle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_mesh: meshlet_mesh_handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    material: material_handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    transform: Transform::default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;with_translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Vec3::new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly, a note on materials. Meshlet entities use the same &lt;code&gt;Material&lt;&#x2F;code&gt; trait as regular mesh entities. There are 3 new methods that meshlet entities use however: &lt;code&gt;meshlet_mesh_fragment_shader&lt;&#x2F;code&gt;, &lt;code&gt;meshlet_mesh_prepass_fragment_shader&lt;&#x2F;code&gt;, and &lt;code&gt;meshlet_mesh_deferred_fragment_shader&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Notice that there is no access to vertex shaders. Meshlet rendering uses a hardcoded vertex shader that cannot be changed.&lt;&#x2F;p&gt;
&lt;p&gt;Fragment shaders for meshlets are mostly the same as fragment shaders for regular mesh entities. The key difference is that instead of this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_output&lt;&#x2F;span&gt;&lt;span&gt;: VertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should use this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;import bevy_pbr::meshlet_visibility_buffer_resolve::resolve_vertex_output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;frag_coord&lt;&#x2F;span&gt;&lt;span&gt;: vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;resolve_vertex_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_coord&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;mesh-conversion&quot;&gt;Mesh Conversion&lt;a class=&quot;zola-anchor&quot; href=&quot;#mesh-conversion&quot; aria-label=&quot;Anchor link for: mesh-conversion&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;We&#x27;re now going to start the portion of this blog post going into how everything is implemented.&lt;&#x2F;p&gt;
&lt;p&gt;The first step, before we can render anything, is to convert all meshes to meshlet meshes. I talked about the user-facing API earlier on, but in this section we&#x27;ll dive into what &lt;code&gt;MeshletMesh::from_mesh()&lt;&#x2F;code&gt; is doing under the hood in &lt;code&gt;from_mesh.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This section will be a bit dry, lacking commentary on why I did things, in favor of just describing the algorithm itself. The reason is that I don&#x27;t have many unique insights into the conversion process. The steps taken are pretty much just copied from Nanite (except Nanite does it better). If you&#x27;re interested in understanding this section in greater detail, definitely check out the original Nanite presentation.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to skip ahead to the frame breakdown section if you are more interested in the runtime portion of the renderer.&lt;&#x2F;p&gt;
&lt;p&gt;The high level steps for converting a mesh are as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Build LOD 0 meshlets&lt;&#x2F;li&gt;
&lt;li&gt;For each meshlet, find the set of all edges making up the triangles within the meshlet&lt;&#x2F;li&gt;
&lt;li&gt;For each meshlet, find the set of connected meshlets (sharing an edge)&lt;&#x2F;li&gt;
&lt;li&gt;Divide meshlets into groups of roughly 4&lt;&#x2F;li&gt;
&lt;li&gt;For each group of meshlets, build a new list of triangles approximating the original group&lt;&#x2F;li&gt;
&lt;li&gt;For each simplified group, break them apart into new meshlets&lt;&#x2F;li&gt;
&lt;li&gt;Repeat steps 3-7 using the set of new meshlets, until we run out of meshlets to simplify&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;build_steps.png&quot; alt=&quot;Nanite LOD build steps&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-lod-0-meshlets&quot;&gt;Build LOD 0 Meshlets&lt;a class=&quot;zola-anchor&quot; href=&quot;#build-lod-0-meshlets&quot; aria-label=&quot;Anchor link for: build-lod-0-meshlets&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re starting with a generic triangle mesh, so the first step is to group its triangles into an initial set of meshlets. No simplification or modification of the mesh is involved - we&#x27;re simply splitting up the original mesh into a set meshlets that would render exactly the same.&lt;&#x2F;p&gt;
&lt;p&gt;The crate &lt;code&gt;meshopt-rs&lt;&#x2F;code&gt; provides Rust bindings to the excellent &lt;code&gt;meshoptimizer&lt;&#x2F;code&gt; library, which provides a nice &lt;code&gt;build_meshlets()&lt;&#x2F;code&gt; function for us that I&#x27;ve wrapped into &lt;code&gt;compute_meshlets()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Split the mesh into an initial list of meshlets (LOD 0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; mesh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_vertex_buffer_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_stride &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; mesh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_vertex_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;VertexDataAdapter::new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertex_buffer, vertex_stride, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; meshlets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;indices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need some bounding spheres for each meshlet. The culling bounding sphere is straightforward - &lt;code&gt;compute_meshlet_bounds()&lt;&#x2F;code&gt;, again from &lt;code&gt;meshopt-rs&lt;&#x2F;code&gt;, will give us a bounding sphere encompassing the meshlet that we can use for frustum and occlusion culling later on.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;self_lod&lt;&#x2F;code&gt; and &lt;code&gt;parent_lod&lt;&#x2F;code&gt; bounding spheres need a lot more explanation.&lt;&#x2F;p&gt;
&lt;p&gt;As we simplify each group of meshlets into new meshlets, we will deform the mesh slightly. That deformity adds up over time, eventually giving a very visibly different mesh from the original. However, when viewing the very simplified mesh from far away, due to perspective the difference will be much less noticable. While we would want to view the original (or close to the original) mesh close-up, at longer distances we can get away with rendering a much simpler version of the mesh without noticeable differences.&lt;&#x2F;p&gt;
&lt;p&gt;So, how to choose the right LOD level, or in our case, the right LOD tree cut? The LOD cut will be based on the simplification error of each meshlet along the cut, with the goal being to select a cut that is imperceptibly different from the original mesh at the distance we&#x27;re viewing the mesh at.&lt;&#x2F;p&gt;
&lt;p&gt;For reasons I&#x27;ll get into later during the runtime section, we&#x27;re going to treat the error as a bounding sphere around the meshlet, with the radius being the error. We&#x27;re also going to want two of these: one for the current meshlet itself, and one for the less-simplified group of meshlets that we simplified into the current meshlet (the current meshlet&#x27;s parents in the LOD tree).&lt;&#x2F;p&gt;
&lt;p&gt;LOD 0 meshlets, being the original representation of the mesh, have no error (0.0). They also have no set of parent meshlets, which we will represent with an infinite amount of error (f32::MAX), again for reasons I will get into later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlets
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_meshlet_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;convert_meshlet_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bounding_sphere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;MeshletBoundingSpheres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self_culling: bounding_sphere,
&lt;&#x2F;span&gt;&lt;span&gt;        self_lod: MeshletBoundingSphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            center: bounding_sphere.center,
&lt;&#x2F;span&gt;&lt;span&gt;            radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        parent_lod: MeshletBoundingSphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            center: bounding_sphere.center,
&lt;&#x2F;span&gt;&lt;span&gt;            radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    .collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;find-meshlet-edges&quot;&gt;Find Meshlet Edges&lt;a class=&quot;zola-anchor&quot; href=&quot;#find-meshlet-edges&quot; aria-label=&quot;Anchor link for: find-meshlet-edges&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have our initial set of meshlets, we can start simplifying.&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to find the set of triangle edges that make up each meshlet. This can be done with a simple loop over triangles, building a hashset of edges where each edge is ordered such that the smaller numbered vertex comes before the larger number vertex. This ensures that we don&#x27;t accidentally add both (v1, v2) and (v2, v1), which conceptually are the same edge. Each triangle has 3 vertices and 3 edges.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; meshlet_triangle_edges &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashMap::new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; meshlet.triangles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;chunks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet.vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet.vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet.vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_triangle_edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_triangle_edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_triangle_edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;find-connected-meshlets&quot;&gt;Find Connected Meshlets&lt;a class=&quot;zola-anchor&quot; href=&quot;#find-connected-meshlets&quot; aria-label=&quot;Anchor link for: find-connected-meshlets&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Next, we need to find the meshlets that connect to each other.&lt;&#x2F;p&gt;
&lt;p&gt;A meshlet will be considered as connected to another meshlet if both meshlets share at least one edge.&lt;&#x2F;p&gt;
&lt;p&gt;In the previous step, we built a set of edges for each meshlet. Finding if two meshlets share any edges can be done by simply taking the intersection of their two edge sets, and checking if the resulting set is not empty.&lt;&#x2F;p&gt;
&lt;p&gt;We will also store the &lt;em&gt;amount&lt;&#x2F;em&gt; of shared edges between two meshlets, giving a heuristic for how &quot;connected&quot; each meshlet is to another. This is simply the size of the intersection set.&lt;&#x2F;p&gt;
&lt;p&gt;Overally, we will build a list per meshlet, containing tuples of (meshlet_id, shared_edge_count) for each meshlet connected to the current meshlet.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id1, meshlet_id2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; simplification_queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;tuple_combinations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; shared_edge_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; triangle_edges_per_meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;intersection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;triangle_edges_per_meshlet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; shared_edge_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        connected_meshlets_per_meshlet
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id2, shared_edge_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        connected_meshlets_per_meshlet
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id1, shared_edge_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;partition-meshlets-into-groups&quot;&gt;Partition Meshlets Into Groups&lt;a class=&quot;zola-anchor&quot; href=&quot;#partition-meshlets-into-groups&quot; aria-label=&quot;Anchor link for: partition-meshlets-into-groups&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we know which meshlets are connected, the next step is to group them together. We&#x27;re going to aim for 4 meshlets per group, although there&#x27;s no way of guaranteeing that.&lt;&#x2F;p&gt;
&lt;p&gt;How should we determine which meshlets go in which group?&lt;&#x2F;p&gt;
&lt;p&gt;You can view the connected meshlet sets as a graph. Each meshlet is a node, and bidirectional edges connect one meshlet to another in the graph if we determined that they were connected earlier. The weight of each edge is the amount of shared edges between the two meshlet nodes.&lt;&#x2F;p&gt;
&lt;p&gt;Partitioning the meshlets into groups is now a matter of partitioning the graph. I use the &lt;code&gt;metis-rs&lt;&#x2F;code&gt; crate which provides Rust bindings to the &lt;code&gt;METIS&lt;&#x2F;code&gt; library. The edge weights will be used so that meshlets with a high shared edge count are more likely to be group together.&lt;&#x2F;p&gt;
&lt;p&gt;The code to format this data for metis is a bit complicated, but in the end we have a list of groups, where each group is a list of meshlets.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simplify-groups&quot;&gt;Simplify Groups&lt;a class=&quot;zola-anchor&quot; href=&quot;#simplify-groups&quot; aria-label=&quot;Anchor link for: simplify-groups&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now for an important step, and the most tricky.&lt;&#x2F;p&gt;
&lt;p&gt;We take each group, and merge the triangle lists of the underlying meshlets together into one large list of triangles, forming a new mesh.&lt;&#x2F;p&gt;
&lt;p&gt;Now, we can simplify this new mesh into a lower-resolution (faster to render) version. Meshopt again provides a helpful &lt;code&gt;simplify()&lt;&#x2F;code&gt; function for us. Finally, less triangles to render!&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the new mesh, we get an &quot;error&quot; value, describing how much the mesh deformed by when simplifying.&lt;&#x2F;p&gt;
&lt;p&gt;The quadratic error metric (QEM) returned from simplifying is a somewhat meaningless value, but we can use &lt;code&gt;simplify_scale()&lt;&#x2F;code&gt; to get an object-space value. This value is &lt;em&gt;still&lt;&#x2F;em&gt; fairly meaningless, but we can treat it as the maximum amount of object-space distance a vertex was displaced by during simplification.&lt;&#x2F;p&gt;
&lt;p&gt;The error represents displacement from the meshlets we simplified, but we want the displacement from the original (LOD 0) meshlets. We can add the max error of the meshlets that went into building the current meshlet group (child nodes of the parent node that we&#x27;re currently building in the LOD tree) to make the error relative to LOD 0.&lt;&#x2F;p&gt;
&lt;p&gt;If this all feels handwavy to you, that&#x27;s because it is. And this is vertex positions only; we haven&#x27;t even considered UV error during simplification, or how the mesh&#x27;s eventual material influences perceptual differences between LOD levels. Perceptual simplification is very much an unsolved problem in computer graphics, and for now Bevy only uses positions for simplification.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll have to take my word for it that using the error like this works. You&#x27;ll see how it gets used to pick the LOD level during runtime in a later section. For now, we&#x27;ll take the group error and build a bounding sphere out of it, and assign it as the parent LOD bounding sphere for the group&#x27;s (parent node, higher LOD) underlying meshlets (child nodes, lower LOD).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Simplify the group to ~50% triangle count
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;simplified_group_indices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; group_error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;simplify_meshlet_groups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;group_meshlets, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlets, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices, lod_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Add the maximum child error to the parent error to make parent error cumulative from LOD 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; (we&amp;#39;re currently building the parent from its children)
&lt;&#x2F;span&gt;&lt;span&gt;group_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; group_meshlets.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;group_error, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;acc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    acc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[*&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.self_lod.radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Build a new LOD bounding sphere for the simplified group as a whole
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; group_bounding_sphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;convert_meshlet_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_cluster_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;simplified_group_indices,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;group_bounding_sphere.radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; group_error;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; For each meshlet in the group set their parent LOD bounding sphere to that of the simplified group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; group_meshlets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    bounding_spheres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[*&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.parent_lod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; group_bounding_sphere;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;split-groups&quot;&gt;Split Groups&lt;a class=&quot;zola-anchor&quot; href=&quot;#split-groups&quot; aria-label=&quot;Anchor link for: split-groups&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, the last step is to take the large mesh formed from simplifying the entire meshlet group, and split it into a set of brand new meshlets.&lt;&#x2F;p&gt;
&lt;p&gt;This is in fact the same process as splitting the original mesh into meshlets.&lt;&#x2F;p&gt;
&lt;p&gt;If everything went optimally, we should have gone from the original 4 meshlets per group, to 2 new meshlets per group with 50% less triangles overall.&lt;&#x2F;p&gt;
&lt;p&gt;For each new meshlet, we&#x27;ll calculate a bounding sphere for culling, assign the self_lod bounding sphere as that of the group, and the parent_lod bounding sphere again as uninitialized.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Build new meshlets using the simplified group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_meshlets_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split_simplified_groups_into_new_meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;simplified_group_indices,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; meshlets,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate the culling bounding sphere for the new meshlets and set their LOD bounding spheres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_meshlet_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;meshlets.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&lt;&#x2F;span&gt;&lt;span&gt; new_meshlets_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;meshlets.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    new_meshlet_ids
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_meshlet_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlets.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;convert_meshlet_bounds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bounding_sphere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;MeshletBoundingSpheres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            self_culling: bounding_sphere,
&lt;&#x2F;span&gt;&lt;span&gt;            self_lod: group_bounding_sphere,
&lt;&#x2F;span&gt;&lt;span&gt;            parent_lod: MeshletBoundingSphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                center: group_bounding_sphere.center,
&lt;&#x2F;span&gt;&lt;span&gt;                radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can repeat this whole process several times, ideally getting down to a single meshlet forming the root of the LOD tree. In practice, my current code can&#x27;t get to that point for most meshes.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;frame-breakdown&quot;&gt;Frame Breakdown&lt;a class=&quot;zola-anchor&quot; href=&quot;#frame-breakdown&quot; aria-label=&quot;Anchor link for: frame-breakdown&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;With the asset processing part out of the way, we can finally move onto the more interesting runtime code section.&lt;&#x2F;p&gt;
&lt;p&gt;The frame capture we&#x27;ll be looking at is this scene with 3092 copies of the Stanford Bunny. Five of the bunnies are using unique PBR materials (they&#x27;re hiding in the top middle), while the rest use the same debug material that visualizes the clusters&#x2F;triangles of the mesh. Each bunny is made of 144,042 triangles at LOD 0, with 4936 meshlets total in the LOD tree.&lt;&#x2F;p&gt;
&lt;p&gt;GPU timings were measured on a RTX 3080 locked to base clock speeds (so not as fast as you would actually get in practice), rendering at 2240x1260, averaged over 10 frames.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clusters visualization
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;clusters.png&quot; alt=&quot;Clusters visualization&quot; &#x2F;&gt;
Triangles visualization
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;triangles.png&quot; alt=&quot;Triangles visualization&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NSight profile
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;nsight.png&quot; alt=&quot;NSight profile&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The frame can be broken down into the following passes:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Fill cluster buffers (0.22ms)&lt;&#x2F;li&gt;
&lt;li&gt;Cluster culling first pass (0.49ms)&lt;&#x2F;li&gt;
&lt;li&gt;Raster visbuffer first pass (1.85ms +&#x2F;- 0.33ms)&lt;&#x2F;li&gt;
&lt;li&gt;Build depth pyramid for second pass (0.03ms)&lt;&#x2F;li&gt;
&lt;li&gt;Cluster culling second pass (0.11ms)&lt;&#x2F;li&gt;
&lt;li&gt;Raster visbuffer second pass (&amp;lt; 0.01ms)&lt;&#x2F;li&gt;
&lt;li&gt;Copy material depth (0.04ms)&lt;&#x2F;li&gt;
&lt;li&gt;Material shading (timings omitted as this is a poor test for materials)&lt;&#x2F;li&gt;
&lt;li&gt;Build depth pyramid for next frame (0.03ms)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Total GPU time is ~2.78ms +&#x2F;- 0.33ms.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a lot to cover, so I&#x27;m going to try and keep it fairly brief in each section. The high level concepts of all of these passes (besides the first pass) are copied from Nanite, so check out their presentation for further details. I&#x27;ll be trying to focus more on the lower level code and reasons why I implemented things the way I did. My first attempt at a lot of these passes had bugs, and was way slower. The details and data flow is what takes the concept from a neat tech demo, to an actually usable and scalable renderer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;a class=&quot;zola-anchor&quot; href=&quot;#terminology&quot; aria-label=&quot;Anchor link for: terminology&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First, some terminology:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asset buffers&lt;&#x2F;code&gt; - When a new MeshletMesh asset is loaded, we copy the buffers it&#x27;s made of into large suballocated buffers. All the vertex data, meshlet data, bounding spheres, etc for multiple MeshletMesh assets are packed together into one large buffer per data type.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;instance&lt;&#x2F;code&gt; - A single Bevy entity with a MeshletMesh and Material.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;instance uniform&lt;&#x2F;code&gt; - A transform matrix and mesh flags for an instance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;material&lt;&#x2F;code&gt; - A combination of pipeline and bind group used for shading fragments.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;meshlet&lt;&#x2F;code&gt; - A single meshlet from within a MeshletMesh asset, pointing to data within the asset buffers (more or less).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;&#x2F;code&gt; - A single renderable piece of an entity. Each cluster is associated with an instance and a meshlet.
&lt;ul&gt;
&lt;li&gt;All of our shaders will operate on clusters, and &lt;em&gt;not&lt;&#x2F;em&gt; on meshlets. You can think of these like an instance of a meshlet for a specific entity, in the same way you can have an instance of a class in object-oriented programming languages.&lt;&#x2F;li&gt;
&lt;li&gt;Up to this point I&#x27;ve been using meshlet and cluster interchangeably. From now on, they have seperate, defined meanings.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;view&lt;&#x2F;code&gt; - A perspective or orthographic camera with an associated depth buffer and optional color output. The main camera is a view, and additional views can be dynamically generated for e.g. rendering shadowmaps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;id&lt;&#x2F;code&gt; - A u32 index into a buffer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fill-cluster-buffers&quot;&gt;Fill Cluster Buffers&lt;a class=&quot;zola-anchor&quot; href=&quot;#fill-cluster-buffers&quot; aria-label=&quot;Anchor link for: fill-cluster-buffers&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now the first pass we&#x27;re going to look at might be surprising.&lt;&#x2F;p&gt;
&lt;p&gt;Over the course of the frame, for each cluster we will need its instance (giving us a transform and material), along with its meshlet (giving us vertex data and bounding spheres).&lt;&#x2F;p&gt;
&lt;p&gt;While the cluster itself is implicit (each thread or workgroup of a shader will handle one cluster, with the global thread&#x2F;workgroup ID being the cluster ID), we need some method of telling the GPU what the instance and meshlet for each cluster is.&lt;&#x2F;p&gt;
&lt;p&gt;I.e., we need an array of instance IDs and meshlet IDs such that we can do &lt;code&gt;let cluster_instance = instances[cluster_instance_ids[cluster_id]]&lt;&#x2F;code&gt; and &lt;code&gt;let cluster_meshlet = meshlets[cluster_meshlet_ids[cluster_id]]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The naive method would be to simply write out these two buffers from the CPU and transfer them to the GPU. This was how I implemented it initially, and it worked fine for my simple initial test scene with a single bunny, but I very quickly ran into performance problems when trying to scale up to rendering 3000 bunnies.&lt;&#x2F;p&gt;
&lt;p&gt;Each ID is a 4-byte u32, and it&#x27;s two IDs per cluster. That&#x27;s 8 bytes per cluster.&lt;&#x2F;p&gt;
&lt;p&gt;With 3092 bunnies in the scene, and 4936 meshlets per bunny, that&#x27;s 8 * 3092 * 4936 bytes total = ~122.10 MBs total.&lt;&#x2F;p&gt;
&lt;p&gt;For dedicated GPUs, uploading data from the system&#x27;s RAM to the GPU&#x27;s VRAM is done over PCIe. PCIe x16 Gen3 max bandwidth is 16 GB&#x2F;s.&lt;&#x2F;p&gt;
&lt;p&gt;Ignoring data copying costs and other overhead, and assuming max PCIe bandwidth, that would mean it would take ~7.63ms to upload cluster data. That&#x27;s 7.63 &#x2F; 16.6 = ~46% of our frame budget gone at 60fps, before we&#x27;ve even rendered anything! Obviously, we need a better method.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Instead of uploading per-cluster data, we&#x27;re going to stick to uploading only per-instance data. Specifically, two buffers called &lt;code&gt;instance_meshlet_counts_prefix_sum&lt;&#x2F;code&gt; and &lt;code&gt;instance_meshlet_slice_starts&lt;&#x2F;code&gt;. Each buffer will be an array of integers, with an entry per instance.&lt;&#x2F;p&gt;
&lt;p&gt;The former will contain a prefix sum (calculated on the CPU while writing out the buffer) of how many meshlets each instance is made of. The latter will contain the index of where in the meshlet asset buffer each instance&#x27;s list of meshlets begin.&lt;&#x2F;p&gt;
&lt;p&gt;Now we&#x27;re uploading only 8 bytes per &lt;em&gt;instance&lt;&#x2F;em&gt;, and not per &lt;em&gt;cluster&lt;&#x2F;em&gt;, which is much, much cheaper. Looking back at our scene, we&#x27;re uploading 3092 * 8 bytes total = ~0.025 MBs total. This is a &lt;em&gt;huge&lt;&#x2F;em&gt; improvement over the ~122.10 MBs from before.&lt;&#x2F;p&gt;
&lt;p&gt;Once the GPU has this data, we can have the GPU write out the &lt;code&gt;cluster_instance_ids&lt;&#x2F;code&gt; and &lt;code&gt;cluster_meshlet_ids&lt;&#x2F;code&gt; buffers from a compute shader. Max VRAM bandwidth on my RTX 3080 is a whopping 760.3 GB&#x2F;s; ~47.5x faster than the 16 GB&#x2F;s of bandwidth we had over PCIe.&lt;&#x2F;p&gt;
&lt;p&gt;Each thread of the compute shader will handle one cluster, and do a binary search over the prefix sum array to find to what instance it belongs to.&lt;&#x2F;p&gt;
&lt;p&gt;Binary search might seem surprising - it&#x27;s multiple dependent divergent memory accesses within a thread, and one of the biggest performance metrics for GPU code is cache efficiency. However, it&#x27;s very coherent &lt;em&gt;across&lt;&#x2F;em&gt; threads within the subgroup, and scales extremely well (O log n) with the number of instances in the scene. In practice, while it could be improved, the performance of this pass has not been a bottleneck.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we know what instance the cluster belongs to, it&#x27;s trivial to calculate the meshlet index of the cluster within the instance&#x27;s meshlet mesh asset. Adding that to the instance&#x27;s meshlet_slice_start using the other buffer we uploaded gives us the global meshlet index within the overall meshlet asset buffer. The thread can then write out the two calculated IDs for the cluster.&lt;&#x2F;p&gt;
&lt;p&gt;This is the only pass that runs once per-frame. The rest of the passes all run once per-view.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Writes out instance_id and meshlet_id to the global buffers for each cluster in the scene.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 128 threads per workgroup, 1 cluster per thread
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fill_cluster_buffers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num_workgroups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num_workgroups&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;local_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;local_invocation_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate the cluster ID for this thread
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; local_invocation_id.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; 128u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;workgroup_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num_workgroups.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; num_workgroups.x, num_workgroups.x, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; cluster_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Binary search to find the instance this cluster belongs to
&lt;&#x2F;span&gt;&lt;span&gt;    var left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u;
&lt;&#x2F;span&gt;&lt;span&gt;    var right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; arrayLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_instance_meshlet_counts_prefix_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 2u;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_meshlet_counts_prefix_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;mid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; mid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; mid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; 1u;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; right;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Find the meshlet ID for this cluster within the instance&amp;#39;s MeshletMesh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_meshlet_counts_prefix_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Find the overall meshlet ID in the global meshlet buffer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_meshlet_slice_starts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Write results to buffers
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; instance_id;
&lt;&#x2F;span&gt;&lt;span&gt;    meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;culling-first-pass&quot;&gt;Culling (First Pass)&lt;a class=&quot;zola-anchor&quot; href=&quot;#culling-first-pass&quot; aria-label=&quot;Anchor link for: culling-first-pass&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned earlier that frustum culling is not sufficent for complex scenes. With meshlets, we&#x27;re going to have a &lt;em&gt;lot&lt;&#x2F;em&gt; of geometry in view at once. Rendering all of that is way too expensive, and unnecessary. It&#x27;s a complete waste to spend time rendering a bunch of detailed rocks and trees, only to draw a wall in front of it later on (overdraw).&lt;&#x2F;p&gt;
&lt;p&gt;Two pass occlusion culling is the method that we&#x27;re going to use to reduce overdraw. We&#x27;re going to start by drawing all the clusters that actually contributed to the rendered image last frame, under the assumption that those are a good approximation of what will contribute to the rendered image &lt;em&gt;this&lt;&#x2F;em&gt; frame. That&#x27;s the first pass. Then, we can build a depth pyramid, and use that to cull all the clusters that we didn&#x27;t look at in the first pass, i.e. that didn&#x27;t render last frame. The clusters that survive the culling get drawn. That&#x27;s the second pass.&lt;&#x2F;p&gt;
&lt;p&gt;In the example with the wall with the rocks and trees behind it, we could see that last frame the wall clusters contributed pixels to the final image, but none of the rock or tree clusters did. Therefore in the first pass, we would draw only the wall, and then build a depth pyramid from the resulting depth. In the second pass, we would test the remaining clusters (all the trees and rocks) against the depth pyramid, and see that they would still be occluded by the wall, and therefore we can skip drawing them. If there were some new rocks that came into view as we peeked around the corner, they&#x27;d be drawn here. The second pass functions as a cleanup pass, for rendering the objects that we missed in the first pass.&lt;&#x2F;p&gt;
&lt;p&gt;Done correctly, two pass occlusion culling reduces the amount of clusters we draw in an average frame, saving rendering time without any visible artifacts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initial-cluster-processing&quot;&gt;Initial Cluster Processing&lt;a class=&quot;zola-anchor&quot; href=&quot;#initial-cluster-processing&quot; aria-label=&quot;Anchor link for: initial-cluster-processing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Before we start looking at the algorithm steps and code, I&#x27;d like to note that this shader is very performance and bug sensitive. I&#x27;ve written and rewritten it several times. While the concepts are simple, it&#x27;s easy to break the culling, and the choices in data management that we make here affect the rest of the rendering pipeline quite significantly.&lt;&#x2F;p&gt;
&lt;p&gt;This is going to be a long and complicated shader, so let&#x27;s dive into it.&lt;&#x2F;p&gt;
&lt;p&gt;The first pass of occlusion culling is another compute shader dispatch with one thread per cluster. A minor detail that I didn&#x27;t mention last time we saw this pattern, is that with millions of clusters in a scene, you would quickly hit the limit of the maximum number of workgroups you can spawn per dispatch dimension if you did a 1d dispatch over all clusters. To work around this, we instead we do a 3d dispatch with each dimension of size &lt;code&gt;ceil(cbrt(workgroup_count))&lt;&#x2F;code&gt;. We can then swizzle the workgroup and thread indices back to 1d in the shader.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;compute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@workgroup_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 128 threads per workgroup, 1 cluster per thread
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cull_meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;workgroup_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num_workgroups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num_workgroups&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;local_invocation_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;local_invocation_id&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate the cluster ID for this thread
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; local_invocation_id.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; 128u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;workgroup_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num_workgroups.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; num_workgroups.x, num_workgroups.x, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; arrayLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we know what cluster this thread should process, the next step is to check instance culling. Bevy has the concept of render layers, where certain entities only render for certain views. Before rendering, we uploaded a bitmask of whether each instance was visible for the current view or not. In the shader, we&#x27;ll just check that bitmask, and early-out if the cluster belongs to an instance that should be culled.&lt;&#x2F;p&gt;
&lt;p&gt;The instance ID can be found via indexing into the per-cluster data buffer that we computed in the previous pass (fill cluster buffers).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Check for instance culling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bit_offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; 32u;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; packed_visibility &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_view_instance_visibility&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 32u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; should_cull_instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;extractBits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed_visibility, bit_offset, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; should_cull_instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assuming the cluster&#x27;s instance was not culled, we can now start fetching the rest of the cluster&#x27;s data for culling. The instance ID we found also gives us access to the instance uniform, and we can fetch the meshlet ID the same way we did the instance ID. With these two indices, we can also fetch the culling bounding sphere for the cluster&#x27;s meshlet, and convert it from local to world-space.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate world-space culling bounding sphere for the cluster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_uniform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_uniforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;affine3_to_square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;instance_uniform.world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_bounding_spheres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;var culling_bounding_sphere_center &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres.self_culling.center, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;var culling_bounding_sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres.self_culling.radius;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A simple frustum test lets us cull out of view clusters (an early return means the cluster is culled).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Frustum culling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;var i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; 6u; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;view.frustum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, culling_bounding_sphere_center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) +&lt;&#x2F;span&gt;&lt;span&gt; culling_bounding_sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lod-selection&quot;&gt;LOD Selection&lt;a class=&quot;zola-anchor&quot; href=&quot;#lod-selection&quot; aria-label=&quot;Anchor link for: lod-selection&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we know if a cluster is in view, the next question we need to ask is &quot;Is this cluster&#x27;s meshlet part of the right cut of the LOD tree?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The goal is to select the set of simplified meshlets such that at the distance we&#x27;re viewing them from, they have less than 1 pixel of geometric difference from the original set of meshlets at LOD 0 (the base mesh). Note that we&#x27;re accounting &lt;em&gt;only&lt;&#x2F;em&gt; for geometric differences, and not taking into account material or lighting differences. Doing so is a &lt;em&gt;much&lt;&#x2F;em&gt; harder problem.&lt;&#x2F;p&gt;
&lt;p&gt;So, the question is then &quot;how do we determine if the group this meshlet belongs to has less than 1 pixel of geometric error?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;When building the meshlet groups during asset preprocessing, we stored the group error relative to the base mesh as the radius of the bounding sphere. We can convert this bounding sphere from local to world-space, project it to view-space, and then check how many pixels on the screen it takes up. If it&#x27;s less than 1 pixel, then the cluster is imperceptibly different. We&#x27;re essentially answering the question &quot;if the mesh deformed by X meters, how many pixels of change is that when viewed from the current camera&quot;?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;21648630&#x2F;radius-of-projected-sphere-in-screen-space&#x2F;21649403#21649403
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lod_error_is_imperceptible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sphere_center&lt;&#x2F;span&gt;&lt;span&gt;: vec3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sphere_radius&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; d2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sphere_center, sphere_center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sphere_radius;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sphere_diameter_uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] *&lt;&#x2F;span&gt;&lt;span&gt; sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;d2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; r2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; view_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;view.width, view.height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sphere_diameter_pixels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sphere_diameter_uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; view_size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sphere_diameter_pixels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Knowing if the cluster has imperceptible error is not sufficent by itself. Say you have 4 sets of meshlets - the original one (group 0), and 3 progressively simplified versions (groups 1-3). If group 2 has imperceptible error for the current view, then so would groups 1 and 0. In fact, group 0 will &lt;em&gt;always&lt;&#x2F;em&gt; have imperceptible error, given that it &lt;em&gt;is&lt;&#x2F;em&gt; the base mesh.&lt;&#x2F;p&gt;
&lt;p&gt;Given multiple sets of imperceptibly different meshlets, the best set to select is the one made of the fewest triangles (most simplified), which is the highest LOD.&lt;&#x2F;p&gt;
&lt;p&gt;Since we&#x27;re processing each cluster in parallel, we can&#x27;t communicate between them to choose the correct LOD cut. Instead, we can use a neat trick. We can design a procedure where each cluster evaluates some data, and decides independently whether it&#x27;s at the correct LOD, in a way that&#x27;s consistent across all the clusters.&lt;&#x2F;p&gt;
&lt;p&gt;The Nanite slides go into the theory more, but it boils down to checking if error is imperceptible for the current cluster, &lt;em&gt;and&lt;&#x2F;em&gt; that its &lt;em&gt;parent&#x27;s&lt;&#x2F;em&gt; error is &lt;em&gt;not&lt;&#x2F;em&gt; imperceptible. I.e. this is the most simple cluster we can choose with imperceptible error, and going up to it&#x27;s even more simple parent would cause visible error.&lt;&#x2F;p&gt;
&lt;p&gt;We can take the two LOD bounding spheres (the ones containing simplification error) for each meshlet, transform them to view-space, check if the error for each one is imperceptible or not, and then early-out if this cluster is not part of the correct LOD cut.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate view-space LOD bounding sphere for the meshlet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lod_bounding_sphere_center &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres.self_lod.center, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lod_bounding_sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres.self_lod.radius;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lod_bounding_sphere_center_view_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;view.view_from_world &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;lod_bounding_sphere_center.xyz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Calculate view-space LOD bounding sphere for the meshlet&amp;#39;s parent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parent_lod_bounding_sphere_center &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres.parent_lod.center, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parent_lod_bounding_sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres.parent_lod.radius;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parent_lod_bounding_sphere_center_view_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;view.view_from_world &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;parent_lod_bounding_sphere_center.xyz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Check LOD cut (meshlet error imperceptible, and parent error not imperceptible)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lod_is_ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lod_error_is_imperceptible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;lod_bounding_sphere_center_view_space, lod_bounding_sphere_radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parent_lod_is_ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lod_error_is_imperceptible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;parent_lod_bounding_sphere_center_view_space, parent_lod_bounding_sphere_radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;lod_is_ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; parent_lod_is_ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;occlusion-culling-test&quot;&gt;Occlusion Culling Test&lt;a class=&quot;zola-anchor&quot; href=&quot;#occlusion-culling-test&quot; aria-label=&quot;Anchor link for: occlusion-culling-test&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ve checked if the cluster is in view (frustum and render layer culling), as well as if it&#x27;s part of the correct LOD cut. It&#x27;s now time for the actual occlusion culling part of the first of the two passes for two pass occlusion culling.&lt;&#x2F;p&gt;
&lt;p&gt;Our goal in the first pass is to render only clusters that were visible last frame. One possible method would be to store another bitmask of whether each cluster was visible in the current frame, and read from it in the next frame. The problem with this is that it uses a good chunk of memory, and more importantly, does not play well with LODs. Before I implemented LODs I used this method, but with LODs, a cluster that was visible last frame might not be part of the LOD cut in this frame and therefore incorrect to render.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of explicitly storing whether a cluster is visible, we&#x27;re instead going to occlusion cull the clusters against the depth pyramid from the &lt;em&gt;previous&lt;&#x2F;em&gt; frame. We can take the culling bounding sphere of the cluster, project it to view-space using the previous frame&#x27;s set of transforms, and then project it to a screen-space axis-aligned bounding box (AABB). We can then compare the view-space depth of the bounding sphere&#x27;s extents with every pixel of the depth buffer that the AABB we calculated covers. If all depth pixels show that there is geometry in front of the bounding sphere, then the mesh was not visible last frame, and therefore should not be rendered in the first occlusion culling pass.&lt;&#x2F;p&gt;
&lt;p&gt;Of course sampling every pixel an AABB covers would be extremely expensive, and cache inefficient. Instead we&#x27;ll use a depth &lt;em&gt;pyramid&lt;&#x2F;em&gt;, which is a mipmapped version of the depth buffer. Each pixel in MIP 1 corresponds to the min of 4 pixels from MIP 0, each pixel in MIP 2 corresponds to the min of 4 pixels from MIP 1, etc down to a 1x1 layer. Now we only have to sample 4 pixels for each AABB, choosing the mip level that best fits the AABB onto a 2x2 quad. Don&#x27;t worry about how we generate the depth pyramid for now, we&#x27;ll talk about that more later.&lt;&#x2F;p&gt;
&lt;p&gt;If any of that was confusing, read up on occlusion culling and depth pyramids. The important takeaway is that we&#x27;re using the previous frame&#x27;s depth pyramid in the first occlusion culling pass to find which clusters would have been visible last frame.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Project the culling bounding sphere to view-space for occlusion culling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; previous_world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;affine3_to_square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;instance_uniform.previous_world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; previous_world_from_local_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;previous_world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;previous_world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;previous_world_from_local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_center &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; previous_world_from_local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bounding_spheres.self_culling.center, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; previous_world_from_local_scale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; bounding_spheres.self_culling.radius;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; culling_bounding_sphere_center_view_space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;view.view_from_world &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_center.xyz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; aabb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;project_view_space_sphere_to_screen_space_aabb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_center_view_space, culling_bounding_sphere_radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Halve the view-space AABB size as the depth pyramid is half the view size
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_pyramid_size_mip_0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;textureDimensions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;aabb.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; aabb.x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; depth_pyramid_size_mip_0.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; height &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;aabb.w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; aabb.y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; depth_pyramid_size_mip_0.y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Note: I&amp;#39;ve seen people use floor instead of ceil here, but it seems to result in culling bugs.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;       The max(0, x) is also important to prevent out of bounds accesses.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_level &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;width, height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_pyramid_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;textureDimensions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, depth_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; aabb_top_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;aabb.xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; depth_pyramid_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Note: I&amp;#39;d use a min sampler reduction here if it were available in wgpu.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;       textureGather() can&amp;#39;t be used either, as it dosen&amp;#39;t let you specify a mip level.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_quad_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, aabb_top_left, depth_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_quad_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, aabb_top_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;1u, 0u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, depth_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_quad_c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, aabb_top_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;0u, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, depth_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth_quad_d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_pyramid, aabb_top_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;1u, 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, depth_level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; occluder_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_quad_a, depth_quad_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;depth_quad_c, depth_quad_d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Check whether or not the cluster would be occluded if drawn
&lt;&#x2F;span&gt;&lt;span&gt;var cluster_visible: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Orthographic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sphere_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] + (&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_center_view_space.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; culling_bounding_sphere_radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cluster_visible &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sphere_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; occluder_depth;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Perspective
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sphere_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span&gt;view.clip_from_view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &#x2F; (&lt;&#x2F;span&gt;&lt;span&gt;culling_bounding_sphere_center_view_space.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; culling_bounding_sphere_radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cluster_visible &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sphere_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; occluder_depth;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;result-writeout&quot;&gt;Result Writeout&lt;a class=&quot;zola-anchor&quot; href=&quot;#result-writeout&quot; aria-label=&quot;Anchor link for: result-writeout&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;re finally at the last step of the first occlusion culling pass&#x2F;dispatch. As a reminder, everything from after the fill cluster buffers step until the end of this section has all been one shader. I warned you it would be long!&lt;&#x2F;p&gt;
&lt;p&gt;The last step for this pass is to write out the results of what clusters should render. This pass is just a compute shader - it dosen&#x27;t actually render anything. We&#x27;re just going to fill out the arguments for a single indirect draw command (more on this in the next pass).&lt;&#x2F;p&gt;
&lt;p&gt;First, before we get to the indirect draw, we need to write out another piece of data. The second occlusion culling pass later will want to operate only on clusters in view, that passed the LOD test, and that were &lt;em&gt;not&lt;&#x2F;em&gt; drawn in the first pass. That means we didn&#x27;t early return during the frustum culling or LOD test, and that cluster_visible was false from the occlusion culling test.&lt;&#x2F;p&gt;
&lt;p&gt;In order for the second occlusion pass to know which clusters satisfy these conditions, we&#x27;ll write out another bitmask of 1 bit per cluster, with clusters that the second occlusion pass should operate on having their bit set to 1. An atomicOr takes care of setting each cluster&#x27;s bit in parallel amongst all threads.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Write if the cluster should be occlusion tested in the second pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;cluster_visible &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 1u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; 32u;
&lt;&#x2F;span&gt;&lt;span&gt;    atomicOr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;meshlet_second_pass_candidates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 32u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, bit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have the final step of filling out the indirect draw data for the clusters that we &lt;em&gt;do&lt;&#x2F;em&gt; want to draw in the first pass.&lt;&#x2F;p&gt;
&lt;p&gt;We can do an atomicAdd on the DrawIndirectArgs::vertex_count with the meshlet&#x27;s vertex count (triangle count * 3). This does two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Adds more vertex invocations to the indirect draw for this cluster&#x27;s triangles&lt;&#x2F;li&gt;
&lt;li&gt;Reserves space in a large buffer for all of this cluster&#x27;s triangles to write out a per-triangle number&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;With the draw_triangle_buffer space reserved, we can then fill it with an encoded u32 integer: 26 bits for the cluster ID, and 6 bits for the triangle ID within the cluster&#x27;s meshlet. 6 bits gives us 2^6 = 64 possible values, which is perfect as when we were building meshlets during asset preprocessing, we limited each meshlet to max 64 vertices and 64 triangles.&lt;&#x2F;p&gt;
&lt;p&gt;During vertex shading in the next pass, each vertex invocation will be able to use this buffer to know what triangle and cluster it belongs to.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Append a list of this cluster&amp;#39;s triangles to draw if not culled
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster_visible &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_triangle_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.triangle_count;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buffer_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; atomicAdd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;draw_indirect_args.vertex_count, meshlet_triangle_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; 3u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 3u;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id_packed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; 6u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;var triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; 0u; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; meshlet_triangle_count; triangle_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;        draw_triangle_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;buffer_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; triangle_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] =&lt;&#x2F;span&gt;&lt;span&gt; cluster_id_packed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; triangle_id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;raster-first-pass&quot;&gt;Raster (First Pass)&lt;a class=&quot;zola-anchor&quot; href=&quot;#raster-first-pass&quot; aria-label=&quot;Anchor link for: raster-first-pass&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve now determined what to draw, so it&#x27;s time to draw it.&lt;&#x2F;p&gt;
&lt;p&gt;As I mentioned in the previous section, we&#x27;re doing a single draw_indirect() call to rasterize every single cluster at once, using the DrawIndirectArgs buffer we filled out in the previous pass.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to render to a few different render targets:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Depth buffer&lt;&#x2F;li&gt;
&lt;li&gt;Visibility buffer (optional, not rendered for shadow map views)&lt;&#x2F;li&gt;
&lt;li&gt;Material depth (optional, not rendered for shadow map views)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The depth buffer is straightforward. The visibility buffer is a R32Uint texture storing the cluster ID + triangle ID packed together in the same way as during the culling pass. Material depth is a R16Uint texture storing the material ID. The visibility buffer and material depth textures will be used in a later pass for shading.&lt;&#x2F;p&gt;
&lt;p&gt;Note that it would be better to skip writing material depth here, and write it out as part of the later copy material depth pass. This pass is going to change in the near future when I add software rasterization however (more on this in a second), so for now I&#x27;ve left it as-is.&lt;&#x2F;p&gt;
&lt;p&gt;I won&#x27;t show the entire shader, but getting the triangle data to render for each vertex is fairly straightforward. The vertex invocation index can be used to index into the draw_triangle_buffer that we wrote out during the culling pass, giving us a packed cluster ID and triangle ID. The vertex invocation index % 3 gives us which vertex within the triangle this is, and then we can lookup the cluster&#x27;s meshlet and instance data as normal. Vertex data can be obtained by following the tree of indices using the index ID and meshlet info.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;vertex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; VertexOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; packed_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; draw_triangle_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 3u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; packed_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 6u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; extractBits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed_ids, 0u, 6u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; 3u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) + (&lt;&#x2F;span&gt;&lt;span&gt;vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; 3u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_meshlet_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet.start_index_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; index_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_vertex_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet.start_vertex_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unpack_meshlet_vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_vertex_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;vertex_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_instance_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; instance_uniform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_instance_uniforms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;instance_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;depth_buffer.png&quot; alt=&quot;Depth buffer&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;visbuffer.png&quot; alt=&quot;Visibility buffer&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;material_depth.png&quot; alt=&quot;Material depth&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quad overdraw from Renderdoc
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;quad_overdraw.png&quot; alt=&quot;Quad overdraw from Renderdoc&quot; &#x2F;&gt;
Triangle size from Renderdoc
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;triangle_size.png&quot; alt=&quot;Triangle size from Renderdoc&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;With the overview out of the way, the real topic to discuss for this pass is &quot;why a single draw indirect?&quot; There are several other possibilities I could have gone with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mesh shaders&lt;&#x2F;li&gt;
&lt;li&gt;Single draw indexed indirect after writing out an index buffer during the culling pass&lt;&#x2F;li&gt;
&lt;li&gt;Single draw indirect, with a cluster ID buffer, snapping extra vertex invocations to NaN&lt;&#x2F;li&gt;
&lt;li&gt;Multi draw indirect with a sub-draw per cluster&lt;&#x2F;li&gt;
&lt;li&gt;Multi draw indirect with a sub-draw per meshlet triangle count bin&lt;&#x2F;li&gt;
&lt;li&gt;Software rasterization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mesh shaders are sadly not supported by wgpu, so that&#x27;s out. They would be the best option for taking advantage of GPU hardware.&lt;&#x2F;p&gt;
&lt;p&gt;Single draw indexed indirect was what I originally used. It&#x27;s about 10-20% faster (if I remember correctly, it&#x27;s been a while) than the non-indexed variant I use now. However, that means we would need to allocate an index buffer for our worst case usage at 12 bytes&#x2F;triangle. That&#x27;s extremely expensive for the amount of geometry we want to deal with, and you&#x27;d quickly run into buffer size limits (~2gb on most platforms). You could dynamically allocate a new buffer size based on amount of rendered triangles after culling with some CPU readback and some heuristics, but that&#x27;s more complicated and still very memory hungry. Single draw indirect with the 4 bytes&#x2F;triangle draw_triangle_buffer that I ended up using is still expensive, but good enough to scrape by for now.&lt;&#x2F;p&gt;
&lt;p&gt;Single draw indirect with a buffer of cluster IDs is also an option. Each meshlet has max 64 triangles, so we could spawn cluster_count * 64 * 3 vertex invocations. Vertex invocation index &#x2F; (64 * 3) would give you an index into the cluster ID buffer, and triangle ID is easy to recover via some simple arithmetic. At 4 bytes&#x2F;cluster, this option is &lt;em&gt;much&lt;&#x2F;em&gt; cheaper in memory than any of the previous methods. The problem is how to handle excess vertex invocations. Not all meshlets will have a full 64 triangles. It&#x27;s easy enough to have each vertex invocation check the meshlet&#x27;s triangle count, and if it&#x27;s not needed, write out a NaN position, causing the GPU to ignore the triangle. The problem is that this performed very poorly when I tested it. All those dummy NaN triangles took up valuable fixed-function time that the GPU could have spent processing other triangles. Maybe performance would be better if I were able to get meshlets much closer to the max triangle count, or halving the max triangle count to 32 per meshlet to spawn less dummy triangles, but I ended up not pursuing this method.&lt;&#x2F;p&gt;
&lt;p&gt;Multi draw is also an option. We could write out a buffer with 1 DrawIndirectArgs per cluster, giving 16 bytes&#x2F;cluster. Each sub-draw would contain exactly the right amount of vertex invocations per cluster. Each vertex invocation would be able to recover their cluster ID via the instance_id builtin, as we would set DrawIndirectArgs::first_instance to the cluster ID. On the CPU, this would still be a single draw call. In practice, I found this still performed poorly. While we are no longer bottlenecked by the GPU having to process dummy triangles, now the GPU&#x27;s command processor has to process all these sub-commands. At 1 sub-command per cluster, that&#x27;s a &lt;em&gt;lot&lt;&#x2F;em&gt; of commands. Like the fixed 64 vertex invocations per cluster path, we&#x27;re again bottlenecked on something that isn&#x27;t actual rasterization work.&lt;&#x2F;p&gt;
&lt;p&gt;An additional idea I thought of while writing this section is to bin each cluster by its meshlet triangle count. All clusters whose meshlets have 10 triangles would go in one bin, 12 triangles in a second bin, 46 triangles in a third bin, etc, for 63 bins total (we would never have a meshlet with 0 triangles). We could then write out a DrawIndirectArgs and list of cluster IDs per bin, and do a single multi_draw_indirect() call on the CPU, similiar to the last section. I haven&#x27;t tested it out, but this seems like a decent option in theory. I believe Nanite does something similiar in recent versions of Unreal Engine 5 in order to support different types of vertex shaders.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we could use software rasterization. We could write out a list of cluster IDs, spawn 1 workgroup per cluster, and have each workgroup manually rasterize the cluster via some linear algebra, bypassing fixed-function GPU hardware entirely. This is what Nanite does for over 90% of their clusters. Only large clusters and clusters needing depth clipping are rendered via hardware draws. Not only is this one of the most memory efficent options, it&#x27;s faster than hardware draws for the majority of clusters (hence why Nanite uses it so heavily). Unfortunately, wgpu once again lacks support for a needed feature, this time 64bit texture atomics. The good news is that @atlv24 is working on adding support for this feature, and I&#x27;m looking forward to implementing software rendering in a future release of Bevy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;downsample-depth&quot;&gt;Downsample Depth&lt;a class=&quot;zola-anchor&quot; href=&quot;#downsample-depth&quot; aria-label=&quot;Anchor link for: downsample-depth&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;With the first of the two passes of two pass occlusion culling rendered, it&#x27;s time to prepare for the second pass. Namely, we need to generate a new depth pyramid based on the depth buffer we just rendered.&lt;&#x2F;p&gt;
&lt;p&gt;For generating the depth pyramid, I ported the FidelityFX Single Pass Downsampler (SPD) to Bevy. SPD lets us perform the downsampling very efficiently, entirely in a single compute dispatch. You could use multiple raster passes, but that&#x27;s extremely expensive in both CPU time (command recording and wgpu resource tracking), and GPU time (bandwidth reading&#x2F;writing between passes, pipeline bubbles as the GPU spins up and down between passes).&lt;&#x2F;p&gt;
&lt;p&gt;For now, we&#x27;re actually using two compute dispatches, not one. Wgpu lacks support for globallycoherent buffers, so we have to split the dispatch in two to ensure writes made by the first are visible to the second. I also did not implement the subgroup version of SPD, as wgpu lacked support at the time (it has it now, minus quad operations, which SPD does need). Still very fast despite these small deficiencies.&lt;&#x2F;p&gt;
&lt;p&gt;One important note is that we need to ensure that the depth pyramid is conservative. For non-power-of-two depth textures, for instance, we might need special handling of the downsampling. Same for when we sample the depth pyramid during occlusion culling. I haven&#x27;t done anything special to handle this, but it seems to work well enough. I&#x27;m not entirely confident in the edge cases here though.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2024-06-09-virtual-geometry-bevy-0-14&#x2F;depth_pyramid.png&quot; alt=&quot;Depth pyramid&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;culling-second-pass&quot;&gt;Culling (Second Pass)&lt;a class=&quot;zola-anchor&quot; href=&quot;#culling-second-pass&quot; aria-label=&quot;Anchor link for: culling-second-pass&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The second culling pass is where we decide whether to render the rest of the clusters - the ones that we didn&#x27;t think were a good set of occluders for the scene, and decided to hold off on rendering.&lt;&#x2F;p&gt;
&lt;p&gt;This culling pass is much the same as the first, with a few key differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We skip frustum and LOD culling, as we did it the first time&lt;&#x2F;li&gt;
&lt;li&gt;We operate only on the clusters that we explicitly marked as second pass candidates during the first culling pass
&lt;ul&gt;
&lt;li&gt;We&#x27;re still doing a large 3d dispatch over all clusters in the scene, but we can early-out for the clusters that are not second pass candidates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;We use the current transforms for occlusion culling, instead of last frame&#x27;s&lt;&#x2F;li&gt;
&lt;li&gt;We occlusion cull using the depth pyramid generated from the previous pass&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By doing this, we can skip drawing any clusters that would be occluded by the existing geometry that we rendered in the first pass.&lt;&#x2F;p&gt;
&lt;p&gt;As a result of this pass, we have another DrawIndirectArgs we can use to draw the remaining clusters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;raster-second-pass&quot;&gt;Raster (Second Pass)&lt;a class=&quot;zola-anchor&quot; href=&quot;#raster-second-pass&quot; aria-label=&quot;Anchor link for: raster-second-pass&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This pass is identical to the first raster pass, just with the new set of clusters from the second culling pass.&lt;&#x2F;p&gt;
&lt;p&gt;Given that the camera and scene is static in the example frame that we&#x27;re looking at, the first pass perfectly calculated occlusion, and there is nothing to actually render in this pass.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;copy-material-depth&quot;&gt;Copy Material Depth&lt;a class=&quot;zola-anchor&quot; href=&quot;#copy-material-depth&quot; aria-label=&quot;Anchor link for: copy-material-depth&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For reasons we&#x27;ll get to in the material shading pass, we need to copy the R16Uint material depth texture we rasterized earlier to an actual Depth16Unorm depth texture. A simple fullscreen triangle pass with a sample and a divide performs the copy.&lt;&#x2F;p&gt;
&lt;p&gt;I mentioned earlier that ideally we wouldn&#x27;t write out the material depth during the rasterization pass. It would be better to instead write it out during this pass, by sampling the visibility buffer, looking up the material ID from the cluster ID, and then writing it out to the depth texture directly. I intend to switch to this method in the near future.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;import bevy_core_pipeline::fullscreen_vertex_shader::FullscreenVertexOutput
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@binding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; var material_depth: texture_2d&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; This pass copies the R16Uint material depth texture to an actual Depth16Unorm depth texture.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;fragment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;copy_material_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: FullscreenVertexOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_depth, vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.position.xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;65535.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;material-shading&quot;&gt;Material Shading&lt;a class=&quot;zola-anchor&quot; href=&quot;#material-shading&quot; aria-label=&quot;Anchor link for: material-shading&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we have the visibility buffer texture containing packed cluster and triangle IDs per pixel, and the material depth texture containing the material ID as a floating point depth value.&lt;&#x2F;p&gt;
&lt;p&gt;Now, it&#x27;s time to apply materials to the frame in a set of &quot;material shading&quot; draws. Note that we&#x27;re not necessarily rendering a lit and shaded scene. The meshlet feature works with all of Bevy&#x27;s existing rendering modes (forward, forward + prepass, and deferred). For instance, we could be rendering a GBuffer here, or a normal and motion vector prepass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vertex-shader&quot;&gt;Vertex Shader&lt;a class=&quot;zola-anchor&quot; href=&quot;#vertex-shader&quot; aria-label=&quot;Anchor link for: vertex-shader&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;For each material, we will perform one draw call of a fullscreen triangle.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1 fullscreen triangle draw per material
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_id, material_pipeline_id, material_bind_group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; meshlet_view_materials.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; meshlet_gpu_scene.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;material_present_in_scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_pipeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span&gt; pipeline_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_render_pipeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(*&lt;&#x2F;span&gt;&lt;span&gt;material_pipeline_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;material_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            render_pass.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_render_pipeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_pipeline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            render_pass.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_bind_group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, material_bind_group, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[])&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            render_pass.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we&#x27;re not drawing the typical 0..3 vertices for a fullscreen triangle. Instead, we&#x27;re drawing 0..3 for the first material, 3..6 for the second material, 6..9 for the third material, etc.&lt;&#x2F;p&gt;
&lt;p&gt;In the vertex shader (which is hardcoded for all materials), we can derive the material_id of the draw from the vertex index, and then use that to set the depth of the triangle.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;vertex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertex_input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@builtin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vertex_input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; 3u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; material_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; vertex_input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; 3u;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; material_depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;material_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;65535.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 1u, vertex_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; 1u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uv_to_ndc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;uv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, material_depth, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The material&#x27;s pipeline depth comparison function will be set to equals, so we only shade fragments for which the depth of the triangle is equal to the depth in the depth buffer. The depth buffer attached here is the material depth texture we rendered earlier. Thus, each fullscreen triangle draw per material will only shade the fragments for that material.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is pretty inefficent if you have many materials. Each fullscreen triangle will cost an entire screen&#x27;s worth of depth comparisons. In the future I&#x27;d like to switch to compute-shader based material shading.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fragment-shader&quot;&gt;Fragment Shader&lt;a class=&quot;zola-anchor&quot; href=&quot;#fragment-shader&quot; aria-label=&quot;Anchor link for: fragment-shader&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we&#x27;ve determined what fragments to shade, it&#x27;s time to apply the material&#x27;s shader code to those fragments. Each fragment can sample the visibility buffer, recovering the cluster ID and triangle ID. Like before, this provides us access to the rest of the instance and mesh data.&lt;&#x2F;p&gt;
&lt;p&gt;The remaining tricky bit is that since we&#x27;re not actually rendering a mesh in the draw call, and are using a single triangle just to cover some fragments to shade, we don&#x27;t have automatic interpolation of vertex attributes within a mesh triangle or screen-space derivatives for mipmapped texture sampling.&lt;&#x2F;p&gt;
&lt;p&gt;To compute this data ourselves, each fragment can load all 3 vertices of its mesh triangle, and compute the barycentrics and derivatives manually. Big thanks to The Forge for this code.&lt;&#x2F;p&gt;
&lt;p&gt;In Bevy, all the visibility buffer loading, data loading and unpacking, vertex interpolation calculations, etc is wrapped up in the &lt;code&gt;resolve_vertex_output()&lt;&#x2F;code&gt; function for ease of use.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;&#x2F; Load the visibility buffer texture and resolve it into a VertexOutput.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_vertex_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;frag_coord&lt;&#x2F;span&gt;&lt;span&gt;: vec4&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; VertexOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; packed_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; textureLoad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;meshlet_visibility_buffer, vec2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;frag_coord.xy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.r;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cluster_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; packed_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 6u;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlet_cluster_meshlet_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;cluster_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; meshlet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; meshlets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;meshlet_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; triangle_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; extractBits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;packed_ids, 0u, 6u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;ConfettiFX&#x2F;The-Forge&#x2F;blob&#x2F;2d453f376ef278f66f97cbaf36c0d12e4361e275&#x2F;Examples_3&#x2F;Visibility_Buffer&#x2F;src&#x2F;Shaders&#x2F;FSL&#x2F;visibilityBuffer_shade.frag.fsl#L83-L139
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; partial_derivatives &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;compute_partial_derivatives&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clip_position_1, clip_position_2, clip_position_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frag_coord_ndc,
&lt;&#x2F;span&gt;&lt;span&gt;        view.viewport.zw,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; world_position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mat3x4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;world_position_1, world_position_2, world_position_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; partial_derivatives.barycentrics;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mat3x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_1.uv, vertex_2.uv, vertex_3.uv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; partial_derivatives.barycentrics;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ddx_uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mat3x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_1.uv, vertex_2.uv, vertex_3.uv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; partial_derivatives.ddx;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ddy_uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mat3x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;vertex_1.uv, vertex_2.uv, vertex_3.uv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; partial_derivatives.ddy;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;downsample-depth-again&quot;&gt;Downsample Depth (Again)&lt;a class=&quot;zola-anchor&quot; href=&quot;#downsample-depth-again&quot; aria-label=&quot;Anchor link for: downsample-depth-again&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Lastly, for next frame&#x27;s first culling pass, we&#x27;re going to need the previous frame&#x27;s depth pyramid. This is where we&#x27;ll generate it. We&#x27;ll use the same exact process that we used for the first depth downsample, but this time we&#x27;ll use the depth buffer generated as a result of the second raster pass, instead of the first.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;future-work&quot;&gt;Future Work&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-work&quot; aria-label=&quot;Anchor link for: future-work&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;And with that we&#x27;re done with the frame breakdown. I&#x27;ve covered all the major steps and shaders of how virtual geometry will work in Bevy 0.14. I did skip some of the CPU-side data management, but it&#x27;s fairly boring and subject to a rewrite soon anyways.&lt;&#x2F;p&gt;
&lt;p&gt;However, Bevy 0.14 is just the start. There&#x27;s tons of improvements I&#x27;m hoping to implement in a future version, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Major improvements to the rasterization passes via software rasterization, and trying out my multi draw with bins idea for hardware raster&lt;&#x2F;li&gt;
&lt;li&gt;Copying Nanite&#x27;s idea of culling and LOD selection via persistent threads. This should let us eliminate the separate fill_cluster_buffers step, speedup culling, and remove the need for large 3d dispatches over all clusters in the scene&lt;&#x2F;li&gt;
&lt;li&gt;Compressing asset vertex data by using screen-derived tangents and octahedral-encoded normals, and possibly position&#x2F;UV quantization&lt;&#x2F;li&gt;
&lt;li&gt;Performance, quality, reliability, and workflow improvements for the mesh to meshlet mesh asset preprocessing&lt;&#x2F;li&gt;
&lt;li&gt;Compute-based material shading passes instead of the fullscreen triangle method, and possibly software variable rate shading, inspired by Unreal Engine 5.4&#x27;s &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.unrealengine.com&#x2F;en-US&#x2F;blog&#x2F;take-a-deep-dive-into-nanite-gpu-driven-materials&quot;&gt;GPU-driven Nanite materials&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;filmicworlds.com&#x2F;blog&#x2F;visibility-buffer-rendering-with-material-graphs&quot;&gt;this set of blog posts&lt;&#x2F;a&gt; from John Hable&lt;&#x2F;li&gt;
&lt;li&gt;Streaming in and out asset data from&#x2F;to disk instead of keeping all of it in memory all the time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With any luck, and a lot of hard work, I&#x27;ll be back for another blog post about all these changes in the future. Until then, enjoy Bevy 0.14!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bevy&#x27;s Third Birthday - Reflections on Rendering</title>
		<published>2023-09-12T00:00:00+00:00</published>
		<updated>2023-09-12T00:00:00+00:00</updated>
		<link href="https://jms55.github.io/posts/2023-09-12-bevy-third-birthday/" type="text/html"/>
		<id>https://jms55.github.io/posts/2023-09-12-bevy-third-birthday/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Written in response to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;bevys-third-birthday&quot;&gt;Bevy&#x27;s Third Birthday&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You can skip this section if you&#x27;re only interested in hearing about Bevy - we&#x27;ll get to that in a minute.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;who-am-i&quot;&gt;Who am I?&lt;a class=&quot;zola-anchor&quot; href=&quot;#who-am-i&quot; aria-label=&quot;Anchor link for: who-am-i&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Hi, I&#x27;m JMS55, and I&#x27;ve been working on Bevy&#x27;s 3D renderer for the past ~10 months.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve also been involved in the Rust gamedev community for a long time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I have been using Rust since pre-1.0 (around ~7 years ago).&lt;&#x2F;li&gt;
&lt;li&gt;Tried out Piston when it first came out; same with Amythest.&lt;&#x2F;li&gt;
&lt;li&gt;Contributed a (very tiny) bit to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;veloren.net&quot;&gt;Veloren&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JMS55&#x2F;botnet#botnet&quot;&gt;Wrote a demo&lt;&#x2F;a&gt; for a cool RTS simulation kind of game where you program your units via Rust-compiled-to-WASM (and would love to get back to it at some point), using Wasmtime and Macroquad.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JMS55&#x2F;sandbox#sandbox&quot;&gt;Wrote a falling sand game&lt;&#x2F;a&gt; using pixels, wgpu, and imgui-rs (I also tried egui and yakui). I wrote the shaders for it in GLSL - this was before wgpu started using WGSL!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;parasyte&#x2F;pixels&quot;&gt;Pixels&lt;&#x2F;a&gt; was the first time I ever made a non-trivial contribution to an open source library. Now, I&#x27;m working on Bevy pretty much daily!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributing-to-bevy&quot;&gt;Contributing to Bevy&lt;a class=&quot;zola-anchor&quot; href=&quot;#contributing-to-bevy&quot; aria-label=&quot;Anchor link for: contributing-to-bevy&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First, some overall thoughts on my experience contributing to Bevy.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been exceedingly rewarding to work on an open source project with this kind of community. Before Bevy, I mainly worked on my own projects, and inevitably got burnt out. It&#x27;s hard to maintain motivation when you&#x27;re the only one involved. It&#x27;s been super energizing getting to bounce ideas off of the other amazing developers working on Bevy!&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, seeing code I write translate directly into real-world use is awesome. Thank you to all the other developers and users of Bevy!&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a user of Bevy, and are thinking about getting involved in Bevy&#x27;s development, I highly recommended it! One of the great things about Bevy is it&#x27;s modularity and focus on ECS. &quot;Engine code&quot; and &quot;user code&quot; are not substantially different. If you&#x27;ve used Bevy before, chances are you can write code &lt;em&gt;for&lt;&#x2F;em&gt; Bevy.&lt;&#x2F;p&gt;
&lt;p&gt;Quoting Cart, &quot;Bevy users &lt;em&gt;are&lt;&#x2F;em&gt; bevy developers, they just don&#x27;t know it yet&quot;. The developers and community are super friendly. Feel free to join our &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;bevy&quot;&gt;Discord&lt;&#x2F;a&gt;, pick a topic you find interesting - say, #rendering-dev :) - and starting asking lots of questions!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;post-overview&quot;&gt;Post overview&lt;a class=&quot;zola-anchor&quot; href=&quot;#post-overview&quot; aria-label=&quot;Anchor link for: post-overview&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;With that out of the way: this blog post will be my reflection on nearly a year of Bevy development (Bevy 0.9-dev to 0.12-dev). Specifically, bevy_pbr, bevy_core_pipeline, and bevy_render, along with some related crates such as wgpu and naga. I (mostly) won&#x27;t be talking about the ECS, 2D renderer, UI, and other areas of Bevy.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll be covering what I (and others) worked on, what went well, important items we need to spend time developing, and some new features I&#x27;m excited to work on in the coming months.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;this-year&quot;&gt;This Year&lt;a class=&quot;zola-anchor&quot; href=&quot;#this-year&quot; aria-label=&quot;Anchor link for: this-year&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;what-we-achieved&quot;&gt;What we achieved&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-we-achieved&quot; aria-label=&quot;Anchor link for: what-we-achieved&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This year, I&#x27;ve worked on and merged the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bloom (In collaboration with others) (Bevy 0.9, 0.10)&lt;&#x2F;li&gt;
&lt;li&gt;EnvironmentMapLight (IBL) (Bevy 0.10)&lt;&#x2F;li&gt;
&lt;li&gt;Temporal antialiasing (TAA) (Bevy 0.11)&lt;&#x2F;li&gt;
&lt;li&gt;Screen-space ambient occlusion (SSAO) (Bevy 0.11)&lt;&#x2F;li&gt;
&lt;li&gt;Skybox (Bevy 0.11)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve also worked on, and either didn&#x27;t end up merging or am still working on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Percentage-closer filtering (PCF) for smoothing out the edges of shadows&lt;&#x2F;li&gt;
&lt;li&gt;Automated EnvironmentMapLight generation (replacing glTF-IBL-Sampler)&lt;&#x2F;li&gt;
&lt;li&gt;Support for AMD&#x27;s FSR and Nvidia&#x27;s DLSS upscalers&lt;&#x2F;li&gt;
&lt;li&gt;Multithreaded rendering for improved performance&lt;&#x2F;li&gt;
&lt;li&gt;Clear coat layer for StandardMaterial&lt;&#x2F;li&gt;
&lt;li&gt;GPU pass timing overlay for profiling the renderer (GPU timestamps)&lt;&#x2F;li&gt;
&lt;li&gt;Ergonomic improvements for the renderer internals&lt;&#x2F;li&gt;
&lt;li&gt;Real-time fully dynamic global illumination (more on this later!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and many other smaller PRs not interesting enough to mention, new examples contributed, discussion posts and conversations, bug investigations, performance profiling sessions, and reviewing other peoples&#x27; PRs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;ssao.png&quot; alt=&quot;ssao&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;taa.png&quot; alt=&quot;taa&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;bloom.png&quot; alt=&quot;bloom&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Additional major rendering features that we merged, but that I did not directly work on include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fast approximate antialiasing (FXAA)&lt;&#x2F;li&gt;
&lt;li&gt;Depth and normal prepasses&lt;&#x2F;li&gt;
&lt;li&gt;Cascaded shadow maps (CSM)&lt;&#x2F;li&gt;
&lt;li&gt;Fog effects&lt;&#x2F;li&gt;
&lt;li&gt;Better tonemapping&lt;&#x2F;li&gt;
&lt;li&gt;Morph targets&lt;&#x2F;li&gt;
&lt;li&gt;A complete revamp of rendering system sets&lt;&#x2F;li&gt;
&lt;li&gt;Ergonomic improvements for render node APIs&lt;&#x2F;li&gt;
&lt;li&gt;Many performance improvements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;things-i-feel-went-well&quot;&gt;Things I feel went well&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-feel-went-well&quot; aria-label=&quot;Anchor link for: things-i-feel-went-well&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Overall, I&#x27;m fairly satisfied both with what Bevy has accomplished, and what I&#x27;ve personally learned and accomplished this year.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy has gone from &quot;we have some basic PBR shaders with analytic direct lighting&quot; to ~70% of the way to a fully production-ready,
indie game-usable renderer with much fewer caveats, and much fancier lighting and post processing!&lt;&#x2F;p&gt;
&lt;p&gt;Take Slime Rancher, a hit indie game from 2017. &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;pixelalchemy.dev&#x2F;posts&#x2F;a-frame-of-slime-rancher&quot;&gt;This post&lt;&#x2F;a&gt; goes into
detail on the tricks and rendering techniques the game used to achieve its graphics. Bevy 0.11 has support for almost all of the listed techniques! The only thing we&#x27;re missing are decals, and refraction (although there&#x27;s a PR open that implements screen-space refaction!).&lt;&#x2F;p&gt;
&lt;p&gt;I would specifically like to note the &lt;em&gt;amount&lt;&#x2F;em&gt; of people working on rendering features, and how it&#x27;s increased over time. It&#x27;s a great sign to see that rendering isn&#x27;t the domain of only 1 or 2 dedicated developers. Rather, we have a fairly large amount of people contributing major rendering features and improvements.&lt;&#x2F;p&gt;
&lt;p&gt;Too often, I feel rendering is seen as a kind of opaque witchcraft. To some extent, I feel that perception is true. Writing a shader (GPU program) is not like writing a program for the CPU in Rust. The graphics APIs themselves (in our case, wgpu) are not the most intuitive, and are often subject to compatibility or performance constraints that lead to poor ergonomics. Furthermore, even if you can write a shader, and know the graphics APIs, it&#x27;s not always clear &lt;em&gt;how&lt;&#x2F;em&gt; to assemble all that together into a performant, compatible, ergonomic renderer.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s where the &quot;but&quot; comes: I don&#x27;t think it&#x27;s that much worse than programming any other part of a game engine in general. Designing a complete UI system, or an ECS, or a physics library, etc, is rarely a simple one person job. Designing a rendering engine is much the same.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy has been able to consistently attract new rendering developers, often with little or no professional rendering experience. To me, that&#x27;s an encouraging sign that we&#x27;re doing something right. We may not rival Unity&#x27;s or Godot&#x27;s renderers &lt;em&gt;now&lt;&#x2F;em&gt;, but in another year, I&#x27;m confident that we&#x27;ll surpass them in a few areas, and at least match them in most of the important ones :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;things-i-feel-we-need-to-work-on&quot;&gt;Things I feel we need to work on&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-feel-we-need-to-work-on&quot; aria-label=&quot;Anchor link for: things-i-feel-we-need-to-work-on&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we&#x27;ve covered what I felt went well, it&#x27;s time to talk about things we need to improve on. These are pain points either I or other developers have consistently faced, or things I&#x27;ve seen users brought up many times.&lt;&#x2F;p&gt;
&lt;p&gt;In no specific order, here are some things I feel we need to prioritize.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-dynamic-comprehensive-and-accessible-test-scenes&quot;&gt;More dynamic, comprehensive, and accessible test scenes&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-dynamic-comprehensive-and-accessible-test-scenes&quot; aria-label=&quot;Anchor link for: more-dynamic-comprehensive-and-accessible-test-scenes&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Most rendering development is currently done with either dedicated Bevy example scenes, or Lumberyard&#x27;s Bistro or Intel&#x27;s Sponza scenes.
The former tend to be too simple for more intensive rendering tests, and the latter are difficult to setup, and don&#x27;t have the dynamism a real game would have. Furthermore, we don&#x27;t have any scenes that excercise &lt;em&gt;all&lt;&#x2F;em&gt; of Bevy&#x27;s rendering features at once, and how they might interact.&lt;&#x2F;p&gt;
&lt;p&gt;It would be great to get more test scenes that are easy to setup and tweak, demonstrate many of Bevy&#x27;s rendering features working in tandem, and overall provide real-world uses cases that we can test against, rather than toy scenes. Currently, thoroughly exercising a new rendering feature or performance change requires almost as much work as writing the feature itself. To some extent, I&#x27;m asking us to develop a small game, focused on polished rendering and animation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance&quot; aria-label=&quot;Anchor link for: performance&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;A fact that is probably surprising to developers without much experience in rendering is that Bevy&#x27;s renderer performance is currently heavily CPU-limited - not GPU-limited, as you might expect. There&#x27;s two factor to this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Bevy is inefficent with how it stores and uses rendering data&lt;&#x2F;li&gt;
&lt;li&gt;Bevy makes too many draw calls, and does too much state binding changes between draws&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In order to become a serious renderer, we&#x27;ll need to dramatically improve our CPU performance. Thankfully, we have a &lt;em&gt;lot&lt;&#x2F;em&gt; of changes in progress towards this goal. Many core parts of the renderer that have been neglected in favor of working on new features are being revamped and improved. Expect large performance gains in Bevy 0.12, and probably 0.13.&lt;&#x2F;p&gt;
&lt;p&gt;Long-term, we&#x27;ll want to support GPU-driven rendering, where the GPU handles almost all of the rendering work. An extreme example of this kind of architecture is Unreal Engine&#x27;s Nanite, which is capable of rendering micro-poly meshes. We (almost certainly) won&#x27;t go &lt;em&gt;that&lt;&#x2F;em&gt; far, but implementing 60% of the techniques (bindless, draw indirect, compute-based rasterizer, compute-based fustrum culling, two pass occlusion culling, and also asset streaming) should give us 90% of the benefit, and allow complex scenes with many orders of magnitude greater amounts of meshes. This is an exciting area to work on, and there&#x27;s a lot to do!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;a class=&quot;zola-anchor&quot; href=&quot;#documentation&quot; aria-label=&quot;Anchor link for: documentation&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;While performance and new features have been steadily improving, documentation, not so much. The docs for bevy_render, bevy_core_pipeline, and bevy_pbr are, uhh, sparse at best. Frequent questions I see include &quot;how do I do &amp;lt;custom kind of rendering&amp;gt;, which should be a fairly routine kind of extension, but I have no idea where to start integrating it with Bevy&quot;, &quot;what shader imports are available&quot;, &quot;what does this error mean&quot;, and &quot;my rendering looks bad &#x2F; performance is bad, how do I improve this and understand why?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;We need to write more API docs, more module docs, and more long-form guides on how Bevy&#x27;s renderer is structured and how to achieve common tasks. This is something I&#x27;ve been wanting to work on, but much like blogging, I&#x27;ve discovered writing clear, useful docs is quite hard. This is a great area of new Bevy devs to get involved in!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, this is my first blog post. It&#x27;s been something I&#x27;ve been meaning to do for many years, but never actually gotten around to doing. Writing a blog post is a &lt;em&gt;lot&lt;&#x2F;em&gt; of work, and there&#x27;s the temptation to polish the writing until it&#x27;s perfect. Doing so would leave me no time to actually work on rendering!, so I&#x27;m going ahead and publishing this despite the fact that it&#x27;s not perfect :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ease-of-use&quot;&gt;Ease of use&lt;a class=&quot;zola-anchor&quot; href=&quot;#ease-of-use&quot; aria-label=&quot;Anchor link for: ease-of-use&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Similarly to the above section, while our features may be pretty good, internally, they&#x27;re not that great to write. The main rendering pass APIs are too abstract, and go through many traits, generic systems, and levels of indirection that greatly complicate understanding the renderer.&lt;&#x2F;p&gt;
&lt;p&gt;Writing new post processing or lighting passes involves a &lt;em&gt;lot&lt;&#x2F;em&gt; of boilerplate, especially around bind groups and resource&#x2F;pipeline creation.&lt;&#x2F;p&gt;
&lt;p&gt;These two things are also a large barrier to entry in getting new contributors to work on rendering.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the core Material code is brittle and not very extensible. A Bevy user&#x27;s options are to either use StandardMaterial, or write a completely custom material from scratch. There&#x27;s no easy way to do something like take the StandardMaterial, but animate the texture UVs according to this shader fragment, and then pass the result into some other shader fragment. Furthermore, writing the shader for a custom material involves some complicated coordination between vertex and fragment stage input and output types, and data bindings. Mismatched bindings or types is a common source of confusing errors for authors of custom materials. People have floated some ideas on how to improve this, but not a ton of concrete code yet. It&#x27;s something we&#x27;ll need to work on going forwards.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;review-speed&quot;&gt;Review speed&lt;a class=&quot;zola-anchor&quot; href=&quot;#review-speed&quot; aria-label=&quot;Anchor link for: review-speed&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;We have too many open PRs, and not enough reviewers! Reviews take a &lt;em&gt;long&lt;&#x2F;em&gt; time. Part of this is the fact that like I talked about above, rendering boilerplate can get pretty gnarly. Reviewing a rendering PR often involves one session to review the CPU-side code changes, and another entirely to review the GPU-side code. If we can improve rendering boilerplate, we will not only make it easier to write new features, but shorten the (currently fairly substantial) review time each feature has to go through before it can be merged.&lt;&#x2F;p&gt;
&lt;p&gt;Another issue is testing. Testing rendering does not lend itself well to unit tests. You need a variety of scenes, setups, and specific GPU and OS platforms (platform-specific bugs are sadly common, and feature support and performance widely varies). This all slows down reviews, and often we miss fairly impactful rendering bugs anyways.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ecosystem-investment&quot;&gt;Ecosystem investment&lt;a class=&quot;zola-anchor&quot; href=&quot;#ecosystem-investment&quot; aria-label=&quot;Anchor link for: ecosystem-investment&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;First, I&#x27;d like to thank the maintainers of the wgpu and naga crates, of which bevy_render sits atop, for their awesome work. Bevy&#x27;s renderer would not be possible without them!&lt;&#x2F;p&gt;
&lt;p&gt;These crates, however, form an entirely new graphics API&#x2F;toolchain, with a focus on wide compatibility and API safety. They don&#x27;t currently support some of the latest GPU features such as ray tracing, mesh shaders, threadgroup&#x2F;wave&#x2F;warp intrinsics, async compute, and mutable binding arrays (bindless textures), or have specific caveats. This is totally understandable after all - not many developers want or need these things, and it&#x27;s not WebGPU&#x27;s focus.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is of course for us to invest more time in writing those features and helping them out ourselves :). I&#x27;m not sure how we foster it, but it would be great to see more investment in wgpu, naga, and naga_oil from Bevy&#x27;s developers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bevy-editor&quot;&gt;Bevy editor&lt;a class=&quot;zola-anchor&quot; href=&quot;#bevy-editor&quot; aria-label=&quot;Anchor link for: bevy-editor&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;This isn&#x27;t quite rendering related, but like everyone else, I&#x27;m eagerly awaiting bevy_editor. It&#x27;ll be super useful for testing out rendering features, as clicking through GUI buttons is much easier than writing a system to manually toggle several features on and off with keypresses and rendering an in-game UI to show the enabled settings.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m also really looking forward to &lt;em&gt;developing&lt;&#x2F;em&gt; Bevy&#x27;s editor. I originally joined this project to do just that, and somehow ended up working on rendering instead! I mentioned before my Rust gamedev experience, but I also have a lot of experience with Rust UI dev and UI dev in general.&lt;&#x2F;p&gt;
&lt;p&gt;The key missing parts are twofold:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An ergonomic, reactive, pretty, capable, and scalable UI system&lt;&#x2F;li&gt;
&lt;li&gt;Concrete direction on how the editor will actually operate (as a seperate process with message passing, as a bevy_app plugin to the game process, etc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m interested in doing the work of designing the UI for the editor and writing all the UI code and features, but not so much figuring out the basic foundations. Hopefully others will take on this task :)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;things-i-m-excited-to-work-on-in-the-next-year&quot;&gt;Things I&#x27;m excited to work on in the next year(?)&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-m-excited-to-work-on-in-the-next-year&quot; aria-label=&quot;Anchor link for: things-i-m-excited-to-work-on-in-the-next-year&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Finally, I&#x27;d like to mention some things I&#x27;m excited to work on! Some of these I&#x27;ve already talked about, and others less so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;FSR &#x2F; DLSS&lt;&#x2F;li&gt;
&lt;li&gt;Procedural skybox&lt;&#x2F;li&gt;
&lt;li&gt;Bevy editor&lt;&#x2F;li&gt;
&lt;li&gt;GPU driven rendering&lt;&#x2F;li&gt;
&lt;li&gt;Profiling tools and system&#x2F;entity tracing and statistics&lt;&#x2F;li&gt;
&lt;li&gt;OpenPBR material&lt;&#x2F;li&gt;
&lt;li&gt;Raytraced direct lighting (ReSTIR DI &#x2F; RTX DI)&lt;&#x2F;li&gt;
&lt;li&gt;Screen-space reflections, indirect lighting, and SSAO improvements&lt;&#x2F;li&gt;
&lt;li&gt;Global illumination&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bevy-solari&quot;&gt;Bevy Solari&lt;a class=&quot;zola-anchor&quot; href=&quot;#bevy-solari&quot; aria-label=&quot;Anchor link for: bevy-solari&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s not something I&#x27;ve mentioned at all yet, but one of the things I&#x27;ve been spending a &lt;em&gt;lot&lt;&#x2F;em&gt; of time on the past several months is a project I&#x27;m calling bevy_solari.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy currently has support for direct lighting - i.e., simulating the light coming from a light source, and hitting a surface. In real life however, light dosen&#x27;t just stop at the first surface it hits. Light bounces around a scene, leading to mirror or blurry reflections, color bleeding, micro-shadows, and more. Simulating these many bounces of light is called global illumination (GI), and tends to be very expensive and slow to do in real time. Without GI, however, lighting tends to look kinda off, and a lot less prettier.&lt;&#x2F;p&gt;
&lt;p&gt;Most games tend to approximate global illumination via baked static lighting methods such as lightmaps, irradiance volumes, and environment maps, as well as very limited dynamic methods such as planar reflections, light&#x2F;reflection probes, and screen-space raytracing. Of these, Bevy currently only supports environment maps and SSAO, although I know that some people are working on implementing the other methods.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to recent advances in GPU hardware and algorithm development, however, fully dynamic, real time global illumination has become feasible. The field is rapidly developing, but there&#x27;s been many promising approaches including Tomasz Stachowiak&#x27;s Kajiya, DDGI, Unreal Engine&#x27;s Lumen (as seen in Unreal&#x27;s Lumen in the Land of Nanite demo, as well as Fornite), Nvidia&#x27;s ReSTIR GI &#x2F; RTX GI (as seen in Cyberpunk 2077), AMD&#x27;s GI-1.0, and Alexander Sannikov&#x27;s Radiance Cascades (as seen in the recent Path of Exile 2). It&#x27;s a &lt;em&gt;super&lt;&#x2F;em&gt; exciting area of research, and something I&#x27;ve been having an absolute (and sometimes frustrating!) blast learning.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s too much literature and detail to cover here (it deserves, and may eventually get, its own blog post), but suffice it to say that I&#x27;ve been working on my own GI system for Bevy inspired by many of these techniques. It utilizes GPU hardware-accelerated raytracing, and is targeted at high end GPUs. It&#x27;s not going to be released any time soon, partially due to wgpu lacking official raytracing support, and partially due to the massive amount of work and experimentation I still need to do. However, it&#x27;s open source, so feel free to try the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JMS55&#x2F;bevy&#x2F;tree&#x2F;solari&quot;&gt;demo example here&lt;&#x2F;a&gt;. Run &lt;code&gt;cargo run --example solari&lt;&#x2F;code&gt; from the repo root.&lt;&#x2F;p&gt;
&lt;p&gt;Below are some static screenshots of the renderer, but keep in mind that this is all running in realtime on a Nvidia RTX 3080 GPU, and is fully dynamic with movable camera, lights, and objects :)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bevy Solari in a cornell box scene - with GI
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;solari.png&quot; alt=&quot;bevy_solari in a cornell box scene&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Direct light only - no GI
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;solari_direct_only.png&quot; alt=&quot;bevy_solari - direct light only - no GI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Indirect irradiance debug view
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;solari_indirect.png&quot; alt=&quot;bevy_solari - indirect irradiance debug view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;World irradiance cache debug view
&lt;img src=&quot;https:&#x2F;&#x2F;jms55.github.io&#x2F;posts&#x2F;2023-09-12-bevy-third-birthday&#x2F;solari_world_cache.png&quot; alt=&quot;bevy_solari - world irradiance cache debug view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
</feed>